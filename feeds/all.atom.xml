<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>iknockdoor</title><link href="http://www.iknockdoor.com/" rel="alternate"></link><link href="http://www.iknockdoor.com/feeds/all.atom.xml" rel="self"></link><id>http://www.iknockdoor.com/</id><updated>2018-12-18T00:00:00+08:00</updated><entry><title>Android开发中如何充分利用Exception</title><link href="http://www.iknockdoor.com/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E5%A6%82%E4%BD%95%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8Exception.html" rel="alternate"></link><published>2018-12-18T00:00:00+08:00</published><updated>2018-12-18T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-12-18:/Android开发中如何充分利用Exception.html</id><summary type="html">Java中的Exception往往在Android开发中不能被充分利用，这里结合日常开发 中的一些经验，总结一下如何正确使用Excption，包括何时抛出异常，何时处理异常</summary><content type="html">
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 充分利用RuntimeException&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; 什么是RuntimeException&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
基础知识，不必详细介绍了，RuntimeException不强制要求捕获的特性正好带来了他的好处。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; 可以使用RuntimException的场景&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-2-1" class="outline-4"&gt;
&lt;h4 id="sec-1-2-1"&gt;&lt;span class="section-number-4"&gt;1.2.1&lt;/span&gt; 场景一&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-1"&gt;
&lt;p&gt;
通常在开发中，尤其是在开发一些基础类库给其他人使用时，会有一些异常场景，比如说当前状态错误，或者使用者传入了错误数据，然而这些异常场景又不至于影响模块功能的运行，也可以说内部就可以消化掉，这时抛出一个RuntimException再合适不过了。当然，需要配合全局的RuntimException
的捕捉器，否则还是会造成crash的。在这个全局的捕捉器中可以做一些记录工作，或者在调试阶段直接crash，都对调试非常有帮助。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-2" class="outline-4"&gt;
&lt;h4 id="sec-1-2-2"&gt;&lt;span class="section-number-4"&gt;1.2.2&lt;/span&gt; 场景二&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-2"&gt;
&lt;p&gt;
在日常开发中有一些情况，比如：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;极少出现
&lt;/li&gt;
&lt;li&gt;一旦出现不可恢复
&lt;/li&gt;
&lt;li&gt;不应出现，基本上数据外部使用错误，允许在调试阶段出现，不允许线上出现，比如被0除的问题，应该是在开发阶段就避免的。
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
对于上面这些情况，如果使用ThrowalbeException就会导致使用者很麻烦，所有的使用代码都需要处理exception，如果极少出现，那么处理的话性价比就会很低；如果不可恢复，使用者也不知道怎么处理；对于不应出现的情况外部catch就更没意义了。所以这种情况下使用RuntimException再合适不过。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 异常可以一层一层的抛，那么哪一层处理最合适？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
其实很简单，中间层最好是都不要处理，直接全部抛给最上层处理。那么哪里才是最上层呢？就是需要决定界面变化的哪一层，比如显示错误界面，提示错误信息，记录错误日志。如果中间层做了处理，会造成异常信息的丢失，如果这个信息正好是外部需要用的，那会更麻烦。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>RecyclerView在ConstraintLayout中使用时item的width设置MATCH</title><link href="http://www.iknockdoor.com/RecyclerView%E5%9C%A8ConstraintLayout%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%97%B6item%E7%9A%84width%E8%AE%BE%E7%BD%AEMATCH_PARENT%E6%97%A0%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98.html" rel="alternate"></link><published>2018-12-14T00:00:00+08:00</published><updated>2018-12-14T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-12-14:/RecyclerView在ConstraintLayout中使用时item的width设置MATCH_PARENT无效的问题.html</id><summary type="html">&lt;p&gt;
RecyclerView外部是ContrantLayout，在RecyclerView中new出view，并new出
LayoutParams，此时给MATCH_PARENT是无效的。通过调试，应该是
ConstrantLayout的和RecyclerView的问题，使用其他布局包含RecyclerView是正常的。 
&lt;/p&gt;

&lt;p&gt;
具体原因还未查清。
&lt;/p&gt;
</summary><content type="html">&lt;p&gt;
RecyclerView外部是ContrantLayout，在RecyclerView中new出view，并new出
LayoutParams，此时给MATCH_PARENT是无效的。通过调试，应该是
ConstrantLayout的和RecyclerView的问题，使用其他布局包含RecyclerView是正常的。 
&lt;/p&gt;

&lt;p&gt;
具体原因还未查清。
&lt;/p&gt;
</content><category term="Android"></category><category term="RecyclerView"></category></entry><entry><title>替换Mac OS X terminal系统自带emacs</title><link href="http://www.iknockdoor.com/%E6%9B%BF%E6%8D%A2Mac%20OS%20X%20terminal%E7%B3%BB%E7%BB%9F%E8%87%AA%E5%B8%A6emacs.html" rel="alternate"></link><published>2018-12-13T00:00:00+08:00</published><updated>2018-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-12-13:/替换Mac OS X terminal系统自带emacs.html</id><summary type="html">&lt;p&gt;
由于Mac OS X 10.13.6及更新版本对root权限的限制机制很严格，因此不能再像以前一样直接替换/usr/bin/emacs了，但可以使用/usr/local/bin目录，效果一样，也更合理。
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;touch /usr/local/bin …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
由于Mac OS X 10.13.6及更新版本对root权限的限制机制很严格，因此不能再像以前一样直接替换/usr/bin/emacs了，但可以使用/usr/local/bin目录，效果一样，也更合理。
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;touch /usr/local/bin/emacs
chmod +x /usr/local/bin/emacs
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
编辑并保存/usr/local/bin/emacs 文件为：
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;&lt;span class="org-comment-delimiter"&gt;#&lt;/span&gt;&lt;span class="org-comment"&gt;!/bin/&lt;/span&gt;&lt;span class="org-keyword"&gt;sh&lt;/span&gt;
/Applications/Emacs.app/Contents/MacOS/Emacs -nw &lt;span class="org-string"&gt;"$@"&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="emacs"></category></entry><entry><title>《英语语法新思维》读书笔记</title><link href="http://www.iknockdoor.com/%E3%80%8A%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%96%B0%E6%80%9D%E7%BB%B4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2018-12-12T00:00:00+08:00</published><updated>2018-12-12T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-12-12:/《英语语法新思维》读书笔记.html</id><summary type="html">《英语语法新思维》这本书已经是第二次看了。第一次看收获不是很多，第二次感觉开始明白作者所说的一些点，对这些问题也开始有了自己的思考，这里做下笔记，反复温习，提升英语能力。</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 初级教程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. 序言&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1-1"&gt;1.1.1. 语言的形式系统&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-2"&gt;1.1.2. 对英语三条常见的误解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-3"&gt;1.1.3. 怎样才是学会了，理解了一些知识点？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-4"&gt;1.1.4. 语境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-5"&gt;1.1.5. 英语思维与汉语思维的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. 绪论&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-2-1"&gt;1.2.1. 名词短语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2-2"&gt;1.2.2. 语言的构造级别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2-3"&gt;1.2.3. 词性与句子的成分&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3"&gt;1.3. 第一章 名词&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-3-1"&gt;1.3.1. 专有名词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-2"&gt;1.3.2. 名词的可数与不可数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-3"&gt;1.3.3. 自己根据自己的理解总结了一下名词的可数与不可数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-4"&gt;1.3.4. 名词可数与不可数的影响&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-5"&gt;1.3.5. 名词做定语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-6"&gt;1.3.6. 不可数名词的度量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-7"&gt;1.3.7. 名词单复数的变形&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-8"&gt;1.3.8. 复合名词&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-9"&gt;1.3.9. 名词的所有格&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-4"&gt;1.4. 第二章 限定词（一）冠词&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-4-1"&gt;1.4.1. 泛指与特指&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-4-2"&gt;1.4.2. the修饰复数时一定是表示特指&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-4-3"&gt;1.4.3. 是否所有的普通名词前必须有限定词或者说是冠词？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-4-4"&gt;1.4.4. 专有名词中的冠词&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 初级教程&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; 序言&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1-1" class="outline-4"&gt;
&lt;h4 id="sec-1-1-1"&gt;&lt;span class="section-number-4"&gt;1.1.1&lt;/span&gt; 语言的形式系统&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-1"&gt;
&lt;p&gt;
开始有点意思了，学英语像解谜，语言的初衷在于表达人的思维，感情，感受，如何从语言中准确的读出作者要表达的意思呢？不同的意思会用不同的形式表达，因此我们可以从细微的表达形式上的差别来试图解谜出作者要表达的意思，比如单复数，比如时态，比如冠词。不同的语言像是不同的形式系统，有着自己的规则，我们需要用这些语言特有的规则去理解语言表达的意思。对于英语，语言的表达形式包含了词汇和语法，一般来看表达形式主要是语法，其实词汇也可以看成是表达形式的一种，一个单词的拼写不过是个形式。先有语言，再有语法这个论点我特别认同。语法是对语言规律的总结。语法不是死的规则，如果说存在死的规则，那一定是语法是为了准确的表达意图，假如说有一个习惯用法，他不符合一般的语法规则，但因为已经被大众所接受，可以准确但表达意图，那这个语法就是对的。和上面这个例子相反，即使是这种特例，也必然是事出有因的，因此语法也不是随意的，而是有套路的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-2" class="outline-4"&gt;
&lt;h4 id="sec-1-1-2"&gt;&lt;span class="section-number-4"&gt;1.1.2&lt;/span&gt; 对英语三条常见的误解&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-2"&gt;
&lt;p&gt;
书中提到的，很有道理
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;第一，误认为语法先于语言。先有语言再有语法，语法是从大量的语言实践中总结出人们在使用这种语言时所遵循的一般思维规律或表达倾向。
&lt;/li&gt;
&lt;li&gt;第二，把语法规则当作一成不变的公式。如上所说，语言本质上没有语法，本质上还是学会并记忆各种用法，语法是对思维规律和表达倾向的总结，有了这个总结对各种语言现象就会更容易学习和记忆，所以语法事实上是帮助初学者学习和记忆的，同时，这个总结只是大部分情况，必然覆盖不全，学习语法可以帮助学习者快速的掌握大部分的情况，进一步的学习依然需要学习和记忆，所以本质上还是学习和记忆，并深入理解各种用法。那么怎么是理解了，学会了呢？能够明白细微形式上区别所表达的不同的意义，能够在合适的场景下正确的使用，就差不多了。
&lt;/li&gt;
&lt;li&gt;第三，把语法规则当成随意的公式。其实即使不是上述大部分情况的规则，那些所谓的“特例”背后也是有着共同的思维规律的。学习和记忆的重点就是在掌握这些思维规律。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-3" class="outline-4"&gt;
&lt;h4 id="sec-1-1-3"&gt;&lt;span class="section-number-4"&gt;1.1.3&lt;/span&gt; 怎样才是学会了，理解了一些知识点？&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-3"&gt;
&lt;p&gt;
英语的学习者能够准确的、有意义的、恰当的去运用英语语言结构。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;形式
&lt;/li&gt;
&lt;li&gt;意义
&lt;/li&gt;
&lt;li&gt;用法
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-4" class="outline-4"&gt;
&lt;h4 id="sec-1-1-4"&gt;&lt;span class="section-number-4"&gt;1.1.4&lt;/span&gt; 语境&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-4"&gt;
&lt;p&gt;
语言不同于数学，数学形式系统是准确的，不具备二意性的，而语言即使是完全相同的语法，表达形式，在不同的语境下也会有不同的含义，因此语言的学习和理解需要结合语境。最终的目标还是理解作者的意图。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-5" class="outline-4"&gt;
&lt;h4 id="sec-1-1-5"&gt;&lt;span class="section-number-4"&gt;1.1.5&lt;/span&gt; 英语思维与汉语思维的区别&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;可数与不可数
&lt;/li&gt;
&lt;li&gt;动作与状态
&lt;/li&gt;
&lt;li&gt;时态
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; 绪论&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-2-1" class="outline-4"&gt;
&lt;h4 id="sec-1-2-1"&gt;&lt;span class="section-number-4"&gt;1.2.1&lt;/span&gt; 名词短语&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-1"&gt;
&lt;p&gt;
名词短语是由名词与它的修饰语一起构成的。名词的修饰语称谓定语，有前置定语和后置定语的区分。同词性与句子成分的道理一样，定语不是一定是个词，可是介词短语，分词短语，不定式短语，等各种短语以及各种从句。限定词：用来限定名词所指范围的词。形容词：用来表示名词的性质和特征的词。名词短语的结构：
&lt;/p&gt;
&lt;pre class="example"&gt;
限定词 + 形容词 + 中心名词 + 六类后置定语
&lt;/pre&gt;
&lt;/div&gt;
&lt;ol class="org-ol"&gt;&lt;li&gt;&lt;a id="sec-1-2-1-1" name="sec-1-2-1-1"&gt;&lt;/a&gt;区分谁是主语&lt;br  /&gt;&lt;div class="outline-text-5" id="text-1-2-1-1"&gt;
&lt;p&gt;
看下面这个句子：
&lt;/p&gt;
&lt;pre class="example"&gt;
These red roses are for you.
&lt;/pre&gt;
&lt;p&gt;
谁是主语呢？these?然后red roses做同位语或者主语补足语？都不是，正确的理解是“these red roses”整体作为一个名词短语作为整个句子的主语，these在这里做限定词。从这个句子的理解中，应该学会this/these作为限定词的用法。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-1-2-1-2" name="sec-1-2-1-2"&gt;&lt;/a&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; there be句型&lt;br  /&gt;&lt;div class="outline-text-5" id="text-1-2-1-2"&gt;
&lt;pre class="example"&gt;
There are some red roses on that small table.
&lt;/pre&gt;
&lt;p&gt;
上面这个句子中some red roses做主语，但不是很理解，可能跟there be
句型有关。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-1-2-1-3" name="sec-1-2-1-3"&gt;&lt;/a&gt;名词短语的构成&lt;br  /&gt;&lt;div class="outline-text-5" id="text-1-2-1-3"&gt;
&lt;pre class="example"&gt;
限定词 + 形容词 + 中心名词 + 六类后置定语
&lt;/pre&gt;
&lt;p&gt;
这里的限定词指的是什么？用来限定名词所指的范围，对名词起泛指或特指、定量或不定量的限定修饰作用。比如these,three,a,the,my和that。这里尤其主语three这样的，要区分清楚是要做限定词还是做形容词。形容词就不过多解释了，就是用来表明名词的性质和特征的。一个名词可以带的后置修饰语的种类很多，包括定语从句、同位语从句、分词短语、不定式、介词短语、形容词短语和副词短语等等。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-2" class="outline-4"&gt;
&lt;h4 id="sec-1-2-2"&gt;&lt;span class="section-number-4"&gt;1.2.2&lt;/span&gt; 语言的构造级别&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;词
&lt;/li&gt;
&lt;li&gt;短语
&lt;/li&gt;
&lt;li&gt;句子
&lt;/li&gt;
&lt;li&gt;段落
&lt;/li&gt;
&lt;li&gt;篇章
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-3" class="outline-4"&gt;
&lt;h4 id="sec-1-2-3"&gt;&lt;span class="section-number-4"&gt;1.2.3&lt;/span&gt; 词性与句子的成分&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-3"&gt;
&lt;p&gt;
其实相当于上面的名词做定语这个例子的扩展，词性和句子的成分是两个概念，主谓宾定状补，这是句子的成分，是在句子这个层面（定语应该被排除，定语可以说不是在句子的层面，他是修饰词的），而名词，动词，形容词等等，这些是词的层面。词性和句子成分是两个不同的概念，所以对于两个名词在一起的情况，并不是前面的名词变成了形容词，而是他是起定语的作用，并没有限制说名词不能做定语。包括句子的成分不一定是一个单词，也可以是短语和从句。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; 第一章 名词&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
什么是名词这个无需多言了。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-1" class="outline-4"&gt;
&lt;h4 id="sec-1-3-1"&gt;&lt;span class="section-number-4"&gt;1.3.1&lt;/span&gt; 专有名词&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-1"&gt;
&lt;p&gt;
星期，月份，四季这些没什么的，背就好了。
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="org-ol"&gt;&lt;li&gt;&lt;a id="sec-1-3-1-1" name="sec-1-3-1-1"&gt;&lt;/a&gt;阴历在英语中怎么说&lt;br  /&gt;&lt;div class="outline-text-5" id="text-1-3-1-1"&gt;
&lt;pre class="example"&gt;
the solar calendar and the lunar calendar
&lt;/pre&gt;
&lt;p&gt;
阴历和阳历。
&lt;/p&gt;
&lt;pre class="example"&gt;
the second month on the lunar calendar / the second lunar month 阴历二月
the seventh of the seventh lunar month.七夕
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-2" class="outline-4"&gt;
&lt;h4 id="sec-1-3-2"&gt;&lt;span class="section-number-4"&gt;1.3.2&lt;/span&gt; 名词的可数与不可数&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-2"&gt;
&lt;p&gt;
名词的可数与不可数不是绝对的，而是相对的，根表达的含义有关，另外一个跟使用习惯或习惯性用法关系也比较大。或者说一个名词的可数与不可数并不是固定的，而是跟上下文相关的，一般说的可数与不可数只是通常情况。
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="org-ol"&gt;&lt;li&gt;&lt;a id="sec-1-3-2-1" name="sec-1-3-2-1"&gt;&lt;/a&gt;character&lt;br  /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-1-3-2-2" name="sec-1-3-2-2"&gt;&lt;/a&gt;characteristic&lt;br  /&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-3" class="outline-4"&gt;
&lt;h4 id="sec-1-3-3"&gt;&lt;span class="section-number-4"&gt;1.3.3&lt;/span&gt; 自己根据自己的理解总结了一下名词的可数与不可数&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;重点在于想表达的概念，特指还是泛指？抽象的还是具体的？可数的还是不可数的？能数的还是不能数的？
&lt;/li&gt;
&lt;li&gt;是否有共同的特点，给定语时，如果定语表示的是个有不同的，那需要可数名词（复数）
&lt;/li&gt;
&lt;li&gt;看书中《Eating for Energy》这篇文章最后，当food表示几种具有共同特点的食物时，这几种是可数的，所以food会用可数形式。还有中间说甜食的时候，sugars，在这里用了复数，白砂糖本身是不可数的，但这里代表的意思的各种甜食，所以用了复数。
&lt;/li&gt;
&lt;li&gt;前后语境 ，前后对应，看前后的冠词和谓语的形式
&lt;/li&gt;
&lt;li&gt;习惯用法，对于固定表达某意义的习惯性用法要保持
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-4" class="outline-4"&gt;
&lt;h4 id="sec-1-3-4"&gt;&lt;span class="section-number-4"&gt;1.3.4&lt;/span&gt; 名词可数与不可数的影响&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-4"&gt;
&lt;p&gt;
上面我们知道，重点在于想表达的意义，那么对形式的影响什么？
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;影响限定词的使用，如果是不可数，通常没有限定词或用于不可数名词的限定词，比如 a piece of等等。而对于可数名词，单数情况下会有a限定词，复数情况下也会有对应的限定词
&lt;/li&gt;
&lt;li&gt;影响谓词的使用，不可数名词使用单数形式的谓词
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-5" class="outline-4"&gt;
&lt;h4 id="sec-1-3-5"&gt;&lt;span class="section-number-4"&gt;1.3.5&lt;/span&gt; 名词做定语&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-5"&gt;
&lt;p&gt;
这就是长久以来困惑我的一个语法，一直以为只有形容词才能做定语，其实名词也是可以做定语的。以前遇到两个名字在一起的时候一直搞不明白这是个什么语法，现在才明白，原来很简单，只是名词做定语而已。
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="org-ol"&gt;&lt;li&gt;&lt;a id="sec-1-3-5-1" name="sec-1-3-5-1"&gt;&lt;/a&gt;名词做定语的时候也是有可数与不可数概念的区分的，还是看他表达的含义&lt;br  /&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-6" class="outline-4"&gt;
&lt;h4 id="sec-1-3-6"&gt;&lt;span class="section-number-4"&gt;1.3.6&lt;/span&gt; 不可数名词的度量&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;piece 抽象名词和物质名词
advice,bread,baggage,news,furniture
&lt;/li&gt;
&lt;li&gt;bottle,cup,drop,glass 修饰液态物质
&lt;/li&gt;
&lt;li&gt;a loaf of bread (一长条面包)
&lt;/li&gt;
&lt;li&gt;a tube of toothpaste （一筒牙膏）
&lt;/li&gt;
&lt;li&gt;a slice of meat （一片肉）
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-7" class="outline-4"&gt;
&lt;h4 id="sec-1-3-7"&gt;&lt;span class="section-number-4"&gt;1.3.7&lt;/span&gt; 名词单复数的变形&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-7"&gt;
&lt;p&gt;
这个部分主要靠积累了，有一个点需要说明一下，在英语中，一以上算作复数，这就是说，比如：
&lt;/p&gt;
&lt;pre class="example"&gt;
one and half days
&lt;/pre&gt;
&lt;p&gt;
一天半，day要用复数
&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="org-ol"&gt;&lt;li&gt;&lt;a id="sec-1-3-7-1" name="sec-1-3-7-1"&gt;&lt;/a&gt;只用做单数的名词——不可数名，专有名词&lt;br  /&gt;&lt;div class="outline-text-5" id="text-1-3-7-1"&gt;
&lt;p&gt;
注意，用作单数指的是谓语会用单数形式
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-1-3-7-2" name="sec-1-3-7-2"&gt;&lt;/a&gt;只用做复数的名词&lt;br  /&gt;&lt;div class="outline-text-5" id="text-1-3-7-2"&gt;
&lt;p&gt;
这里也要注意，虽然可能指的是一件物品，但谓语会用复数形式，比如
glasses(眼镜)
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-1-3-7-3" name="sec-1-3-7-3"&gt;&lt;/a&gt;单形复意的名词&lt;br  /&gt;&lt;div class="outline-text-5" id="text-1-3-7-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;people
people做“人们，人民”讲的时候，相当于person的复数形式，谓语要用复数形式。但如果做“民族，部族”讲的时候，就是个普通名词，有单复数变化。
&lt;/li&gt;
&lt;li&gt;cattle
做“牛群”讲的时候用作复数
&lt;/li&gt;
&lt;li&gt;police
通常表示“警察部队，警方”的概念，是一个集体名词，用作复数。如果表示个别的、具体的“警官”，则用a police officer/a policeman
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="sec-1-3-7-4" name="sec-1-3-7-4"&gt;&lt;/a&gt;"the+形容词"——表示一类人的复数名词&lt;br  /&gt;&lt;div class="outline-text-5" id="text-1-3-7-4"&gt;
&lt;p&gt;
表示一类人，此时当作复数名词，做主语时谓语要用复数。
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-8" class="outline-4"&gt;
&lt;h4 id="sec-1-3-8"&gt;&lt;span class="section-number-4"&gt;1.3.8&lt;/span&gt; 复合名词&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-8"&gt;
&lt;p&gt;
在讲复合名词单复数变形的时候涉及到了复合名词，这部分倒是可以看到各种各样的复合名词，比较有意思，可以学习一下如何构造复合名词。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;man/woman + 名词
&lt;/li&gt;
&lt;li&gt;以-man/-woman/-child结尾的复合名词
&lt;/li&gt;
&lt;li&gt;名词+介词或介词短语
&lt;/li&gt;
&lt;li&gt;由短语动词演变成为的复合名词
&lt;/li&gt;
&lt;li&gt;名词+形容词，这个还是挺重要的，如果不能正确识别出会影响对整句的理解。
&lt;ul class="org-ul"&gt;
&lt;li&gt;notary public/notaries public (公证员)
&lt;/li&gt;
&lt;li&gt;secretary general/secretaries general(秘书长)
&lt;/li&gt;
&lt;li&gt;Attorney General/Attorneys General(大法官，司法部长)
&lt;/li&gt;
&lt;li&gt;consul general/consuls general（总领事）
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3-9" class="outline-4"&gt;
&lt;h4 id="sec-1-3-9"&gt;&lt;span class="section-number-4"&gt;1.3.9&lt;/span&gt; 名词的所有格&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-9"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;人或高等动物的所有格用's，其他用of。如果是短语或从句做定语也要用of
&lt;/li&gt;
&lt;li&gt;对于由and连接的并列名词，当表示“共有”的情况下只在最后一名词尾部加's，如果表示“各自所有”，则在每个名词尾部加's
&lt;/li&gt;
&lt;li&gt;所有格除了表示所属关系外还可以表示以下逻辑语义关系，包括主谓关系，动宾关系，同位关系等
&lt;/li&gt;
&lt;li&gt;of所有格也可以表示主谓关系，动宾关系，同位关系。主要看名词是有及物动词还是不及物动词演化而来决定是主谓关系还是动宾关系，有的时候既可以做及物动词又可以做不及物动词，这就要靠语境分析啦。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;&lt;span class="section-number-3"&gt;1.4&lt;/span&gt; 第二章 限定词（一）冠词&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
限定词是修饰名词的，所以冠词的使用跟名词的可数不可数，单复数关系很大，搞清楚名词的可数与不可数，冠词也就容易掌握了。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-4-1" class="outline-4"&gt;
&lt;h4 id="sec-1-4-1"&gt;&lt;span class="section-number-4"&gt;1.4.1&lt;/span&gt; 泛指与特指&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-4-1"&gt;
&lt;p&gt;
一直以来对泛指和特指的概念其实理解的不是很清晰，总是从字面理解为特别的事物，其实不然，泛指就是表示一类事物，或某类事物的总称，特指就是表示某类事物中的具体某一个或某一些，可以这么理解，一个某一个特定事物的全集，一个是子集。对于定冠词的the的理解也存在误区，以前一直the就是特指的，准确的是这样的：
&lt;/p&gt;
&lt;pre class="example"&gt;
定冠词主要是表示特指的用法，其次才是表示泛指的用法。
&lt;/pre&gt;
&lt;p&gt;
看，其实the特指和泛指都可以表示，怎么用要看他限定的名词。看一个具体例子来说明冠词与名词单复数以及特指泛指的关系。
&lt;/p&gt;
&lt;pre class="example"&gt;
The lion is a dangerous animal.
&lt;/pre&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;主要分析the lion，但先看一下a dangerous animal，为什么要有a？因为animal是可数名词。
&lt;/li&gt;
&lt;li&gt;现在看the lion，lion是个可数名词，这里显然是泛指狮子这一类动物，如果说Lion is a dangerous animal，不合理，因为lion是可数名词，无法表达泛指的意思，前面这句是指一类呢还是一只呢？Lion是动物的子集。
&lt;/li&gt;
&lt;li&gt;如果这么说 A lion is a dangerous animal也有问题，一只是危险的，一群就不危险了吗？
&lt;/li&gt;
&lt;li&gt;如果这么说 Lions are a dangerous animal也不对，首先前后不太一致，
animal冠词都不知道该怎么用了，另外表达的意义也不清楚，复数的危险单数的就不危险了吗？
&lt;/li&gt;
&lt;li&gt;我的个人理解是这样的，the在这里特指动物全集里面狮子这一类的子集，所以这里用the ，同时用单数的is。同时对animal的理解也更深了，他的可数概念是几类动物，而不是在只的层面上。
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
从上面还可以引申出一个问题
&lt;/p&gt;
&lt;pre class="example"&gt;
所有的普通名词前必须有限定词吗？必须有冠词吗？特殊用法，固定搭配的已经看到是不用的，其他的呢？
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-4-2" class="outline-4"&gt;
&lt;h4 id="sec-1-4-2"&gt;&lt;span class="section-number-4"&gt;1.4.2&lt;/span&gt; the修饰复数时一定是表示特指&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-4-3" class="outline-4"&gt;
&lt;h4 id="sec-1-4-3"&gt;&lt;span class="section-number-4"&gt;1.4.3&lt;/span&gt; 是否所有的普通名词前必须有限定词或者说是冠词？&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-4-3"&gt;
&lt;p&gt;
我的理解是必须的。可以发现英语的逻辑思维对于名词的表达英语一定会说清这个名词的单复数，多个还是一个，某个还是一类，这种准确的表达是英语的思维，所以冠词就像单复数一样，英语中说一个名词时一定会区分他的单复数，所以冠词也一定会区分。对于一次词组的特殊用法，比如 by
train,on foot这些，不需要加冠词，很合理，因为上面我们说的是英语在表达名词概念时的逻辑思维，上面的特殊词组已经不再是表示名词概念的了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-4-4" class="outline-4"&gt;
&lt;h4 id="sec-1-4-4"&gt;&lt;span class="section-number-4"&gt;1.4.4&lt;/span&gt; 专有名词中的冠词&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-4-4"&gt;
&lt;p&gt;
前面说的是普通名词前是否必须有限定词，看下专有名词。在讲专有名词那一节的时候，可以看到，有些专有名词有定冠词the，有些没有，那么什么时候应该有什么时候应该没有呢？对于独一无二的概念，一般就没必要加了，应该一提到大家都知道就这么一个，否则还是有的，特指这个专业的名词。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Winston Churchill
就这一个人，独一无二的一个人，一说大家都知道，所以不用了
&lt;/li&gt;
&lt;li&gt;the Queen of England
queen就不是个独一无二的概念了，哪个queen呢？这个专有名词特指
england的queen
&lt;/li&gt;
&lt;li&gt;the President of the United States
同上面
&lt;/li&gt;
&lt;li&gt;Doctor Mathews
独一无二的一个人
&lt;/li&gt;
&lt;li&gt;Professor Samuels
同上
&lt;/li&gt;
&lt;li&gt;War and Peace
书名
&lt;/li&gt;
&lt;li&gt;The Merchant of Venice
哪个商人？威尼斯的商人
&lt;/li&gt;
&lt;li&gt;January,Februray&amp;#x2026;
独一无二的专有名词
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="english"></category></entry><entry><title>快速配置VPS</title><link href="http://www.iknockdoor.com/%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AEVPS.html" rel="alternate"></link><published>2018-12-07T00:00:00+08:00</published><updated>2018-12-07T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-12-07:/快速配置VPS.html</id><summary type="html">&lt;div class="preview"&gt;
&lt;p&gt;
上个月VPS被人黑了，找回来后不得已需要重置，以前配置的都丢了，这里记录下来快速配置的步骤和脚本，再出现类似情况可以快速恢复。具体的原理可以看其他相关的笔记。
&lt;/p&gt;

&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;重新安装操作系统&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
KiwiVM上stop服务器，然后install new OS
&lt;/p&gt;
&lt;pre class="example"&gt;
CentOS 7 x86_64
&lt;/pre&gt;
&lt;p&gt;
重新安装后会提示root密码和ssh端口，记录下来
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;确认服务器身份&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
从客户端ssh登陆VPS会提示服务器指纹，如：
&lt;/p&gt;
&lt;pre class="example"&gt;
ECDSA …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="preview"&gt;
&lt;p&gt;
上个月VPS被人黑了，找回来后不得已需要重置，以前配置的都丢了，这里记录下来快速配置的步骤和脚本，再出现类似情况可以快速恢复。具体的原理可以看其他相关的笔记。
&lt;/p&gt;

&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;重新安装操作系统&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
KiwiVM上stop服务器，然后install new OS
&lt;/p&gt;
&lt;pre class="example"&gt;
CentOS 7 x86_64
&lt;/pre&gt;
&lt;p&gt;
重新安装后会提示root密码和ssh端口，记录下来
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;确认服务器身份&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
从客户端ssh登陆VPS会提示服务器指纹，如：
&lt;/p&gt;
&lt;pre class="example"&gt;
ECDSA key fingerprint is SHA256:xxxxx
&lt;/pre&gt;
&lt;p&gt;
从KiviVM上basic shell查看比对指纹是否正确
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
有时上述过程给出的指纹编码方式不同，可通过在端上调整指纹编码比对
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;ssh-keygen -E MD5 -lf ~/.ssh/known_hosts
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
一致则指纹正确，后面就可以用ssh登陆操作了，不再需要KiviVM
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;安装emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
在&lt;a href="http://ftp.gnu.org/gnu/emacs/"&gt;http://ftp.gnu.org/gnu/emacs/&lt;/a&gt; 选择对应的版本，目前用的25.3
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;wget http://ftp.gnu.org/gnu/emacs/emacs-25.3.tar.gz
tar zxvf emacs-25.3.tar.gz
cd emacs-25.3
yum -y install gcc make ncurses-devel
yum -y install libXpm-devel libjpeg-turbo-devel openjpeg-devel openjpeg2-devel turbojpeg-devel giflib-devel libtiff-devel gnutls-devel libxml2-devel GConf2-devel dbus-devel wxGTK-devel gtk3-devel
./configure 
make &amp;amp;&amp;amp; make install
emacs --version
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;添加普通用户&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
使用root账户登陆服务器，执行一下命令
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#28155;&amp;#21152;xxx&amp;#29992;&amp;#25143;&lt;/span&gt;
adduser xxx
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#29983;&amp;#25104;&amp;#19968;&amp;#20010;&amp;#38543;&amp;#26426;&amp;#23494;&amp;#30721;&lt;/span&gt;
&amp;lt; /dev/urandom tr -dc A-Za-z0-9_ | head -c8
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#35774;&amp;#32622;xxx&amp;#29992;&amp;#25143;&amp;#23494;&amp;#30721;&lt;/span&gt;
passwd xxx
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
注意不用在给普通用户sudo权限了，远程登陆后再使用root用户进行高权限的操作，高权限的操作并不是很频繁。在客户端执行一下命令
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#29983;&amp;#25104;&amp;#23494;&amp;#38053;&amp;#23545;&lt;/span&gt;
ssh-keygen -t rsa -b 4096
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#20844;&amp;#38053;&amp;#28155;&amp;#21152;&amp;#21040;&amp;#26381;&amp;#21153;&amp;#31471;&lt;/span&gt;
ssh-copy-id -i .ssh/id_rsa.pub -p xxx xxx@xxx.xxx.xxx.xxx
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#22914;&amp;#26524;&amp;#26412;&amp;#26426;&amp;#23384;&amp;#22312;&amp;#22810;&amp;#20010;&amp;#23494;&amp;#38053;&amp;#23545;&amp;#65292;&amp;#21487;&amp;#20197;&amp;#29992;&amp;#19979;&amp;#38754;&amp;#30340;&amp;#21629;&amp;#20196;&amp;#25351;&amp;#23450;&amp;#30331;&amp;#38470;&amp;#26102;&amp;#20351;&amp;#29992;&amp;#30340;&amp;#23494;&amp;#38053;&lt;/span&gt;
ssh -i .ssh/xxx -p xxx xxx@xxx.xxx.xxx.xxx
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;配置sshd安全加固&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#20351;&amp;#29992;ssh&amp;#26368;&amp;#26032;&amp;#31243;&amp;#24207;&amp;#21644;&amp;#20381;&amp;#36182;&amp;#24211;&lt;/span&gt;
yum update openssh-server openssh openssh-clients -y
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#22791;&amp;#20221;sshd_config&lt;/span&gt;
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak.lz
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#37197;&amp;#32622;sshd_config&lt;/span&gt;
emacs /etc/ssh/sshd_config
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#37197;&amp;#32622;&amp;#27604;&amp;#36739;&amp;#31616;&amp;#21333;&amp;#65292;&amp;#22823;&amp;#37096;&amp;#20998;&amp;#37197;&amp;#32622;&amp;#20445;&amp;#25345;&amp;#31995;&amp;#32479;&amp;#23433;&amp;#35013;&amp;#21518;&amp;#30340;&amp;#40664;&amp;#35748;&amp;#20540;&amp;#23601;&amp;#22909;&amp;#65292;&amp;#38656;&amp;#35201;&amp;#20462;&amp;#25913;&amp;#30340;&amp;#26159;&amp;#19968;&amp;#19979;&amp;#20960;&amp;#20010;&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;Protocol 2 &amp;#24378;&amp;#21046;&amp;#20351;&amp;#29992;ssh2&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;PasswordAuthentication no &amp;#20851;&amp;#38381;&amp;#29992;&amp;#25143;&amp;#23494;&amp;#30721;&amp;#30331;&amp;#38470;&amp;#65292;&amp;#24517;&amp;#39035;&amp;#20351;&amp;#29992;&amp;#20844;&amp;#38053;&amp;#30331;&amp;#38470;&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;UsePAM no &amp;#19981;&amp;#30693;&amp;#36947;&amp;#36825;&amp;#26159;&amp;#20160;&amp;#20040;&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;PermitRootLogin     no &amp;#31105;&amp;#27490;root&amp;#29992;&amp;#25143;&amp;#36828;&amp;#31243;&amp;#30331;&amp;#38470;&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#37325;&amp;#21551;sshd&amp;#26381;&amp;#21153;&amp;#65292;&amp;#19981;&amp;#30693;&amp;#36947;&amp;#20026;&amp;#20160;&amp;#20040;&amp;#20250;&amp;#22833;&amp;#36133;&amp;#65292;&amp;#25152;&amp;#20197;&amp;#25105;&amp;#26159;&amp;#30452;&amp;#25509;reboot&amp;#30340;&lt;/span&gt;
service sshd restart
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;配置ipsec&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
修改vps_ip和证书信息，然后使用root账户执行以下一键安装配置脚本，注意不是sudo，centos 7下一定要用root账户
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;  #! /bin/bash

vps_ip="xxx.xxx.xxx.xxx"
my_cert_c="com"
my_cert_o="ognazation"
my_cert_cn="CA"

function configure_ipsec(){
 cat &amp;gt; /usr/local/etc/ipsec.conf&amp;lt;&amp;lt;EOF
config setup
    uniqueids=never 

conn iOS_cert
    keyexchange=ikev1
    fragmentation=yes
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=0.0.0.0/0
    leftcert=server.cert.pem
    right=%any
    rightauth=pubkey
    rightauth2=xauth
    rightsourceip=10.31.2.0/24
    rightcert=client.cert.pem
    auto=add

conn android_xauth_psk
    keyexchange=ikev1
    left=%defaultroute
    leftauth=psk
    leftsubnet=0.0.0.0/0
    right=%any
    rightauth=psk
    rightauth2=xauth
    rightsourceip=10.31.2.0/24
    auto=add

conn networkmanager-strongswan
    keyexchange=ikev2
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=0.0.0.0/0
    leftcert=server.cert.pem
    right=%any
    rightauth=pubkey
    rightsourceip=10.31.2.0/24
    rightcert=client.cert.pem
    auto=add

conn ios_ikev2
    keyexchange=ikev2
    ike=aes256-sha256-modp2048,3des-sha1-modp2048,aes256-sha1-modp2048!
    esp=aes256-sha256,3des-sha1,aes256-sha1!
    rekey=no
    left=%defaultroute
    leftid=${vps_ip}
    leftsendcert=always
    leftsubnet=0.0.0.0/0
    leftcert=server.cert.pem
    right=%any
    rightauth=eap-mschapv2
    rightsourceip=10.31.2.0/24
    rightsendcert=never
    eap_identity=%any
    dpdaction=clear
    fragmentation=yes
    auto=add

conn windows7
    keyexchange=ikev2
    ike=aes256-sha1-modp1024!
    rekey=no
    left=%defaultroute
    leftauth=pubkey
    leftsubnet=0.0.0.0/0
    leftcert=server.cert.pem
    right=%any
    rightauth=eap-mschapv2
    rightsourceip=10.31.2.0/24
    rightsendcert=never
    eap_identity=%any
    auto=add

EOF
}

# configure the strongswan.conf
function configure_strongswan(){
 cat &amp;gt; /usr/local/etc/strongswan.conf&amp;lt;&amp;lt;EOF
 charon {
	load_modular = yes
	duplicheck.enable = no
	compress = yes
	plugins {
		include strongswan.d/charon/*.conf
	}
	dns1 = 8.8.8.8
	dns2 = 8.8.4.4
	nbns1 = 8.8.8.8
	nbns2 = 8.8.4.4
}
include strongswan.d/*.conf
EOF
}

# configure the ipsec.secrets
function configure_secrets(){
    cat &amp;gt; /usr/local/etc/ipsec.secrets&amp;lt;&amp;lt;-EOF
: RSA server.pem
: PSK "myPSKkey"
: XAUTH "myXAUTHPass"
myUserName %any : EAP "myUserPass"
EOF
}

# iptables set
function iptables_set(){
    sysctl -w net.ipv4.ip_forward=1
    sysctl -p

    interface="venet0"
    static_ip=$vps_ip

    iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
    iptables -A FORWARD -s 10.31.0.0/24  -j ACCEPT
    iptables -A FORWARD -s 10.31.1.0/24  -j ACCEPT
    iptables -A FORWARD -s 10.31.2.0/24  -j ACCEPT
    iptables -A INPUT -i $interface -p esp -j ACCEPT
    iptables -A INPUT -i $interface -p udp --dport 500 -j ACCEPT
    iptables -A INPUT -i $interface -p tcp --dport 500 -j ACCEPT
    iptables -A INPUT -i $interface -p udp --dport 4500 -j ACCEPT
    iptables -A INPUT -i $interface -p udp --dport 1701 -j ACCEPT
    iptables -A INPUT -i $interface -p tcp --dport 1723 -j ACCEPT
    #iptables -A FORWARD -j REJECT

    iptables -t nat -A POSTROUTING -s 10.31.0.0/24 -o $interface -j SNAT --to-source $static_ip
    iptables -t nat -A POSTROUTING -s 10.31.1.0/24 -o $interface -j SNAT --to-source $static_ip
    iptables -t nat -A POSTROUTING -s 10.31.2.0/24 -o $interface -j SNAT --to-source $static_ip

    service iptables save
}



# step 1.install necessary lib
yum -y install pam-devel openssl-devel gcc make
# step 2.Download strongswan,config,make and install
wget https://download.strongswan.org/strongswan-5.5.1.tar.gz
tar -zxvf strongswan-5.5.1.tar.gz
cd strongswan-5.5.1
./configure  --enable-eap-identity --enable-eap-md5 \
--enable-eap-mschapv2 --enable-eap-tls --enable-eap-ttls --enable-eap-peap  \
--enable-eap-tnc --enable-eap-dynamic --enable-eap-radius --enable-xauth-eap  \
--enable-xauth-pam  --enable-dhcp  --enable-openssl  --enable-addrblock --enable-unity  \
--enable-certexpire --enable-radattr --enable-swanctl --enable-openssl --disable-gmp --enable-kernel-libipsec
make; make install


# step 3.create cert and cp
cd ~
mkdir ipseckey
cd ipseckey
ipsec pki --gen --outform pem &amp;gt; ca.pem
ipsec pki --self --in ca.pem --dn "C=${my_cert_c}, O=${my_cert_o}, CN=${my_cert_cn}" --ca --outform pem &amp;gt;ca.cert.pem
ipsec pki --gen --outform pem &amp;gt; server.pem
ipsec pki --pub --in server.pem | ipsec pki --issue --cacert ca.cert.pem \
    --cakey ca.pem --dn "C=${my_cert_c}, O=${my_cert_o}, CN=${vps_ip}" \
    --san="${vps_ip}" --flag serverAuth --flag ikeIntermediate \
    --outform pem &amp;gt; server.cert.pem
ipsec pki --gen --outform pem &amp;gt; client.pem
ipsec pki --pub --in client.pem | ipsec pki --issue --cacert ca.cert.pem --cakey ca.pem --dn "C=${my_cert_c}, O=${my_cert_o}, CN=LZ Client" --outform pem &amp;gt; client.cert.pem
openssl pkcs12 -export -inkey client.pem -in client.cert.pem -name "client" -certfile ca.cert.pem -caname "${my_cert_cn}"  -out client.cert.p12

cp -f ca.cert.pem /usr/local/etc/ipsec.d/cacerts/
cp -f server.cert.pem /usr/local/etc/ipsec.d/certs/
cp -f server.pem /usr/local/etc/ipsec.d/private/
cp -f client.cert.pem /usr/local/etc/ipsec.d/certs/
cp -f client.pem  /usr/local/etc/ipsec.d/private/

# step 4.configure the ipsec.conf
configure_ipsec
configure_strongswan
configure_secrets
iptables_set
ipsec restart
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
添加账户
&lt;/p&gt;
&lt;pre class="example"&gt;
emacs /usr/local/etc/ipsec.secrets
&lt;/pre&gt;
&lt;p&gt;
配置开机自起，待补充下载证书ca.cert.pem，就可以安装使用了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>VPS新装基本环境搭建</title><link href="http://www.iknockdoor.com/VPS%E6%96%B0%E8%A3%85%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html" rel="alternate"></link><published>2018-12-04T00:00:00+08:00</published><updated>2018-12-04T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-12-04:/VPS新装基本环境搭建.html</id><summary type="html">&lt;div class="preview"&gt;
&lt;p&gt;
哈哈哈，简介
&lt;/p&gt;

&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;install OS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;pre class="example"&gt;
centos-7-x86_64
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;验证服务器ssh指纹，避免中间人攻击&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;原理&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
服务器在安装openssh-server之后会生成各支持的加密算法的私钥和公钥，通常在下面的目录&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;下，pub的文件就是公钥文件了
&lt;/p&gt;
&lt;pre class="example"&gt;
/etc/ssh/
&lt;/pre&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;   $ ls -1 /etc/ssh/ssh_host …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="preview"&gt;
&lt;p&gt;
哈哈哈，简介
&lt;/p&gt;

&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;install OS&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;pre class="example"&gt;
centos-7-x86_64
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;验证服务器ssh指纹，避免中间人攻击&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;原理&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
服务器在安装openssh-server之后会生成各支持的加密算法的私钥和公钥，通常在下面的目录&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;下，pub的文件就是公钥文件了
&lt;/p&gt;
&lt;pre class="example"&gt;
/etc/ssh/
&lt;/pre&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;   $ ls -1 /etc/ssh/ssh_host*
/etc/ssh/ssh_host_dsa_key
/etc/ssh/ssh_host_dsa_key.pub
/etc/ssh/ssh_host_ecdsa_key
/etc/ssh/ssh_host_ecdsa_key.pub
/etc/ssh/ssh_host_ed25519_key
/etc/ssh/ssh_host_ed25519_key.pub
/etc/ssh/ssh_host_rsa_key
/etc/ssh/ssh_host_rsa_key.pub
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
当客户端ssh到服务器时会自动协商使用的加密算法，并拿到对应算法的服务器公钥，同时提示服务器公钥指纹，我们只需要比对指纹信息就可以确认服务器身份了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;验证服务器公钥指纹&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
第一次ssh登陆服务器时会有如下提示(第一次是指~/.ssh/known_host文件中不包含此服务器)
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;  The authenticity of host '[xxx.xxx.xxx.xxx]:xxxx ([xxx.xxx.xxx.xxx]:xxxx)' can't be established.
ECDSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxx
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[xxx.xxx.xxx.xxx]:xxxx' (ECDSA) to the list of known hosts.
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如上可以知道服务器ssh采用的公钥的加密算法及公钥签名和公钥签名的格式，然后可以用可信的方式登陆服务器查看和比对服务器的公钥签名
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;# 获取指定服务器指定加密算法的公钥
ssh-keyscan -t ECDSA -p 22 127.0.0.1
# 以指定格式查看已知服务器的公钥指纹
ssh-keygen -E sha256 -lf ~/.ssh/known_hosts
# 在服务器上可以用下面这个命令查看自己的公钥指纹
ssh-keygen -E sha256 -lf /etc/ssh/ssh_host_ecdsa_key.pub
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;安装emacs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
后面有比较多的文件编辑操作，这里还是很有必要先安装的。参考 &lt;a href="%E5%AE%89%E8%A3%85emacs.html"&gt;安装emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;添加新用户，并添加sudo权限&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;  # 添加xxx用户
  adduser xxx
  # 为xxx用户设置密码
  passwd xxx
  # 添加xxx用户到sudo用户中
  vim /etc/sudoers #或者用visudo命令
  ## Allow root to run any commands anywher  
root    ALL=(ALL)       ALL  
xxx     ALL=(ALL)       ALL  #这个是新增的用户
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;ssh安全配置&lt;sup&gt;&lt;a id="fnr.2" name="fnr.2" class="footref" href="#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
这里有篇文章挺好的: &lt;a href="https://www.ibm.com/developerworks/cn/aix/library/au-sshsecurity/index.html"&gt;SSH安全性和配置入门&lt;/a&gt; 根据实际情况采取以下配置
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;禁止root账户远程登陆
&lt;/li&gt;
&lt;li&gt;仅使用SSH Protocol 2
&lt;/li&gt;
&lt;li&gt;不支持闲置会话，并配置Idle Log Out Timeout间隔：似乎有点问题
&lt;/li&gt;
&lt;li&gt;禁用基于主机的身份验证
&lt;/li&gt;
&lt;li&gt;禁用用户的.rhosts文件
&lt;/li&gt;
&lt;li&gt;禁用空密码
&lt;/li&gt;
&lt;li&gt;保持ssh程序包和库为最新
&lt;/li&gt;
&lt;li&gt;仅支持公钥登陆
&lt;/li&gt;
&lt;li&gt;UsePAM no
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;ssh key 常见算法及安全性&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;DSA： 已被证明不安全，且从OpenSSH Server 7 之后便不再支持
&lt;/li&gt;
&lt;li&gt;RSA： RSA算法产生的私钥的安全性依赖于密钥的长度，如果密钥的长度小于3072，则不够安全，比如常见的2048 位的ssh key 是不够安全的，1024
位直接被标记为不安全
&lt;/li&gt;
&lt;li&gt;ECDSA：这个算法产生的密钥安全性依赖于当前机器产生的随机数的强度
&lt;/li&gt;
&lt;li&gt;Ed25519： 目前最为推荐的ssh key 生成算法，安全性最好！&lt;sup&gt;&lt;a id="fnr.3" name="fnr.3" class="footref" href="#fn.3"&gt;3&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
&lt;a href="http://www.jinbuguo.com/openssh/sshd.html"&gt;http://www.jinbuguo.com/openssh/sshd.html&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" name="fn.2" class="footnum" href="#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
&lt;a href="https://www.ibm.com/developerworks/cn/aix/library/au-sshsecurity/index.html"&gt;https://www.ibm.com/developerworks/cn/aix/library/au-sshsecurity/index.html&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.3" name="fn.3" class="footnum" href="#fnr.3"&gt;3&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
&lt;a href="https://www.freebuf.com/articles/system/185846.html"&gt;https://www.freebuf.com/articles/system/185846.html&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</content></entry><entry><title>从未真正理解过丘奇图灵论题</title><link href="http://www.iknockdoor.com/%E4%BB%8E%E6%9C%AA%E7%9C%9F%E6%AD%A3%E7%90%86%E8%A7%A3%E8%BF%87%E4%B8%98%E5%A5%87%E5%9B%BE%E7%81%B5%E8%AE%BA%E9%A2%98.html" rel="alternate"></link><published>2018-11-24T00:00:00+08:00</published><updated>2018-11-24T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-24:/从未真正理解过丘奇图灵论题.html</id><summary type="html">&lt;p&gt;
11月8日的时候我发了一条朋友圈，说自己一直以来都没能够真正理解过
Church-Turing论题，更别说递归定理了，然而却写了这么久的代码，这是一件多么恐怖的事情。可是到了后来几天我再想起来这条朋友圈的时候，我竟想不起来我是因为什么发出这样的感慨。所以这里记录一下，别以后可能对这个论题的理解一步一步加深的时候会会想不起来当时是在那一层迷惑了。
&lt;/p&gt;

&lt;p&gt;
给我这样感慨的应该是在读《递归论》时遇到：是否一切可计算的数论函数都是原始递归函数。答案是否定的，后来又有了一般递归函数。而丘奇-图灵论题讲的就是一切可计算函数就是一般递归函数。
&lt;/p&gt;
</summary><content type="html">&lt;p&gt;
11月8日的时候我发了一条朋友圈，说自己一直以来都没能够真正理解过
Church-Turing论题，更别说递归定理了，然而却写了这么久的代码，这是一件多么恐怖的事情。可是到了后来几天我再想起来这条朋友圈的时候，我竟想不起来我是因为什么发出这样的感慨。所以这里记录一下，别以后可能对这个论题的理解一步一步加深的时候会会想不起来当时是在那一层迷惑了。
&lt;/p&gt;

&lt;p&gt;
给我这样感慨的应该是在读《递归论》时遇到：是否一切可计算的数论函数都是原始递归函数。答案是否定的，后来又有了一般递归函数。而丘奇-图灵论题讲的就是一切可计算函数就是一般递归函数。
&lt;/p&gt;
</content></entry><entry><title>通过冠词分析名词的含义</title><link href="http://www.iknockdoor.com/%E9%80%9A%E8%BF%87%E5%86%A0%E8%AF%8D%E5%88%86%E6%9E%90%E5%90%8D%E8%AF%8D%E7%9A%84%E5%90%AB%E4%B9%89.html" rel="alternate"></link><published>2018-11-24T00:00:00+08:00</published><updated>2018-11-24T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-24:/通过冠词分析名词的含义.html</id><summary type="html">&lt;p&gt;
I have a cat,
Its name is Kit.
And by the fire,
It loves to sit.
&lt;/p&gt;

&lt;p&gt;
这是《英国语文》课本的第一课，看这首诗中的by …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
I have a cat,
Its name is Kit.
And by the fire,
It loves to sit.
&lt;/p&gt;

&lt;p&gt;
这是《英国语文》课本的第一课，看这首诗中的by the fire.看字典中对fire的解释：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;[C,U] flames that destroy things
&lt;/li&gt;
&lt;li&gt;[C] flames for heating/cooking etc
&lt;/li&gt;
&lt;li&gt;[C] heating equipment
&lt;/li&gt;
&lt;li&gt;[C] shooting
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
可以看到，通常做火的概念时是不可数的，做灶火，炉火或火炉这些意思时是可数。那在这首诗中by the fire的fire应该是什么意思呢？现在这里的fire是特指还是泛指。假设作者的意图是指文中配图的火炉，那显然作者和读者都知道是特指配图这个场景下的火炉，这种情况下配图火炉本身已经说明fire是单数火炉的意思，the在这里表示作者和读者都限定的那个火炉；好，假如没有配图呢？
fire这个概念应该是作者想象中的，无论是做火焰讲还是做火炉讲，读者都不太可能知道作者具体限定的是哪一个具体事物，而且诗中主要是在强调猫的行为，并不限定fire，因此这里我偏向于作者是泛指的。那么作为泛指的概念，如果
fire是不可数的，那么不应该有冠词the，因此，by the fire中的fire因为有
the的修饰应该是“the + 可数名词单数”表示的泛指概念，类似于“用作单”这个概念，因此fire在这里是单数火炉的意思。
&lt;/p&gt;
</content><category term="english"></category></entry><entry><title>question这个单词</title><link href="http://www.iknockdoor.com/question%E8%BF%99%E4%B8%AA%E5%8D%95%E8%AF%8D.html" rel="alternate"></link><published>2018-11-23T00:00:00+08:00</published><updated>2018-11-23T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-23:/question这个单词.html</id><summary type="html">&lt;p&gt;
词典中question有个多个含义，常用的：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;[C]a sentence or phrase that is used to ask for information or to
test someone's knowledge.
&lt;/li&gt;
&lt;li&gt;[C …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
词典中question有个多个含义，常用的：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;[C]a sentence or phrase that is used to ask for information or to
test someone's knowledge.
&lt;/li&gt;
&lt;li&gt;[C] a subject or problem that needs to be discussed or dealt with
&lt;/li&gt;
&lt;li&gt;[U]疑问，困惑
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
重点看两个短语:
&lt;/p&gt;
&lt;pre class="example"&gt;
out of the question 不允许的，不可能的，压根儿不需要讨论的
out of question 毫无疑问，很明确
&lt;/pre&gt;
&lt;p&gt;
如何理解这两个短语的区别呢？可以从限定词和是否可数来入手。out of the
question这里question表达的含义是全集，泛指，那为什么会有the呢？说明
question在这里是可数的，所以他表达的意思是讨论，商讨，所以out of the
question就是没得商量，绝对不行的意思了。而对于out of question，question在这里也是表示泛指的概念，没有限定词，说明他是不可数的含义，就是疑问，困惑的意思，所以out of question表示没有疑问，没有困惑，就是毫无疑问的意思了。如此理解两个短语的区别很清晰。
&lt;/p&gt;
</content></entry><entry><title>ADB通过WIFI无线调试Android手机</title><link href="http://www.iknockdoor.com/ADB%E9%80%9A%E8%BF%87WIFI%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95Android%E6%89%8B%E6%9C%BA.html" rel="alternate"></link><published>2018-11-22T00:00:00+08:00</published><updated>2018-11-22T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-22:/ADB通过WIFI无线调试Android手机.html</id><summary type="html">&lt;p&gt;
主要以下两个命令，可以通过adb &amp;#x2013;help查看到
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;adb tcpip PORT               restart adb server listening on TCP on PORT
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;adb tcpip 5555&lt;/span&gt;
adb connect HOST …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
主要以下两个命令，可以通过adb &amp;#x2013;help查看到
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;adb tcpip PORT               restart adb server listening on TCP on PORT
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;adb tcpip 5555&lt;/span&gt;
adb connect HOST[:PORT]      connect to a device via TCP/IP [default &lt;span class="org-variable-name"&gt;port&lt;/span&gt;=5555]
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;adb connect x.x.x.x:5555&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
就这样很简单。
&lt;/p&gt;
</content><category term="android"></category><category term="adb"></category><category term="调试"></category></entry><entry><title>Could not open Selected VM debug port (8700)</title><link href="http://www.iknockdoor.com/Could%20not%20open%20Selected%20VM%20debug%20port%20(8700).html" rel="alternate"></link><published>2018-11-22T00:00:00+08:00</published><updated>2018-11-22T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-22:/Could not open Selected VM debug port (8700).html</id><summary type="html">
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-77E0C5D5-09EC-47B1-BE3D-BD6CFCC403B3" name="ID-77E0C5D5-09EC-47B1-BE3D-BD6CFCC403B3"&gt;&lt;/a&gt;xxx&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;

&lt;p&gt;
今天Android studio毫无征兆的突然连不上手机调试了，但是通过terminal中的
adb命令却可以连上，百思不得其解。提示如下错误：
&lt;/p&gt;

&lt;p&gt;
&lt;img src="data/77/E0C5D5-09EC-47B1-BE3D-BD6CFCC403B3/sreencapture_2018-11-22_14-48-45.png" alt="sreencapture_2018-11-22_14-48-45.png" /&gt;
然而检查本地并没有端口占用或其他adb进程了。查看Android Stuido Event
log如下：
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;14:41   Could not open Selected VM …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-77E0C5D5-09EC-47B1-BE3D-BD6CFCC403B3" name="ID-77E0C5D5-09EC-47B1-BE3D-BD6CFCC403B3"&gt;&lt;/a&gt;xxx&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;

&lt;p&gt;
今天Android studio毫无征兆的突然连不上手机调试了，但是通过terminal中的
adb命令却可以连上，百思不得其解。提示如下错误：
&lt;/p&gt;

&lt;p&gt;
&lt;img src="data/77/E0C5D5-09EC-47B1-BE3D-BD6CFCC403B3/sreencapture_2018-11-22_14-48-45.png" alt="sreencapture_2018-11-22_14-48-45.png" /&gt;
然而检查本地并没有端口占用或其他adb进程了。查看Android Stuido Event
log如下：
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;14:41   Could not open Selected VM debug port (8700). Make sure you do not have another instance of DDMS or of the eclipse plugin running. If it's being used by something else, choose a new port number in the preferences.

14:41   * daemon not running; starting now at tcp:5037

14:42   * daemon started successfully

14:42   Unable to open connection to: localhost/x.x.x.x:5037, due to: java.net.ConnectException: Operation timed out

14:42   Connection attempts: 1
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
发现loacalhost地址是错误的，于是修改/etc/hosts文件，添加如下一行
&lt;/p&gt;
&lt;pre class="example"&gt;
127.0.0.1 localhost
&lt;/pre&gt;
&lt;p&gt;
问题得到解决。但是为什么localhost的地址突然变了就不得而知了，或者以前一直都不是127.0.0.1，只是是自己的IP而已，但公司突然DNS的解析变了，导致将localhost指向了其他IP？
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Error: No toolchains found in the NDK toolchains folder for ABI with prefix</title><link href="Error:%20No%20toolchains%20found%20in%20the%20NDK%20toolchains%20folder%20for%20ABI%20with%20prefix.html" rel="alternate"></link><published>2018-11-22T00:00:00+08:00</published><updated>2018-11-22T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:None,2018-11-22: No toolchains found in the NDK toolchains folder for ABI with prefix.html</id><summary type="html">&lt;p&gt;
Android Studio升级到3.2.1之后在编译代码是遇到如下错误
&lt;/p&gt;
&lt;pre class="example"&gt;
No toolchains found in the NDK toolchains folder for ABI with prefix mipsel-linux-android
&lt;/pre&gt;
&lt;p&gt;
原因是Android SDK在新版本中移除NDK对mipsel平台的支持，但是旧版的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
Android Studio升级到3.2.1之后在编译代码是遇到如下错误
&lt;/p&gt;
&lt;pre class="example"&gt;
No toolchains found in the NDK toolchains folder for ABI with prefix mipsel-linux-android
&lt;/pre&gt;
&lt;p&gt;
原因是Android SDK在新版本中移除NDK对mipsel平台的支持，但是旧版的
android gradle plugin还在支持，在3.1版本及以上也已经移除了。通过修改
gradle脚本可以解决，如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
classpath "com.android.tools.build:gradle:3.2.0"
&lt;/pre&gt;
&lt;p&gt;
如果不想修改android gradle plugin版本可以通过如下方式解决：
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;# on Mac
cd  ~/Library/Android/sdk/ndk-bundle/toolchains
ln -s aarch64-linux-android-4.9 mips64el-linux-android
ln -s arm-linux-androideabi-4.9 mipsel-linux-android
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="AndroidStudio"></category></entry><entry><title>互联网的版本管理系统</title><link href="http://www.iknockdoor.com/%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html" rel="alternate"></link><published>2018-11-21T00:00:00+08:00</published><updated>2018-11-21T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-21:/互联网的版本管理系统.html</id><summary type="html">&lt;p&gt;
记得之前在网上看到过，可能是知乎吧，忘记了，有一个系统可以记录网页的变迁历史，有点像git。包括互联网的去中心化，现在突然发现这个很重要，但是又找不到当时看的是什么了。
&lt;/p&gt;

&lt;p&gt;
想到这个主要是因为想起来之前看到的一个博客在底部有个版权声明，隐约记得是说本文已经在哪个区块链系统上登记之类的，觉得这是种非常好的版权保护手段，可惜的是这个网页也找不到了。
&lt;/p&gt;
</summary><content type="html">&lt;p&gt;
记得之前在网上看到过，可能是知乎吧，忘记了，有一个系统可以记录网页的变迁历史，有点像git。包括互联网的去中心化，现在突然发现这个很重要，但是又找不到当时看的是什么了。
&lt;/p&gt;

&lt;p&gt;
想到这个主要是因为想起来之前看到的一个博客在底部有个版权声明，隐约记得是说本文已经在哪个区块链系统上登记之类的，觉得这是种非常好的版权保护手段，可惜的是这个网页也找不到了。
&lt;/p&gt;
</content></entry><entry><title>这几天学英语学的有点小兴奋</title><link href="http://www.iknockdoor.com/%E8%BF%99%E5%87%A0%E5%A4%A9%E5%AD%A6%E8%8B%B1%E8%AF%AD%E5%AD%A6%E7%9A%84%E6%9C%89%E7%82%B9%E5%B0%8F%E5%85%B4%E5%A5%8B.html" rel="alternate"></link><published>2018-11-21T00:00:00+08:00</published><updated>2018-11-21T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-21:/这几天学英语学的有点小兴奋.html</id><summary type="html">&lt;p&gt;
今天在学习和理解定冠词和不定冠词的时候，逐渐找到了感觉，课后的练习题竟然100%全对，一时间提起来英语学习的兴趣，似乎找到了窍门，在今天后面的学习中对知识点的理解也非常顺利，就是这种顿悟的感觉，很棒。
&lt;/p&gt;

&lt;p&gt;
这个窍门就是英语思维，更准确的说应该是人的思维。对这个点的顿悟跟这段时间学习《集异璧》也有关系，语言事实上是一个形式系统，无论是中文还是英文，他们都是与现实生活，行为，故事同构的，在这种同构下 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
今天在学习和理解定冠词和不定冠词的时候，逐渐找到了感觉，课后的练习题竟然100%全对，一时间提起来英语学习的兴趣，似乎找到了窍门，在今天后面的学习中对知识点的理解也非常顺利，就是这种顿悟的感觉，很棒。
&lt;/p&gt;

&lt;p&gt;
这个窍门就是英语思维，更准确的说应该是人的思维。对这个点的顿悟跟这段时间学习《集异璧》也有关系，语言事实上是一个形式系统，无论是中文还是英文，他们都是与现实生活，行为，故事同构的，在这种同构下，他们的推理规则是不同的，所以我们只需要按照这一语言的推理规则推理就好，比如中文不区分单复数，但英语要很明确的区分，没关系，我们可以很清楚的知道这两种不同规则下表达的同一个意义。
&lt;/p&gt;
</content></entry><entry><title>逐行解码base64文件</title><link href="http://www.iknockdoor.com/%E9%80%90%E8%A1%8C%E8%A7%A3%E7%A0%81base64%E6%96%87%E4%BB%B6.html" rel="alternate"></link><published>2018-11-21T00:00:00+08:00</published><updated>2018-11-21T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-21:/逐行解码base64文件.html</id><summary type="html">&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;while IFS= read -r line; do echo "$line" | base64 --decode; done &amp;lt; file
# 下面这个解出的结果会换行
while IFS= read -r line; do echo …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;while IFS= read -r line; do echo "$line" | base64 --decode; done &amp;lt; file
# 下面这个解出的结果会换行
while IFS= read -r line; do echo "$line"  | base64 --decode &amp;gt;&amp;gt; out.txt;echo ""&amp;gt;&amp;gt;out.txt; done &amp;lt; tmp2.org
&lt;/pre&gt;
&lt;/div&gt;
</content></entry><entry><title>Dota中的猥琐流打发与生活态度</title><link href="http://www.iknockdoor.com/Dota%E4%B8%AD%E7%9A%84%E7%8C%A5%E7%90%90%E6%B5%81%E6%89%93%E5%8F%91%E4%B8%8E%E7%94%9F%E6%B4%BB%E6%80%81%E5%BA%A6.html" rel="alternate"></link><published>2018-11-09T00:00:00+08:00</published><updated>2018-11-09T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-09:/Dota中的猥琐流打发与生活态度.html</id><summary type="html">&lt;p&gt;
最近和一个朋友一起打DOTA2。这个朋友的水平在我们这几个玩的人中算是比较高的了，一起玩了几局之后你就会发现他的打法很猥琐，基本上就是一看形势不好，掉头就跑那种，一看有人头能拿就会不择手段的猥琐抢人头，可以理解为“送死你去，好处我拿”。看吧，是不是确实很猥琐，但是这位朋友却猥琐的很可爱，从来不会让人觉得讨厌，而是很自然，让人感觉还挺舒服的。这里我们暂且不讨论他是如何做到猥琐而不失可爱的，只讨论一下猥琐的生活理念。
&lt;/p&gt;

&lt;p&gt;
在游戏中，猥琐的这个打法虽然看起来有点怂，但似乎应该是正确的打法 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
最近和一个朋友一起打DOTA2。这个朋友的水平在我们这几个玩的人中算是比较高的了，一起玩了几局之后你就会发现他的打法很猥琐，基本上就是一看形势不好，掉头就跑那种，一看有人头能拿就会不择手段的猥琐抢人头，可以理解为“送死你去，好处我拿”。看吧，是不是确实很猥琐，但是这位朋友却猥琐的很可爱，从来不会让人觉得讨厌，而是很自然，让人感觉还挺舒服的。这里我们暂且不讨论他是如何做到猥琐而不失可爱的，只讨论一下猥琐的生活理念。
&lt;/p&gt;

&lt;p&gt;
在游戏中，猥琐的这个打法虽然看起来有点怂，但似乎应该是正确的打法。曾经有一段时间我也试用过这样的打法，效果还不错，居然有成长。而我之前包括现在大部分的打法呢是比较激进的，大有平头哥的气势，不服就是干，这样的结果常常是比较吃亏的，忙忙碌碌很累，而且还会一直处于劣势，甚至被人虐的很惨。或者是与人换人头的打法，总之是不理想。所以我反思这种猥琐的打法为什么会有比较好的效果，或者这么问，为什么是对的？
&lt;/p&gt;

&lt;p&gt;
其实确实是有道理的，游戏，包括生活在内，不是靠的一腔热血，而是靠的对事物，局势，自身状态的准确判断，然而猥琐流的打法其实才是真正的需要判断形势的，一看形势不好掉头就跑，一看有好处，就技巧性的抢好处，这些操作都需要通过动脑思考，反观一腔热血的打法，基本上是一种用体力的勤劳弥补脑力劳动的过程，上去就干，不计后果。所以，猥琐流打法是应该被推崇的，因为它才是认真的对待游戏和生活。
&lt;/p&gt;

&lt;p&gt;
换另外一个角度，所有一腔热血的打法都是四肢发达头脑简单么？不一定是，他有可能是通过对双方实力的评估然后认为最好条件情况下（完美配合）是有优势的，或者换人头的情况下是赚的，然后才会发起进攻，但这种方式的问题在哪里？过于主观和以自我为中心，毕竟要求完美配合，或者团队中的某一些人要作出一些牺牲，但是队友知道该怎么配合么？队友的想法是一样一致的吗？如果需要牺牲，该谁牺牲呢？这些问题并不好解答，于是常常会出现你认为完全有优势的情况下发起了进攻，结果没人响应或者每人配合，然后得不偿失，一阵血拼，结果还把自己折了，反倒头来可能还要被队友嫌弃送了人头，甚至影响了大局。这其实是一厢情愿的集中式管理思维，行不通也是有道理的。
&lt;/p&gt;

&lt;p&gt;
再看猥琐流的打法，抢人头有点群雄逐鹿的感觉，可以充分的激发队友的斗志，因为有利益啊。同时猥琐的保命，如果每个人都能不死，那结果却是很好的，对方也没利益，只不过这样会变成在比双方谁的失误少，在一个互相不熟悉的局面下（不能够完美配合，合理分配利益，相互信任）显然这种打法是有效的，单点利益的最大化最终会导致集体利益得到保障。
&lt;/p&gt;

&lt;p&gt;
猥琐流打法就完全靠运气，对方的失误或者局势了吗？从上面的分析来看，其实还有很多实力上的较量的。有两个点很重要：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;对局势判断的准确性，这非常的思考和勇气，极限的操作和判断是非常有技术含量的一件事，能力的区别就在于此，输赢很多也在于此。那么对局势判断的准确性来自于哪里呢？比如是大量的经验，熟悉游戏中的套路，细节，能够做准确全面的预测。
&lt;/li&gt;
&lt;li&gt;团队配合的默契。单点利益最大化的情况下集体利益不会太差，但绝对不会是最优，最优必然是团队默契的配合，有点像囚徒困境。这其实对人的要求也是很高的，这不只是对核心leader人员的要求，而是对每个成员的要求，因为大家需要知道每个人的性格，预测每个人在什么形式上作出什么样的判断。假如你的预测准确，那么上面说的集中式管理的问题就不存在了。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
从上面可以看出，猥琐流的打法才真正的需要一个人的才智，需要对形势准确分析和判断，也需要对人做准确的分析和判断，这都需要大量的智慧和勇气。
&lt;/p&gt;

&lt;p&gt;
从游戏说回生活和工作，会发现会有很多相似之处，不要跟愣头青似的不服就干，这样太虎了，这样不但不会有好的结果，而且也很低级，完全没有睿智可言。所以在生活和工作中，量力而行，见好就收，不硬上，不莽撞，有好处就想尽办法得到好处，别害羞，别觉得为难，甚至内疚，因为不是猥琐，这才是真正的智慧。
&lt;/p&gt;
</content></entry><entry><title>递归论读书笔记</title><link href="http://www.iknockdoor.com/%E9%80%92%E5%BD%92%E8%AE%BA%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2018-11-08T00:00:00+08:00</published><updated>2018-11-08T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-11-08:/递归论读书笔记.html</id><summary type="html">
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;笔记&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;绪论&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;1923年Skolem宣称所有初等数论中的数论函数都可以通过原始递归式定义
&lt;/li&gt;
&lt;li&gt;是否一切可计算的数论函数都是原始递归函数？Ackermann给出了否定的答案，给出了一个可计算但增长速度远远超过一切原始递归函数的函数。
&lt;/li&gt;
&lt;li&gt;Kleene给出了一般递归函数的定义
&lt;/li&gt;
&lt;li&gt;Church-Turing论点：人们一般所说的可计算函数恰巧便是一般递归函数。
&lt;pre class="example"&gt;
书中说这个点有点武断，但后来不但没有找到反例，反倒发现的事项越来越有利于这个论点。这个论点是直接给出了一个结论，但这个结论从哪里来？需要看一下一般递归函数和可计算函数的定义。
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-1" class="outline-4"&gt;
&lt;h4 id="sec-1-1-1"&gt;基本概念&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;（数论）函数：把数变成数
&lt;/li&gt;
&lt;li&gt;谓词 …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;笔记&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;绪论&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;1923年Skolem宣称所有初等数论中的数论函数都可以通过原始递归式定义
&lt;/li&gt;
&lt;li&gt;是否一切可计算的数论函数都是原始递归函数？Ackermann给出了否定的答案，给出了一个可计算但增长速度远远超过一切原始递归函数的函数。
&lt;/li&gt;
&lt;li&gt;Kleene给出了一般递归函数的定义
&lt;/li&gt;
&lt;li&gt;Church-Turing论点：人们一般所说的可计算函数恰巧便是一般递归函数。
&lt;pre class="example"&gt;
书中说这个点有点武断，但后来不但没有找到反例，反倒发现的事项越来越有利于这个论点。这个论点是直接给出了一个结论，但这个结论从哪里来？需要看一下一般递归函数和可计算函数的定义。
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-1" class="outline-4"&gt;
&lt;h4 id="sec-1-1-1"&gt;基本概念&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;（数论）函数：把数变成数
&lt;/li&gt;
&lt;li&gt;谓词：把数变成真假
&lt;/li&gt;
&lt;li&gt;联结词：把真假变成真假
&lt;/li&gt;
&lt;li&gt;摹状词：把谓词变成函数
&lt;/li&gt;
&lt;li&gt;量词：把谓词变成谓词
&lt;/li&gt;
&lt;li&gt;算子：把函数变成函数
&lt;/li&gt;
&lt;li&gt;约束词：算子、摹状词、量词
&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class="example"&gt;
到约束词，算子，数空位的时候就比较难理解了，主要是没有基础，所以先学习后面的内容，再反过来看这块。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="递归论"></category></entry><entry><title>使用emacs,org-mode和pelican搭建博客系统解决方案</title><link href="http://www.iknockdoor.com/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html" rel="alternate"></link><published>2018-10-12T00:00:00+08:00</published><updated>2018-10-12T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-10-12:/博客系统解决方案.html</id><summary type="html">
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;设计&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
  主要静态网页生成器放在VPS，这样可以在远端只负责写内容和推送到服务器了，不必关心生成的过程，如此一来即使是用手机也可以很方便的写文章。
&lt;/p&gt;

&lt;p&gt;
画个图描述一下。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;搭建&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;环境&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;配置&lt;/td&gt;
&lt;td class="right"&gt;版本&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;CentOS&lt;/td&gt;
&lt;td class="right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;Python&lt;/td&gt;
&lt;td class="right"&gt;3.6.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;emacs&lt;/td&gt;
&lt;td class="right"&gt;25.3.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;org-mode …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;设计&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
  主要静态网页生成器放在VPS，这样可以在远端只负责写内容和推送到服务器了，不必关心生成的过程，如此一来即使是用手机也可以很方便的写文章。
&lt;/p&gt;

&lt;p&gt;
画个图描述一下。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;搭建&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;环境&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;配置&lt;/td&gt;
&lt;td class="right"&gt;版本&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;CentOS&lt;/td&gt;
&lt;td class="right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;Python&lt;/td&gt;
&lt;td class="right"&gt;3.6.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;emacs&lt;/td&gt;
&lt;td class="right"&gt;25.3.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;org-mode&lt;/td&gt;
&lt;td class="right"&gt;8.2.10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;pelican&lt;/td&gt;
&lt;td class="right"&gt;3.7.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;org-reader&lt;/td&gt;
&lt;td class="right"&gt;1.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;git&lt;/td&gt;
&lt;td class="right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;安装&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-2-1" class="outline-4"&gt;
&lt;h4 id="sec-2-2-1"&gt;CentOS下安装Python3&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-1"&gt;
&lt;p&gt;
CentOS下自带了Python2.7的版本，但我们需要用3.+的版本。并没有测试过
2.7的版本是否会有问题。
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;    # 安装GCC,make用于编译python
yum install gcc make
# 从python官网下载python指定版本
wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz
# 解压
tar -zxvf Python-3.6.3.tar.xz
cd Python-3.6.3
# 编译
./configure
make -j4
sudo make install
# 如果不能直接在shell中运行python3，设置一下环境变量
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2-2" class="outline-4"&gt;
&lt;h4 id="sec-2-2-2"&gt;安装Pelican&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-2"&gt;
&lt;p&gt;
参考&lt;a href="http://docs.getpelican.com/en/stable/install.html"&gt;Pelican官方文档&lt;/a&gt;
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;    pip3 install pelican
# pip3命令有可能不能用，需要升级一下pip的版本，推荐用下面的命令安装pelican
python3 -m pip install pelican
# 如果需要升级pip3 用下面的命令
python3 -m pip upgrade pip
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2-3" class="outline-4"&gt;
&lt;h4 id="sec-2-2-3"&gt;安装emacs&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-3"&gt;
&lt;p&gt;
参考&lt;a href="%E5%AE%89%E8%A3%85emacs.html"&gt;安装emacs&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2-4" class="outline-4"&gt;
&lt;h4 id="sec-2-2-4"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 安装Git&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 配置&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 测试环境的搭建&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Pelican的原理与应用&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
category只能有一个，如果有多个会算成一个，比如
&lt;/p&gt;
&lt;pre class="example"&gt;
#+CATEGORY: c1,c2
&lt;/pre&gt;
&lt;p&gt;
会生成一个叫"c1,c2 "的分类，而不是c1和c2两个分类
&lt;/p&gt;

&lt;p&gt;
TAGS的写法就是
&lt;/p&gt;
&lt;pre class="example"&gt;
#+PROPERTY: TAGS vps,pelican,org-blog,blog
&lt;/pre&gt;
&lt;p&gt;
这样子了，但生成似乎有bug，并没有生成出tag，这个后面再看吧。
&lt;/p&gt;

&lt;p&gt;
时间戳的规范
git获取文件的时间戳
&lt;/p&gt;
&lt;pre class="example"&gt;
git log --pretty=format:%cd -n 1 --date=iso
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 界面布局与样式美化&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-4-1" class="outline-3"&gt;
&lt;h3 id="sec-4-1"&gt;&lt;span class="done DONE"&gt;DONE&lt;/span&gt; 布局&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 支持了侧边栏
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 侧边栏包含分类，TAG，归档
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 各分类显示数量
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 支持分页
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 整体布局基本满意
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 可以添加一个顶部的导航，进行大的分类，包含blog，项目，关于我的页面
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 支持手机
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-2" class="outline-3"&gt;
&lt;h3 id="sec-4-2"&gt;&lt;span class="done DONE"&gt;DONE&lt;/span&gt; 字体&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 字体
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 配色
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-3" class="outline-3"&gt;
&lt;h3 id="sec-4-3"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 样式美化&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 主要是文章标题下面的文章信息
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-4" class="outline-3"&gt;
&lt;h3 id="sec-4-4"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; SEO优化&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 用org-mode写文章&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
主要把文章常用的内容给个范例就好
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; outline
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 字体
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 引用
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 脚注
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 参考
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 代码块
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 公式
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 内部文件导航
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="vps"></category><category term="pelican"></category><category term="org-blog"></category><category term="blog"></category></entry><entry><title>跟换为Pelican生成笔记系统</title><link href="http://www.iknockdoor.com/%E8%B7%9F%E6%8D%A2%E4%B8%BAPelican%E7%94%9F%E6%88%90%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F.html" rel="alternate"></link><published>2018-10-10T00:00:00+08:00</published><updated>2018-10-10T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-10-10:/跟换为Pelican生成笔记系统.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. Todolist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 想法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 设计&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-3-1"&gt;3.1. 文章时间&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-3-1-1"&gt;3.1.1. 时间戳格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-1-2"&gt;3.1.2. 创建时间 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. Todolist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 想法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 设计&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-3-1"&gt;3.1. 文章时间&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-3-1-1"&gt;3.1.1. 时间戳格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-1-2"&gt;3.1.2. 创建时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-1-3"&gt;3.1.3. 最后修改时间&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-2"&gt;3.2. URL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-3"&gt;3.3. theme&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-3-3-1"&gt;3.3.1. martin-pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-3-2"&gt;3.3.2. nice-blog&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-3-3"&gt;3.3.3. elegant&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-3-4"&gt;3.3.4. dev-random2&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-3-5"&gt;3.3.5. foundation-default-colours&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 做法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Todolist&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;对org-mode的支持
&lt;ul class="org-ul"&gt;
&lt;li&gt;pelican有org-mode的插件，但是有两个，一个依赖emacs一个不依赖，而且简单看了下依赖emacs的插件的代码，非常的简单，那么他实现的原理是什么呢？
&lt;/li&gt;
&lt;li&gt;必须有title metadata
&lt;/li&gt;
&lt;li&gt;必须有date metadata
&lt;/li&gt;
&lt;li&gt;文章的唯一标示是什么？推测应该是slug，也就是URL，包括评论应该都会根据URL走，Pelican如果不提供slug，默认会使用title作为slug。考虑自己的笔记的维护基本上是通过文件名，而且git和文件系统也是根据文件名，所以这里唯一标示想通过文件名走，然后默认title根据文件名生成，slug也就是跟文件名一致了，如果需要修改title直接改metadata
就好，不去修改文件名。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对图片的支持，和原来的一致，设置静态目录即可，STATIC&lt;sub&gt;PATHS&lt;/sub&gt; = ['images']
&lt;/li&gt;
&lt;li&gt;默认语言的设置，这里跟多语言有关，还是要设置一下的
&lt;/li&gt;
&lt;li&gt;自动summary简介，Pelican默认支持，挺好用的
&lt;/li&gt;
&lt;li&gt;内部文件link，这个点需要试一下
&lt;/li&gt;
&lt;li&gt;code block，这个点需要试一下
&lt;/li&gt;
&lt;li&gt;footer引用的处理
&lt;/li&gt;
&lt;li&gt;theme的订制
&lt;ul class="org-ul"&gt;
&lt;li&gt;base的选择
&lt;/li&gt;
&lt;li&gt;内容的选择
&lt;ul class="org-ul"&gt;
&lt;li&gt;侧边栏
&lt;/li&gt;
&lt;li&gt;文章信息显示
&lt;ul class="org-ul"&gt;
&lt;li&gt;create time
&lt;/li&gt;
&lt;li&gt;last modify time
&lt;/li&gt;
&lt;li&gt;summary
&lt;/li&gt;
&lt;li&gt;author
&lt;/li&gt;
&lt;li&gt;&amp;#x2026;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字体
&lt;/li&gt;
&lt;li&gt;外链
&lt;/li&gt;
&lt;li&gt;社交信息
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSS输出
&lt;/li&gt;
&lt;li&gt;评论
&lt;/li&gt;
&lt;li&gt;git自动日期获取
&lt;ul class="org-ul"&gt;
&lt;li&gt;优先metadata
&lt;/li&gt;
&lt;li&gt;如果没有提供metadata，根据git的创建时间和上次修改时间生成
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;给个模版自动生成基本的metadata信息
&lt;/li&gt;
&lt;li&gt;去掉org-mode自动生成table-content
果然应该还是利用的org mode自己的export功能，声明了OPTION之后就关掉了toc.

&lt;p&gt;
toc其实也挺有用的，但还是决定前期先关掉，如果不关掉themes需要支持
toc的样式，现在这几个theme似乎并没有支持，如果支持的话放在哪里呢？头部？侧边栏？对手机的支持怎么样？所以基于上述问题，先全部关闭就好。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 想法&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;不自动部署，通过git的push自动部署
&lt;/li&gt;
&lt;li&gt;草稿的处理，使用不同的分支
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 设计&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; 文章时间&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-3-1-1" class="outline-4"&gt;
&lt;h4 id="sec-3-1-1"&gt;&lt;span class="section-number-4"&gt;3.1.1&lt;/span&gt; 时间戳格式&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-1-2" class="outline-4"&gt;
&lt;h4 id="sec-3-1-2"&gt;&lt;span class="section-number-4"&gt;3.1.2&lt;/span&gt; 创建时间&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-1-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;新建文件时用模版自动添加，读取当前时间
&lt;/li&gt;
&lt;li&gt;老的文章如果没有，就通过添加到git仓库中的时间获取
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-1-3" class="outline-4"&gt;
&lt;h4 id="sec-3-1-3"&gt;&lt;span class="section-number-4"&gt;3.1.3&lt;/span&gt; 最后修改时间&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-1-3"&gt;
&lt;p&gt;
最后修改时间使用git的最后修改时间就好，与创建时间不同，创建时间是从起点算，所以用创建文件时的当前时间比较好，而最后修改时间是终点时间，所以以提交到git仓库为终点较好
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; URL&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
URL要带上日期。然后用默认的就好，默认情况下是slug，slug默认是title，即使是中文也没关系
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3" class="outline-3"&gt;
&lt;h3 id="sec-3-3"&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; theme&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
浏览器了pelican官方的开源themes，选出以下几个比较喜欢的，每个都有亮点，还是想把这些亮点组合起来
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3-1" class="outline-4"&gt;
&lt;h4 id="sec-3-3-1"&gt;&lt;span class="section-number-4"&gt;3.3.1&lt;/span&gt; martin-pelican&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-3-1"&gt;
&lt;p&gt;
目前这个是最喜欢的主题了，有一种读杂志的感觉，读起来很舒服。
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;优点&lt;/td&gt;
&lt;td class="left"&gt;缺点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;正文字体很漂亮，读起来很舒服&lt;/td&gt;
&lt;td class="left"&gt;导航较弱，没有把分类信息，tag信息，归档信息暴露出来&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;配色和设计风格像杂志期刊，很舒服&lt;/td&gt;
&lt;td class="left"&gt;title的字体有点夸张&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;图片处理有点问题&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3-2" class="outline-4"&gt;
&lt;h4 id="sec-3-3-2"&gt;&lt;a id="ID-89E7FBB3-9EBC-48F7-A687-A76FF02E47A4" name="ID-89E7FBB3-9EBC-48F7-A687-A76FF02E47A4"&gt;&lt;/a&gt;&lt;span class="section-number-4"&gt;3.3.2&lt;/span&gt; nice-blog&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-3-2"&gt;
&lt;p&gt;
如下图，文章列表的字体的配色，大小，readmore搭配的很好，突出标题，弱化作者，时间，分类以及摘要信息。
&lt;/p&gt;

&lt;p&gt;
其他方面不是很突出，整体感觉不是很精致。
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/89/E7FBB3-9EBC-48F7-A687-A76FF02E47A4/sreencapture_2018-10-10_21-31-03.png" alt="sreencapture_2018-10-10_21-31-03.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3-3" class="outline-4"&gt;
&lt;h4 id="sec-3-3-3"&gt;&lt;a id="ID-128366DF-783C-44E0-9638-091273515822" name="ID-128366DF-783C-44E0-9638-091273515822"&gt;&lt;/a&gt;&lt;span class="section-number-4"&gt;3.3.3&lt;/span&gt; elegant&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-3-3"&gt;
&lt;p&gt;
整体很清爽，文章列表很清晰，不拖泥带水，但感觉有点过于清爽了，文章的一些信息有点少了，比如文章作者，创建修改时间，摘要信息，导航也相对较弱。文章详情页排版较弱，而且也缺乏导航信息。
&lt;/p&gt;

&lt;p&gt;
又发现一个很大的优点，对图片的支持很好，可以自动缩放图片。是这几个主题里面唯一一个对图片处理好的主题。
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/12/8366DF-783C-44E0-9638-091273515822/sreencapture_2018-10-10_21-36-16.png" alt="sreencapture_2018-10-10_21-36-16.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/12/8366DF-783C-44E0-9638-091273515822/sreencapture_2018-10-10_21-38-57.png" alt="sreencapture_2018-10-10_21-38-57.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3-4" class="outline-4"&gt;
&lt;h4 id="sec-3-3-4"&gt;&lt;a id="ID-05DC512A-708E-4811-9BB9-FFE5F54C2B7E" name="ID-05DC512A-708E-4811-9BB9-FFE5F54C2B7E"&gt;&lt;/a&gt;&lt;span class="section-number-4"&gt;3.3.4&lt;/span&gt; dev-random2&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-3-4"&gt;
&lt;p&gt;
导航比较强，是比较中意的结构。配色也算不错。文章列表的排版看起来有些臃肿，可能是因为摘要内容太多？
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/05/DC512A-708E-4811-9BB9-FFE5F54C2B7E/sreencapture_2018-10-10_21-43-21.png" alt="sreencapture_2018-10-10_21-43-21.png" /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3-5" class="outline-4"&gt;
&lt;h4 id="sec-3-3-5"&gt;&lt;span class="section-number-4"&gt;3.3.5&lt;/span&gt; foundation-default-colours&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-3-5"&gt;
&lt;p&gt;
经过对比，最终决定选用这个作为基础theme。有这么几个优点：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;整体结构和导航比较接近期望的
&lt;/li&gt;
&lt;li&gt;对手机浏览支持的很好
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
还有需要做调整的地方，可以主体可以参考设计，细节要处理一下字体，行间距，字间距
test
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 做法&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;老的文章没有metadata信息，其实自动化添加页不难，结果python还没用好，最后一狠心一个一个手动添加了，着实有点繁复。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>递归</title><link href="http://www.iknockdoor.com/%E9%80%92%E5%BD%92.html" rel="alternate"></link><published>2018-10-09T00:00:00+08:00</published><updated>2018-10-09T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-10-09:/递归.html</id><summary type="html">&lt;p&gt;
一直以来对递归的理解和使用都感觉很陌生，完全没有掌握递归的套路。总觉得不是归纳法那么简单。后来看了一些资料，发现递归确实是一个非常有意义的话题。
&lt;/p&gt;

&lt;p&gt;
关于递归有两个定理很重要，一个就是递归定理，另外一个是不动点定理。还有一个是自生产程序。
&lt;/p&gt;

&lt;p&gt;
通过这两天查资料和对递归的思考，发现递归的使用最重要的是找到子问题，即能够把问题用递归定义出来。然而如何找到子问题，如何将一个问题定义成递归呢？我的思考是去找问题关联的状态，看问题的变化是依赖的谁，比如是依赖一个更小的问题，那么就可以循着这个思路思考下去，找出递归定义，理解了递归的原理 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
一直以来对递归的理解和使用都感觉很陌生，完全没有掌握递归的套路。总觉得不是归纳法那么简单。后来看了一些资料，发现递归确实是一个非常有意义的话题。
&lt;/p&gt;

&lt;p&gt;
关于递归有两个定理很重要，一个就是递归定理，另外一个是不动点定理。还有一个是自生产程序。
&lt;/p&gt;

&lt;p&gt;
通过这两天查资料和对递归的思考，发现递归的使用最重要的是找到子问题，即能够把问题用递归定义出来。然而如何找到子问题，如何将一个问题定义成递归呢？我的思考是去找问题关联的状态，看问题的变化是依赖的谁，比如是依赖一个更小的问题，那么就可以循着这个思路思考下去，找出递归定义，理解了递归的原理，再掌握了将问题递归的思路，就可以比较顺利的使用递归了。
&lt;/p&gt;

&lt;p&gt;
不动点函数，Y组合式与递归以及母函数是什么关系？即使有了不动点函数，这个函数是否就能求的出来？莫非母函数就是做这个的？
&lt;/p&gt;
</content></entry><entry><title>听《最爱的人伤我最深》这首歌</title><link href="http://www.iknockdoor.com/%E5%90%AC%E3%80%8A%E6%9C%80%E7%88%B1%E7%9A%84%E4%BA%BA%E4%BC%A4%E6%88%91%E6%9C%80%E6%B7%B1%E3%80%8B%E8%BF%99%E9%A6%96%E6%AD%8C.html" rel="alternate"></link><published>2018-09-25T00:00:00+08:00</published><updated>2018-09-25T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-09-25:/听《最爱的人伤我最深》这首歌.html</id><summary type="html">&lt;p&gt;
前两天在的士上从收音机中听到张惠妹的歌，阿妹的声线太过迷人了，今天把张惠妹《最爱的人伤我最深》找到听一下，从前奏开始就直接进入了歌曲。
&lt;/p&gt;

&lt;p&gt;
以为是张惠妹的自己的歌，没想到第一句竟是张雨生开始的，久违的声音，两个无与伦比的声音交替着，并没有去听唱的什么内容，只是单纯的听这两个声音，心中感慨万千，世间竟有如此美妙的嗓音，唱的又这么好的两个人，然而这两个人竟又是师徒，听着这首歌，脑中浮现出师徒二人站在音乐之巅，陶醉在音乐之中，享受音乐 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
前两天在的士上从收音机中听到张惠妹的歌，阿妹的声线太过迷人了，今天把张惠妹《最爱的人伤我最深》找到听一下，从前奏开始就直接进入了歌曲。
&lt;/p&gt;

&lt;p&gt;
以为是张惠妹的自己的歌，没想到第一句竟是张雨生开始的，久违的声音，两个无与伦比的声音交替着，并没有去听唱的什么内容，只是单纯的听这两个声音，心中感慨万千，世间竟有如此美妙的嗓音，唱的又这么好的两个人，然而这两个人竟又是师徒，听着这首歌，脑中浮现出师徒二人站在音乐之巅，陶醉在音乐之中，享受音乐，欣赏着对方，能与自己同类的人做着共同爱好的事，是一件多么美妙的事情，这不是决战紫禁城之巅的巅峰对决与惺惺相惜，而是强强联手，两位相得益彰的大师共同演绎了一首无与伦比的作品。
&lt;/p&gt;

&lt;p&gt;
世间能有如此的声音已经是件如此美妙的事情，这样的两个人能够相遇，成为师徒，师徒二人共唱一曲，不禁让人感叹大千世界的神奇。回想起张惠妹为张雨生专门出过一张专辑，在演唱会上张惠妹怀念张雨生几度落泪，师徒二人感情之深，这种感情我无法理解，是师徒情深，还是知音难求，还是心痛天嫉英才，总之很深，让人充满敬意。
&lt;/p&gt;

&lt;p&gt;
第一次知道张雨生还是因为我的父亲，我的父亲特别喜欢张雨生，小的时候在电视上看到张雨生，我父亲说那是他弟弟，我一直以为是真的，每次在电视上看到张雨生都会很兴奋的说我爸爸弟弟出来了。长大后听张雨生的歌，是那样的清澈，那样的励志，相比当代的靡靡之音，简直就是一股清流。欣赏之于让人肃然起敬，，看他本人如同一个学生一样，毫无偶像包袱，就是这样的一个人带给我们如此美妙的事物，想到这里又不禁想起因为哥哥才接触到的黄家驹，多少人才让人崇拜让人尊敬，感谢他们给我们带来的乐趣，带来的另一个世界，也许我们永远无法达到他们的境界，但我们会尽量在自己擅长的领域学习他们精神。感谢他们带来的作品，也感谢他们教会我们如何做人。
&lt;/p&gt;
</content></entry><entry><title>RecyclerView版本问题</title><link href="http://www.iknockdoor.com/RecyclerView%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98.html" rel="alternate"></link><published>2018-09-10T00:00:00+08:00</published><updated>2018-09-10T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-09-10:/RecyclerView版本问题.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. RecyclerView 23.0.1版本和26.0的版本在measure过程有比较大的差异&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 由上面这个问题导致对measure和layout的理解&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. getHeight和getMeasuredHeight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2-2"&gt;2.2. MeasureSpec的AT&lt;sub&gt;MOST&lt;/sub&gt;,EXACTLY,UNSPECTFIED与MATCH …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. RecyclerView 23.0.1版本和26.0的版本在measure过程有比较大的差异&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 由上面这个问题导致对measure和layout的理解&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. getHeight和getMeasuredHeight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2-2"&gt;2.2. MeasureSpec的AT&lt;sub&gt;MOST&lt;/sub&gt;,EXACTLY,UNSPECTFIED与MATCH&lt;sub&gt;PARENT，WRAP&lt;/sub&gt;&lt;sub&gt;CONTENT的关系&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2-3"&gt;2.3. scroll&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. NestedScrollView的fling问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; RecyclerView 23.0.1版本和26.0的版本在measure过程有比较大的差异&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
如果父亲给定UNSPECIFIED的高度，23的版本会measure高度为0，而26的版本会measure出自己所需要的高度。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 由上面这个问题导致对measure和layout的理解&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; getHeight和getMeasuredHeight&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
已经知道getMeasuredHeight给的是mMeasuredHeight的值，即测量值。而
getHeight给的是bottom-top的值。之前会认为控件会根据mMeasuredHeight
的值来计算bottom和top的值，时尚上，这并不是强相关的，甚至bottom和
top的值跟控件的实际宽高和布局都不要有关系。
&lt;/p&gt;

&lt;p&gt;
一句话，layout和measure是完全不相关的过程，两个过程互不依赖各自的结果。举个例子。LinearLayout,父布局给定EXACTLY布局，子view计算后大于给定布局，最终LinearLayout的measure height为父布局指定的值。在
layout阶段，LinearLayout会将子view依次向下排，下一个view的top即上一个view的bottom，并不考虑LinearLayout的测量高度，以及父布局给的
t,l,r,b的范围。最终LinearLayout的内容会超出屏幕，而LinearLayout的
mMeasureHeight为父布局给的EXACTLY高度，且b-t = 这个高度。这是为什么呢？又有什么好处呢？t,l,r,b的值只会影响draw的范围，所以说，
LinearLayout的实际内容可以超出屏幕，但他以这样的方式计算t,l,r,b，以告诉系统只需要绘制这部分内容，这样可以不绘制看不见的部分，从而提升绘制效率。所以上面这个例子可以更清楚的看到实际布局，绘制内容，实际高度，绘制高度以及测量高度的关系。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; MeasureSpec的AT&lt;sub&gt;MOST&lt;/sub&gt;,EXACTLY,UNSPECTFIED与MATCH&lt;sub&gt;PARENT，WRAP&lt;/sub&gt;&lt;sub&gt;CONTENT的关系&lt;/sub&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
涉及到measure过程的核心部分，通常这个对应关系是由layout自己来决定的，但Android将这一部分抽象来出来，大部分控件会默认采用这种对应关系，少数控件会根据自己的情况做调整，比如scrollview，即使父亲给来EXACTLY，他也会在可滚动的方向上给子控件UNSPECTFIED。
&lt;/p&gt;

&lt;p&gt;
这个核心部分体现在ViewGroup的两个函数上：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;getChildMeasureSpec()
根据父布局建议的spec，自身的布局特点以及子view的layout属性决定子
view的spec
&lt;/li&gt;
&lt;li&gt;resolveSizeAndState()
根据父布局建议的spec，自身的布局特点，以及测量完子布局之后的实际高度最终决定自己的实际测量高度。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;&lt;a id="ID-81D03D44-3022-406C-A169-F0A506A6EC2D" name="ID-81D03D44-3022-406C-A169-F0A506A6EC2D"&gt;&lt;/a&gt;&lt;span class="section-number-3"&gt;2.3&lt;/span&gt; scroll&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
&lt;img src="data/81/D03D44-3022-406C-A169-F0A506A6EC2D/sreencapture_2018-09-10_14-52-50.png" alt="sreencapture_2018-09-10_14-52-50.png" /&gt;                                                            :ATTACH:
&lt;/p&gt;
&lt;p&gt;
scroll是从view级原生支持的，主要是mScrollY和mScrollX两个变量，
range,extend和offest三个函数会结合控件的宽高计算，计算方式可以参考代码。
&lt;/p&gt;

&lt;p&gt;
对于上面LinearLayout的例子，超出可视范围的画布上是有东西的，或者这么说，控件知道在超出可是范围内的区域应该画什么内容，在布局阶段就已经决定了每个区域画什么内容，画不画是另外一个问题，测量大小，实际绘制大小，以及实际绘制区域都和不改变没个区域应该画什么内容的这个事实，他只跟实际内容范围有关系。所以当发生滚动时，无需考虑测量大小，绘制大小，都可以正常的绘制出对应区域的内容，即滚动是有效的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; NestedScrollView的fling问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
NestedScrollView的scroll是没有问题的，但是fling效果是无法从内到外的连续起来的。有两种实现思路：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;由外部控件全权控制fling，外部控件自有scroller，然后调用子控件的
scrollby函数。这样有个缺点，像RecyclerView这样的控件，内部有自己的fling逻辑，如果全权由外部承包了，效果可能会有问题
&lt;/li&gt;
&lt;li&gt;在外部fling到无法fling的时候获取当前剩余的速度，调用子控件的fling。这样是可行，外部自定义控件是知道自己能够滚动的距离以及剩余滚动速度的。但是另外一种场景，需要先fling内部控件，内部不可滚动时通知外部，这就有点尴尬了，不好拿当前的滚动速度。
&lt;/li&gt;
&lt;li&gt;另外实测过程种发现，即使是NestedScrollView事件传递也是要考虑的，事件先给外面再给内部和先给内部再给外部是不一样的，会有一些问题，所以要结合事件传递与Nested机制一起考虑。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Android消息传递机制</title><link href="http://www.iknockdoor.com/Android%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6.html" rel="alternate"></link><published>2018-07-03T00:00:00+08:00</published><updated>2018-07-03T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-07-03:/Android消息传递机制.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 传递规则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 分发机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 多点触摸处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 历史事件获取&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 传递规则&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;如果消费touch down消息后续move等消息才会传给他
&lt;/li&gt;
&lt;li&gt;消息默认都是优先传给子view处理，如果子view不处理，父view再处理
&lt;/li&gt;
&lt;li&gt;如果一个group自己包括子view都不处理down消息，move消息也就不会传给这个group了 …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 传递规则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 分发机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 多点触摸处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 历史事件获取&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 传递规则&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;如果消费touch down消息后续move等消息才会传给他
&lt;/li&gt;
&lt;li&gt;消息默认都是优先传给子view处理，如果子view不处理，父view再处理
&lt;/li&gt;
&lt;li&gt;如果一个group自己包括子view都不处理down消息，move消息也就不会传给这个group了
&lt;/li&gt;
&lt;/ol&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="right" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="right"&gt;&amp;#xa0;&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Group拦截&lt;/th&gt;
&lt;th scope="col" class="left"&gt;Group消费&lt;/th&gt;
&lt;th scope="col" class="left"&gt;View消费&lt;/th&gt;
&lt;th scope="col" class="left"&gt;&amp;#xa0;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="right"&gt;1&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;group interrupt,onTouch,View onTouch都能收到actionDown的消息，但都不会收到move的消息，因为rule1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;2&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;view onTouch不会再收到down的消息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;3&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;group onTouch可以收到move消息，其他和上面一样&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;4&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;view可以收到down的消息了，其他和上面一样&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;5&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;group interrupt和view onTouch可以收到down和move消息，group onTouch不再能收到消息，这就得出了rule2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;6&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;group interrupt和onTouch可以收到down的消息，然后其他都没了&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;7&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;同3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="right"&gt;8&lt;/td&gt;
&lt;td class="left"&gt;no&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;yes&lt;/td&gt;
&lt;td class="left"&gt;同5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 分发机制&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 多点触摸处理&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;需要处理多点的时候千万记得要用getActionMask
&lt;/li&gt;
&lt;li&gt;index在事件流中是会变的,pointer在事件流中是不会变的，那如何理解事件流呢？从down事件开始，到up或cancel为一个事件流
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 历史事件获取&lt;/h2&gt;
&lt;/div&gt;
</content></entry><entry><title>长安十二时辰读书笔记</title><link href="http://www.iknockdoor.com/%E9%95%BF%E5%AE%89%E5%8D%81%E4%BA%8C%E6%97%B6%E8%BE%B0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2018-07-03T00:00:00+08:00</published><updated>2018-07-03T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-07-03:/长安十二时辰读书笔记.html</id><summary type="html">&lt;p&gt;
昨天在飞机上最后读完了长安十二时辰，书中直接描写的几个人物都个性十分鲜明，比如李泌，张小敬，元载，姚汝能等。整个故事情节非常紧凑，故事始终一波三折，一波未平一波又起，所以整个故事读下来全程基本无尿点，高潮一波接一波。
&lt;/p&gt;

&lt;p&gt;
就几个个性鲜明且迥异的主角来说，一号男主角自然是张小敬了，整个故事中张小敬是一个有情有义，亦正亦邪的末路英雄的形象，喜欢单打独斗，喜欢个人英雄主义，感觉像是马伯庸所以喜欢或崇拜或向往的一个形象，然而我并不是很喜欢这个形象。说是够狠 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
昨天在飞机上最后读完了长安十二时辰，书中直接描写的几个人物都个性十分鲜明，比如李泌，张小敬，元载，姚汝能等。整个故事情节非常紧凑，故事始终一波三折，一波未平一波又起，所以整个故事读下来全程基本无尿点，高潮一波接一波。
&lt;/p&gt;

&lt;p&gt;
就几个个性鲜明且迥异的主角来说，一号男主角自然是张小敬了，整个故事中张小敬是一个有情有义，亦正亦邪的末路英雄的形象，喜欢单打独斗，喜欢个人英雄主义，感觉像是马伯庸所以喜欢或崇拜或向往的一个形象，然而我并不是很喜欢这个形象。说是够狠，总感觉对待敌人或者小人的时候却没那么果断干脆，如果能早一点结果了封大伦，也并不会有那么多的麻烦。如果真的要选择千千万万的百姓，不在乎牺牲一两个人，那也完全可以早点结果了龙波也完全可以制止整个悲剧。同时，在张小敬办案过程遇到的种种困难其实跟张小敬自己的做事方法也有关系，过于的考虑通过自己的努力解决问题，而没有考虑利用资源，至少要考虑如何保护自己和维持自己的自由和权利，如果自由和权利都没有了，还怎么办案和解决问题？看似自我牺牲，天下为公，事实上却有反作用，不爱自己怎么爱别人？这就是个人英雄主义的弊端了。也可以说张小敬的悲剧事实上还是跟人物性格有关，假如他有元载八面来风的能力，事情可以处理的更好，结果也会更令人满意，所以说，悲剧还是自己造成的，悲剧之人必有悲剧之处。
&lt;/p&gt;

&lt;p&gt;
再看李泌这个人。这个人的塑造感觉有点前后矛盾，前面看像是一个明大理，爱百姓的官，兼具了正义和智慧的清官，然而故事写到最后却成了一个只为太子的福利着想的人，这就矛盾了啊，而且故事中间还常常出现想要为天下百姓牺牲自我的场景，然而最终竟然是为了太子？如果真的始终是为了太子着想，那就很难解释李泌一开始的一些行为，所以这个人物还是很矛盾的。
&lt;/p&gt;

&lt;p&gt;
整个故事下来，我最欣赏的一个角色其实是元载，目标明确，手段高明，把握机会，不必看他的出发点，假如他能人每个人都满意，何尝不是一个好人呢？只是欣赏，并不能说是喜欢。
&lt;/p&gt;

&lt;p&gt;
总体来讲还是挺喜欢马伯庸的作品的，最一开始是偶然看到了马伯庸写的《学霸必须死:万历年间的一场数学大乱》，感觉非常有意思，于是乎就开始关注马伯庸了。很喜欢看一些逻辑思维很严密的故事，比如《盗墓笔记》，这是第一本让我很入迷的一本小说，虽然作者埋了各种伏笔，让人觉得很不可思议，为什么会发生这样的事情？但最终却又能讲得通，而且很合理，让人发出“原来是这样啊”这样的感叹。尤其是在思考过程中可以完全的带入到故事情节中。
&lt;/p&gt;

&lt;p&gt;
好吧，上面随便写的，想到哪里写到哪里，打算再买一本马伯庸的作品，没事儿翻看一下。
&lt;/p&gt;
</content></entry><entry><title>微信发展简史</title><link href="http://www.iknockdoor.com/%E5%BE%AE%E4%BF%A1%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2.html" rel="alternate"></link><published>2018-06-11T00:00:00+08:00</published><updated>2018-06-11T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-06-11:/微信发展简史.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 微信发展简史：微信成功的必然和偶然&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. 一、微信发展简史&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. 二、微信的前身&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-2-1"&gt;1.2.1. 1、微信的起源 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 微信发展简史：微信成功的必然和偶然&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. 一、微信发展简史&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. 二、微信的前身&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-2-1"&gt;1.2.1. 1、微信的起源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2-2"&gt;1.2.2. 2、微信与QQ邮箱的亲缘关系&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2-3"&gt;1.2.3. 3、阅读空间的移动化&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3"&gt;1.3. 三、微信成功的必然和偶然&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-3-1"&gt;1.3.1. 1、第一个偶然：没有负担&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-2"&gt;1.3.2. 2、第二个偶然：种子用户群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-3"&gt;1.3.3. 3、第三个偶然：极致追求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-4"&gt;1.3.4. 4、第四个偶然：远离总部&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3-5"&gt;1.3.5. 5、第五个偶然：胆大心细&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 总结：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
转自36kr &lt;a href="https://36kr.com/p/5135834.html"&gt;《微信发展简史：微信成功的必然和偶然》&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
这篇文章讲到了几个产品的思路和点，自认为还是挺深入的，所以转过来，反复研读思考，理解产品哲学。
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 微信发展简史：微信成功的必然和偶然&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
陆树燊 • 2018-05-27 • 大公司
&lt;/p&gt;

&lt;p&gt;
致敬微信7年
&lt;/p&gt;

&lt;p&gt;
编者按：本文首发于微信公众号“行者慎思”（ID: shensing）。作者陆树燊，创业者，微信创始团队成员。
&lt;/p&gt;

&lt;p&gt;
微信是互联网圈永远的热点，这不，这两天突然微信又成了话题中心，原因有两个：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;微信更新版本，做了一个『浮窗』，有了这个小小的浮窗，用户可以在聊天和阅读文章之间随时切换；
&lt;/li&gt;
&lt;li&gt;有人把7年前微信刚上线时App store各种一星差评的截图发出来，整个科技圈投资圈都在惊叹：原来成功者当年也是很落魄的（这个鸡汤真好喝）。 
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
作为微信创始期的亲历者，我想到了一些不同的东西。本文源自2016年9月我在一次产品经理社群分享中的演讲稿。当时已有不少听众把我的一些观点做了笔记发在公共媒体，但现场讲稿却在我的电脑里存放了一年半。 
&lt;/p&gt;

&lt;p&gt;
现在把讲稿整理出来，做了一些修改，希望能帮大家还原出一个不一样的微信发展史。也算是对7岁的微信宝宝一个致敬吧。 
&lt;/p&gt;

&lt;p&gt;
本文分为三部分：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;微信发展简史；
&lt;/li&gt;
&lt;li&gt;微信的前身；
&lt;/li&gt;
&lt;li&gt;微信成功的必然和偶然。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;a id="ID-562DC829-B9A0-4D7F-97DA-4DABAACECBD6" name="ID-562DC829-B9A0-4D7F-97DA-4DABAACECBD6"&gt;&lt;/a&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; 一、微信发展简史&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
微信是如何一步步变成今天这个样子的？
&lt;/p&gt;

&lt;p&gt;
微信在上线433天的时候，用户数达到1亿，上线2年的时间，用户数达到3亿，这是非常可怕的增长速度——相对于在此之前的所有PC互联网产品，这是绝无仅有的。 
&lt;/p&gt;

&lt;p&gt;
这样一个几乎可以称为『抛物线增长』的产品，它的发展路径中每一步，其实都是非常有关联的。 
&lt;/p&gt;

&lt;p&gt;
下图右边是微信在全盛时期14年2月之前的活跃用户增长情况。左边，是从微信1.0到6.1的每个版本的发展次序。
&lt;/p&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/56/2DC829-B9A0-4D7F-97DA-4DABAACECBD6/53sdiym0fimykxsd!1200_2018-06-11_11-38-55.jpeg" alt="53sdiym0fimykxsd!1200_2018-06-11_11-38-55.jpeg" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
从1.0版本到2.0版本，这两个版本微信的发展平淡无奇。1.0版本微信主打能发文字、发图片，可以免费替换移动运营商的短信和彩信。早期微信的用户活跃度并不高，或者说，微信跟米聊、Kiki等同类，甚至是跟手机QQ相比，并没有什么竞争力的。 
&lt;/p&gt;

&lt;p&gt;
大家看到的那么多一星差评就是这个时候了。
&lt;/p&gt;

&lt;p&gt;
微信迎来第一波用户增长是在2.0版本发布了语音功能。这个功能是来自香港的
Talkbox率先在智能手机中做出来的，但很快国内外的米聊、微信、Whatsapp等都迅速跟进。
&lt;/p&gt;

&lt;p&gt;
从2.1、2.2、2.5、3.0到3.5版本，这几个版本微信在干什么事情？其实就是一件事：让用户可以不断地去添加好友。 
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;熟人关系链
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
首先，通过匹配通讯录的功能，微信把用户手机里的这些好友都加进来了；通过QQ离线消息，微信把QQ的用户也拉进来了。 
&lt;/p&gt;

&lt;p&gt;
当然，从最开始，微信就是允许用QQ账号直接登录微信的，但此前这个特性并没有让微信在和米聊等竞争时有优势，但一旦微信的功能更全面之后，这种账号优势是巨大的。 
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;陌生人关系链
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
2.5版本微信做了附近的人，3.0版本做了漂流瓶、摇一摇。
&lt;/p&gt;

&lt;p&gt;
这些都是陌生人社交功能，微信给用户提供了一种通道，与附近的、远方的有缘分的陌生人成为朋友。
&lt;/p&gt;

&lt;p&gt;
那时候很多人评价微信为『约炮神器』。
&lt;/p&gt;

&lt;p&gt;
实际上真正著名的（已洗白的）神器：陌陌，也差不多在那个时候发布的（2011年6月）。
&lt;/p&gt;

&lt;p&gt;
那时候所有人都在讲这种LBS社交（基于地理位置的社交服务），其实是有原因的，因为智能手机的出现和普及，让随时随地确认用户的地理位置成为可能（这在PC时代是不可能的），那么人们就能够自然地从远程网络的社交中识别出那些离用户最近的、能够产生更多线下互动的其他用户。 
&lt;/p&gt;

&lt;p&gt;
当时还有一个非常火热的概念，叫『弹性社交』，用户到达一个位置之后，就能和那个位置附近的人聊天，美国有一个全明星创业者团队就做了一个这样的产品叫『Color』，但很快就死了。 
&lt;/p&gt;

&lt;p&gt;
微信又是因为什么去做这样的功能呢？
&lt;/p&gt;

&lt;p&gt;
对一个聊天工具来讲，每个用户在上面能做的事情不就是跟别人聊天吗？但是，当一个用户第一次安装微信，并把手机通讯录里的、QQ里那些已经使用微信的好友们导入进来，一开始他也就只有几个好友，这样是聊不起来的。 
&lt;/p&gt;

&lt;p&gt;
微信只有不断的给他们之间制造一些可以聊的话题、一些可以聊的场景，才能让他们留下来。所以这时候，附近的人、漂流瓶、摇一摇等场景就应运而生了。 
&lt;/p&gt;

&lt;p&gt;
微信在附近的人和漂流瓶、摇一摇在几个功能发布之后，用户数就实现了暴涨，并把国内同行都远远地抛下了，奠定了在国内移动端通信App中的巨无霸地位。当然上面的数据图中，因为后期数据增长太庞大，所以基本把初期的前几波『暴涨』给掩盖掉了。 
&lt;/p&gt;

&lt;p&gt;
为什么微信在做了陌生人社交之后，用户量就飙升了呢？
&lt;/p&gt;

&lt;p&gt;
最简单的一个解释，就是对于一个全民通用的App来讲，它首先要做的，就是打动人性中最根本的需求。这方面，相信大家都听说了微信摇一摇设计中的故事了，这里就不细说了。 
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;线下关系链
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
接下来的3.5版本，微信做了分享二维码名片。有了二维码名片，我们每个人在线下见面时就很容易借此互相添加好友了，从熟人，再到陌生人，线下的关系链一一导入到微信中来。
&lt;/p&gt;

&lt;p&gt;
我们现在在社交场合中遇到新朋友，都不再是交换名片，而是说『加个微信吧』，然后打开扫一扫，说『我扫你吧』，等着他打开二维码。 
&lt;/p&gt;

&lt;p&gt;
大概在发布这个版本之后，微信用户达到一亿。
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;盘活关系链
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
在4.0版本微信做了『朋友圈』。
&lt;/p&gt;

&lt;p&gt;
在此之前，微信只是一个即时通信工具，而在一个聊天工具里面去做社区，在全球互联网历史上其实是没有过的。 
&lt;/p&gt;

&lt;p&gt;
对于微信，这是一个非常大胆的尝试。
&lt;/p&gt;

&lt;p&gt;
但为什么要做呢？
&lt;/p&gt;

&lt;p&gt;
前面说到，此时用户数已经有一个亿了，一个亿的用户在这个App里面，他们每个人各自添加了不少好友，比如失散多年的小学同学，比如前阵子在某个大会认识的某大咖……但是加了好友之后，我们却从来没有机会聊天。慢慢地，我们都不知道对方是谁了（或者是否还活着？）。如果无缘无故强行去聊（撩），就成了『尬聊』了，大概对方就要把你拉黑了。 
&lt;/p&gt;

&lt;p&gt;
这种事也不是微信中才有的，我们还记得，在微信出来之前，我们每年过年、过节的时候通常都会收到各种朋友的祝福短信的轰炸。为什么很多明知群发短信别人不看、不回，甚至会很烦，但还是要发？因为有太多的『沉寂人脉』，好不容易找个理由和他们打个招呼，告诉他们『我还活着』，当然不能错过。 
&lt;/p&gt;

&lt;p&gt;
所以这时候需要朋友圈的出现，给这个问题画了一个非常完美的句号。
&lt;/p&gt;

&lt;p&gt;
有了朋友圈，我们每天在朋友圈发布的内容，微信好友是能看到的。也许他跟你没有太多共同话题，但他至少可以点赞表示下存在感，表示一下他对你的关心。于是通讯录里的陌路人升级为『点赞之交』。 
&lt;/p&gt;

&lt;p&gt;
而且你还会从某些朋友的朋友圈动态的点赞列表中发现：『咦，你们两个人是怎么认识的？』于是就有了一种『三角好友关系』。 
&lt;/p&gt;

&lt;p&gt;
这也促进了人与人之间的更多连接，因为有了更多共同的话题、共同的信任。原本人与人之间在网络中都只是单线联系，但是有了微信的朋友圈，人与人之间就变成一个三角更密集的网络关系了。每个人都成了这张密集网络中的一个重要结点。这样的网络，当然也就更稳固了。 
&lt;/p&gt;

&lt;p&gt;
还有一种更普遍的情况，有了朋友圈，我们很容易及时更新朋友们的信息，找到共同的话题。比如我们常见的朋友圈评论：『你去泰国了呀，好不好玩？』、『生日快乐！』、『新婚快乐！』、『加班到现在么？』、『这么晚还不睡』…… 
&lt;/p&gt;

&lt;p&gt;
在我看来，如果说微信在做了陌生人社交功能之后奠定了它的移动互联网巨头地位，那么，朋友圈就是一个让这种巨头地位永久固化的功能。微信生态圈在此时已经完成了，后续的其他功能虽然也有其重要意义，但都是建立在微信已经站稳脚根的前提下，也就是所谓『第一张移动互联网船票』。 
&lt;/p&gt;

&lt;p&gt;
这里需要提一下公众号。我前面整理的版本更新列表中没有『公众号』，因为当时公众号并没有专门发布的客户端版本，而是 原来预埋在App中，大概在微信
4.0版本发布前后开始上线功能。 
&lt;/p&gt;

&lt;p&gt;
微信单聊群聊、微信公众号、微信朋友圈，至此形成了一个信息传播的闭环，至今我们依然每天活在这个闭环的信息轰炸中。 
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;商业化
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
5.0版本，微信发布了游戏中心、微信支付和表情商店。
&lt;/p&gt;

&lt;p&gt;
我之前的文章《支付大战简史：微信支付 vs. 支付宝》中写道：
&lt;/p&gt;

&lt;p&gt;
13年初，在腾讯公司年会上，公司总裁刘炽平跟全公司员工说“2013年是微信的商业化元年”。这一年，微信发布了微信支付、游戏中心、表情中心，三个志在让微信实现商业化的产品。 
&lt;/p&gt;

&lt;p&gt;
1）游戏是腾讯公司历来的营收重点，借助微信的大用户量、高活跃度和强关系链，这种优势也从PC端迁移到手机端； 
&lt;/p&gt;

&lt;p&gt;
2）表情包在QQ时代就一直是中国网民的爱好，但并没有给腾讯带来很好的营收，但是微信的日本同行Line成功地通过表情赚得盆满钵满。于是微信就努力地试试，结果并不好，中国果真和日本不一样，网民不愿意为表情付费的习惯到了移动端依然没有改变——所以微信表情现在基本转为免费策略； 
&lt;/p&gt;

&lt;p&gt;
3）而支付就是腾讯成功逆袭的一条战线了。
&lt;/p&gt;

&lt;p&gt;
今天我们可以看到，游戏中心确实是很成功的，给微信赚了很多钱，也帮腾讯股价实现了大规模上涨。而微信支付也在2016年实现了盈利。 
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;插件化
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
从前面的五个步骤看起来，似乎微信从一开始就设计好了路径：导入熟人关系链、陌生人关系链、线下关系链，盘活关系链、商业化。 
&lt;/p&gt;

&lt;p&gt;
其实不然，微信并不是从一开始就是有一个完整的战略思考，每个功能都是到了具体阶段，根据需要去补充的。 
&lt;/p&gt;

&lt;p&gt;
在这些功能迭代的过程中，微信最成功的地方是，它的整个界面、整个业务结构、功能结构几乎没怎么改变。这是因为微信在增加功能时，充分考虑了这些功能的向后兼容性，只做当时最最最需要的那一项功能，而不是贪多求全。 
&lt;/p&gt;

&lt;p&gt;
微信的功能越来越多，却一点而不臃肿，要知道，这是QQ长期以来被诟病的地方。
&lt;/p&gt;

&lt;p&gt;
这主要靠插件化。
&lt;/p&gt;

&lt;p&gt;
微信早期的功能都是用一个个插件的形式存在的。插件你是可以随时安装可以卸载。再后来有了公众号，微信一下子就有了更多神奇的功能，公众号这种相当于一个可装卸的功能插件。 
&lt;/p&gt;

&lt;p&gt;
（作者注：而现在又有了小程序平台。这更是一种全功能的插件平台。关于插件，我在文章《微信团队的实验室文化》中有详细的讲述。关于小程序的插件化价值，我的文章《小程序的前世今生（一）：为谁而生？》中也有说明。） 
&lt;/p&gt;

&lt;p&gt;
微信所走的路，是没有人走过的路。
&lt;/p&gt;

&lt;p&gt;
在微信的成长过程中，参照了很多同行（甚至非同行），但最终走出来的是微信自己的路，并且迎来了国内外的各种抄袭、复制、模仿者——手机QQ、微博、来往、易信、支付宝、Facebook…… 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; 二、微信的前身&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
可能你看到『前身』这两个字觉得很奇怪，微信为什么有前身？
&lt;/p&gt;

&lt;p&gt;
这就是QQ邮箱。微信所有的成功都建立在QQ邮箱的成功和失败上面。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2-1" class="outline-4"&gt;
&lt;h4 id="sec-1-2-1"&gt;&lt;span class="section-number-4"&gt;1.2.1&lt;/span&gt; 1、微信的起源&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-1"&gt;
&lt;p&gt;
故事要从2010年美国出现的一个叫做Kik的App开始讲起。
&lt;/p&gt;

&lt;p&gt;
那个时候Kik用了一个月的时间获取了一百万的用户，震惊了全世界。这种用户增长速度是前无古人的，算是移动互联网的第一个奇迹。
&lt;/p&gt;

&lt;p&gt;
很巧的是，QQ邮箱团队当时正在着手开发一个叫做『手中邮』的App，也就是QQ邮箱的移动版。
&lt;/p&gt;

&lt;p&gt;
邮箱团队的负责人张小龙看到Kik这个奇迹之后，马上发了邮件给马化腾（Pony），说这个东西我们应该做。Pony同意了，把它命名为『微信』。
&lt;/p&gt;

&lt;p&gt;
于是邮箱团队就着手从『手中邮』转向微信的开发，这就有了微信的第一版。
&lt;/p&gt;

&lt;p&gt;
微信这个名字很有意思，微型的邮件，这个名字非常确切。由于微信是邮箱团队开发的，为了快速实现，尽可能复用了原先QQ邮箱的整个后台协议和框架，所以背后的通信协议采用的也是邮箱的HTTP协议，而不是通常即时通讯工具所用的UDP协议。所以我们每次发送一条微信消息，就真的是在通过微信后台向朋友发送一封微型的邮件。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2-2" class="outline-4"&gt;
&lt;h4 id="sec-1-2-2"&gt;&lt;a id="ID-5F93F466-1CA4-4230-A52D-C2A2C1A96D7C" name="ID-5F93F466-1CA4-4230-A52D-C2A2C1A96D7C"&gt;&lt;/a&gt;&lt;span class="section-number-4"&gt;1.2.2&lt;/span&gt; 2、微信与QQ邮箱的亲缘关系&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-2"&gt;
&lt;p&gt;
2005年，腾讯公司收购了张小龙创办的Foxmail团队，让他负责QQ邮箱的开发，一直做到2010年。于是这整个五年的过程中，这个团队一直在锻造QQ邮箱。这款产品后来在腾讯内部叫做七星级邮箱。
&lt;/p&gt;

&lt;p&gt;
当然，在这个过程中，邮箱做了非常多的尝试。
&lt;/p&gt;

&lt;p&gt;
我给大家复习一下，看看QQ邮箱长什么样子（2016年9月截图）：
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/5F/93F466-1CA4-4230-A52D-C2A2C1A96D7C/6h4fvhsn0ju9lkl9!1200_2018-06-11_11-43-18.jpeg" alt="6h4fvhsn0ju9lkl9!1200_2018-06-11_11-43-18.jpeg" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在这个邮箱界面，我们仔细看看这些功能，再看看手中的微信，是不是有些异曲同工之处？
&lt;/p&gt;

&lt;p&gt;
1）漂流瓶。微信里的漂流瓶就源自于QQ邮箱的漂流瓶。
&lt;/p&gt;

&lt;p&gt;
2）QQ邮件订阅以及已经下线的『阅读空间』。它们是微信公众号的前身。是不是有点像？通过邮件去订阅一些博客，或者朋友的QQ空间，就像我们现在通过公众号去关注一些媒体、大咖、朋友的公众号一样。
&lt;/p&gt;

&lt;p&gt;
3）QQ邮箱以前还有一个功能，可以在邮箱里面和QQ好友聊天。大概在2009、2010年的时候，那时还没有Web微信，我还经常在公共电脑用这个功能和朋友聊QQ。这个功能后来搬进微信里，就成了『QQ离线消息助手』。
&lt;/p&gt;

&lt;p&gt;
4）微信曾经尝试过一个『短消息』的功能，可以给QQ邮箱上的好友发一些比较简短的一些信件，就已经跟今天的微信单聊消息很像了。
&lt;/p&gt;

&lt;p&gt;
5）曾经还有过一个功能叫作『广播』。广播比新浪微博稍晚上线，比腾讯微博都要早一年多时间上线，当时就是希望把Twitter给复制到中国来。这个功能后来因为腾讯集中全公司的火力去做腾讯微博，所以就放弃了。但是，正是因为『广播』，邮箱团队才第一次开始尝试去做社区功能。在此以前这就是只是一个邮箱，大家对邮箱的理解就是一个工具软件，在这里发邮件收邮件，然后就走了。也正因为有了广播的尝试和失败，才有了后来在朋友圈的一战成功。
&lt;/p&gt;

&lt;p&gt;
6）邮箱有记事本功能，微信有语音记事本插件。
&lt;/p&gt;

&lt;p&gt;
7）邮箱有『文件中转站』，相当于邮件的附件收藏夹，于是微信有了『收藏』。
&lt;/p&gt;

&lt;p&gt;
8）甚至，邮箱有标签功能，给邮件打标签，微信在提供好友分组功能时，提供的也是标签功能。
&lt;/p&gt;

&lt;p&gt;
……
&lt;/p&gt;

&lt;p&gt;
如果你仔细去发现，还能发现其他的相似之处。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2-3" class="outline-4"&gt;
&lt;h4 id="sec-1-2-3"&gt;&lt;a id="ID-6A0DF667-7D52-49FB-8998-B3BCAECDD936" name="ID-6A0DF667-7D52-49FB-8998-B3BCAECDD936"&gt;&lt;/a&gt;&lt;span class="section-number-4"&gt;1.2.3&lt;/span&gt; 3、阅读空间的移动化&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-3"&gt;
&lt;p&gt;
我们知道2005年上线的QQ空间从诞生之日起就被贴上了低龄化的标签，在空间上面，有各种音乐、装扮、背景、荧光体字体之类，很适合初中生高中生的喜好。而当时最早QQ空间的前端技术是比较差的，所以体验很不好。
&lt;/p&gt;

&lt;p&gt;
但随着用户的长大，原来的中学生，也慢慢上了大学，毕业成了白领，他们就不太喜欢这些花哨的东西了。怎么解决这个问题？
&lt;/p&gt;

&lt;p&gt;
于是邮箱团队就做了阅读空间（功能如其名），方便用户只看好友的文章内容，不看各种花哨的摆设，这样体验就好很多了。
&lt;/p&gt;

&lt;p&gt;
后来，又引入了订阅网络上的博客的功能，类似于Google Reader。
&lt;/p&gt;

&lt;p&gt;
我是在这个2011年加入QQ邮箱团队的，最开始就在『阅读空间』项目组工作，而当时微信也还只是邮箱团队中另一个项目组的产品。
&lt;/p&gt;

&lt;p&gt;
当时我们团队就在想，阅读空间能不能也独立做成个移动App？说干就干，这个项目唯一的产品经理兼客户端开发就是我了（早期的时候我还兼任了设计师，随意P图）。当时内部定了个名字叫『微杂志』。
&lt;/p&gt;

&lt;p&gt;
Demo做好了，小龙一看，不如把它合并到微信里面吧，于是就有了微信里面的两个插件，一个叫腾讯新闻 ，一个叫微博阅读。结合公司当时的资源，把腾讯新闻、腾讯微博上的内容抓取过来集合在插件里面，推送给用户。腾讯微博后来停止服务了，所以微博阅读插件就不在了，而腾讯新闻插件现在还在，它给腾讯新闻带来了非常好的流量，也因此造就了腾讯新闻客户端在移动互联网的辉煌。
&lt;/p&gt;

&lt;p&gt;
有了这两个插件，团队就在想，是不是可以把这种能力开放给所有的媒体？于是就有了公众平台。
&lt;/p&gt;

&lt;p&gt;
最早的时候，公众平台不是这个名字，叫媒体平台。我们都知道微信公众平台的网址是『mp.weixin.qq.com』，这个mp，就来自于媒体平台『media platform』的缩写。
&lt;/p&gt;

&lt;p&gt;
后来，又把它改成『官号平台』，取『官方账号』之意。当时还想，不只是媒体可以来发内容，还可以邀请一些明星过来，最早的时候引入了像陈坤、王力宏、杨幂等等这些明星来发内容，早期的用户可能还有印象。杨幂的粉丝关注了她的公众号，她就会给你发一段语音（当然是自动回复的语音），粉丝都很开心。
&lt;/p&gt;

&lt;p&gt;
再后来，觉得这事格局还不够大，就改叫『公众平台』了——口号是『再小的个体，也有自己的品牌』。于是公众平台就诞生了。
&lt;/p&gt;

&lt;p&gt;
这里还有一个小插曲，我们经常看公众号文章，官方限制了在文章内容嵌入链接，所以如果要加链接的话，就要加在最底下的『阅读原文』里面。
&lt;/p&gt;

&lt;p&gt;
有没有人想过，为什么叫阅读原文，这不是很奇怪么？不是应该叫『相关链接』之类么？
&lt;/p&gt;

&lt;p&gt;
这是因为当时公众平台的内容模板用的是我之前做『微杂志』的模板，而微杂志的模板又是因为做的是博客内容抓取，为了方便用户回溯去看原网址，也为了尊重原作者，给他带回去流量，所以在底下加了一个『阅读原文』的链接入口。
&lt;/p&gt;

&lt;p&gt;
这个坑就一直留到了现在。
&lt;/p&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/6A/0DF667-7D52-49FB-8998-B3BCAECDD936/t1bxzk2qc3sijbh2!1200_2018-06-11_11-44-05.jpeg" alt="t1bxzk2qc3sijbh2!1200_2018-06-11_11-44-05.jpeg" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
『微杂志』早期的截图
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; 三、微信成功的必然和偶然&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
微信的成功是有必然性的，也是有偶然性的。
&lt;/p&gt;

&lt;p&gt;
必然在哪？
&lt;/p&gt;

&lt;p&gt;
因为它有腾讯这个爹，所以有了实现用QQ账号直接登录、和QQ打通实现离线消息、邮箱本身的推广资源、腾讯母体的平台运维支持、腾讯一向在即时通讯的经验等，这些都是行业内其他竞争对手无法想像的支持。
&lt;/p&gt;

&lt;p&gt;
但这些必然性就导致了经常有人说：如果把张小龙换成雷军，换成其他任何人，他都能做出微信来。
&lt;/p&gt;

&lt;p&gt;
这样说是非常不负责任的。因为微信的成功，它有两个方面：
&lt;/p&gt;

&lt;p&gt;
首先，微信在移动端做成了一个类似QQ在PC端那样的全民级通讯平台，这是微信成功的第一方面。这方面的成功，靠腾讯的亲儿子这一点，应该是非常大的概率能做到。
&lt;/p&gt;

&lt;p&gt;
但另一方面，微信已经远远不只是一个聊天工具，它的地位实际上已经远远超过了QQ，成了一个操作系统，全民每天平均有超过40%的时间花在微信里面。另外，微信覆盖了QQ无法覆盖的高端人群，也实现一定程度的国际化，这也是QQ一直无法做到的。而且微信借助它的创新，还引来了大量的国外同行的模仿，这是原来更无法想像的事。
&lt;/p&gt;

&lt;p&gt;
一个产品做到这种程度的成功，就远不是有资源支持就能够做到的了。
&lt;/p&gt;

&lt;p&gt;
下面我来讲讲微信成功的5个偶然。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3-1" class="outline-4"&gt;
&lt;h4 id="sec-1-3-1"&gt;&lt;span class="section-number-4"&gt;1.3.1&lt;/span&gt; 1、第一个偶然：没有负担&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-1"&gt;
&lt;p&gt;
很多人都听说过了，当年微信初创时，腾讯公司里面有几个团队都在做微信类的产品。但是，邮箱团队原本是没有做移动App的经验的，而另外两个团队，他们都属于无线事业群，原本就是专门负责移动应用的开发的。
&lt;/p&gt;

&lt;p&gt;
理论上，他们应该比邮箱团队更有经验。但是，他们受制于另外一个因素：腾讯无线当时有很大比例的收入来自于移动运营商，市面上有微信类的产品出来后，中国移动就和腾讯无线打招呼，不允许上线这样的产品，别人可以做，但你们是大公司，你们就是不可以。
&lt;/p&gt;

&lt;p&gt;
所以当时无线团队是束手束脚的，非常谨慎地在做。后来我们看到，像QQ通信录里面加了一个Q信，就是这样的妥协下的产品。所以当然他们是成功不了的。
&lt;/p&gt;

&lt;p&gt;
而邮箱团队由于不归无线团队节制，加上小龙的魄力、Pony的支持，大胆开发，大胆上线，才有了今天的微信。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3-2" class="outline-4"&gt;
&lt;h4 id="sec-1-3-2"&gt;&lt;span class="section-number-4"&gt;1.3.2&lt;/span&gt; 2、第二个偶然：种子用户群&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-2"&gt;
&lt;p&gt;
早期做微信的时候，其实并不像大家想像的那样，受到QQ的支持。最早微信的用户，基本来自于团队自己的产品，QQ邮箱。
&lt;/p&gt;

&lt;p&gt;
有两个来源：一个是QQ邮箱的首页，放了一个微信的广告。另一个就是在微信里面引导用户发邮件去邀请好友加入微信。
&lt;/p&gt;

&lt;p&gt;
也正是因为最早的来源是QQ邮箱，而不是QQ，所以早期的微信用户比较『高端』——QQ邮箱由于长期的体验优化，已经获得了很多上班族的喜爱。这些从早期喜欢花哨的QQ秀、QQ表情的年轻人，已经走出校园，走进职场，喜欢上了简洁、专业的风格。
&lt;/p&gt;

&lt;p&gt;
物以类聚，人以群分。早期的用户属性很大程度也影响了社交产品的调性和口碑。于是微信是最早是在他们中传开的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3-3" class="outline-4"&gt;
&lt;h4 id="sec-1-3-3"&gt;&lt;span class="section-number-4"&gt;1.3.3&lt;/span&gt; 3、第三个偶然：极致追求&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-3"&gt;
&lt;p&gt;
如果没有张小龙和整个微信团队追求极简体验的格调和品味，那么微信从文案、图标到功能定义，都有可能落到像QQ一样，整天去宠着用户、惯着用户，又要想办法让用户花钱：今天改改皮肤，明天加个QQ秀，后天搞这个钻、那个钻、会员、积分、星星、月亮……然后再一会改来一会改去，折腾用户。
&lt;/p&gt;

&lt;p&gt;
这些个性化的、商业化的功能不是不好，对小朋友就应该这样，但这样做的话，就不可能吸引得了高端用户，微信也不可能有今天的成功。
&lt;/p&gt;

&lt;p&gt;
我们都知道以前白领们，特别是外企员工，是不屑于用QQ的，他们聊天只用MSN。今天，MSN已经销声匿迹了，米聊这样强劲的对手也黯然退下战场，手机QQ下了狠心把微信抄了一遍，这些都和微信的『极简』追求有莫大关系。微信的这种『性冷淡』偏好，甚至影响了今天整个中国的移动互联网。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3-4" class="outline-4"&gt;
&lt;h4 id="sec-1-3-4"&gt;&lt;span class="section-number-4"&gt;1.3.4&lt;/span&gt; 4、第四个偶然：远离总部&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-4"&gt;
&lt;p&gt;
微信的成功还得益于，微信团队是在广州办公，而不是深圳办公。
&lt;/p&gt;

&lt;p&gt;
这是一件很有趣的事。腾讯的总部在深圳，2012年的时候，腾讯公司大概有2万人，其中至少1万8千人是在深圳的，其他的城市分公司人都很少。其中广州邮箱团队只有不到200人。
&lt;/p&gt;

&lt;p&gt;
但就是因为人数这么少，反而保持了它的精干，保持了它的纯粹，而不会被总部的各种人才流动打扰，实现了优秀人才的集中和长期合作。
&lt;/p&gt;

&lt;p&gt;
我在互联网行业经历过的这些年，微信团队的优秀是超过我见过的任何其他团队的，特别是它的优秀人才的密集程度。
&lt;/p&gt;

&lt;p&gt;
这个在我之前的文章《腾讯与阿里的区别，就像书生和土匪的区别》中提到：
&lt;/p&gt;

&lt;p&gt;
微信团队（曾经的广州研发部）在腾讯公司中又极为特别，也许是因为远离总部，在微信做大之前，这里的升职、调动的机会并不多，人员流动很少，团队里隐藏了非常多低调却才华横溢的同事。在部门群里聊天，总是时不时就有人赋出诗一首，或者来一句让人拍案叫绝的金句，但在现实生活中，他们却常常少言寡语，默默在做好事情，专心的雕琢产品、代码、设计稿。
&lt;/p&gt;

&lt;p&gt;
如果说微信团队的招聘有什么标准的话，以我的观察和总结，那么，这些人除了优秀之外，身上还必须有一个亮点，他才可能进入这个团队。在微信初期前三年，一直保持着极低的录用率，特别是到了后面快速发展期，还特别苛刻，『宁缺勿滥』，不肯降低标准。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3-5" class="outline-4"&gt;
&lt;h4 id="sec-1-3-5"&gt;&lt;span class="section-number-4"&gt;1.3.5&lt;/span&gt; 5、第五个偶然：胆大心细&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-3-5"&gt;
&lt;p&gt;
我前面提到，微信做朋友圈是一种非常大胆的尝试。朋友圈的实际对手，是微博，为什么呢？因为它们同样都在模仿Facebook，都在抢占国内这个『生态位』。
&lt;/p&gt;

&lt;p&gt;
但在把聊天功能和社区功能放在一起是冒险的，就像Facebook后来就把Facebook Messager独立出来，但也没有很成功，新浪微博当初想要把微博私信打造成一个独立应用对抗QQ和微信，也没有成功。
&lt;/p&gt;

&lt;p&gt;
另外一个案例，微信的早期对手米聊，很早就在产品中加入社区，自动同步用户改签名等动态。但最大的问题就是，在用户关系链没有沉淀好的情况下，做出来这个功能，最后整个动态区就变成了垃圾堆。
&lt;/p&gt;

&lt;p&gt;
但微信胆大心细地做了。为了这个功能，微信团队整整花了半年的时间，内部尝试了40多个方案，才最终把朋友圈的方案定下来，一举成功，几乎没再有大的改动。
&lt;/p&gt;

&lt;p&gt;
这个尝试的成功，本身也是偶然的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 总结：&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
一个产品的发展历程顺不顺利，除了它的产品策略，除了产品团队的实施过程之外，跟产品团队的基因、团队的积累、团队的管理方式、团队的行为方式，都有非常非常大的关系。
&lt;/p&gt;

&lt;p&gt;
正是因为微信团队经历过了邮箱时期的各种功能尝试，不但积累了经验，还锻炼了团队，建立了团队的系统基础，才有可能在短短的一两年内做出了一个几亿级的明星产品。（关于微信团队如何打造成这个能打仗的团队，参见我的文章《微信团队的实验室文化》）
&lt;/p&gt;

&lt;p&gt;
所以我前面说，微信所有的成功都建立在QQ邮箱的成功和失败上面，这种成功，有必然，更有偶然。而值得我们学习的，恰恰是那种偶然性。
&lt;/p&gt;

&lt;p&gt;
关于创业者和微信生态上的产品经理如何去理解微信平台的规则，理解微信团队的思维方式，以及能从微信团队身上学习什么，我将在下篇文章（或者下下篇文章）讲述，欢迎关注。
&lt;/p&gt;

&lt;p&gt;
作者陆树燊，小鸿科技COO，微信创始团队成员，产品哲学研究者。研究和实践方向：产品场景化和产业互联网企业管理，欢迎探讨和交流案例（微信: shensinside）
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>1加6普通用户评</title><link href="http://www.iknockdoor.com/1%E5%8A%A06%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E8%AF%84%E6%B5%8B.html" rel="alternate"></link><published>2018-05-25T00:00:00+08:00</published><updated>2018-05-25T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-05-25:/1加6普通用户评测.html</id><summary type="html">&lt;p&gt;
型号：6G内存，128G ROM，墨石黑
&lt;/p&gt;

&lt;p&gt;
用了一天，各方面都中规中矩，没有槽点，下面是具体感受：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;CPU有点屌，速度很快，硬件性能强大是亮点
&lt;/li&gt;
&lt;li&gt;4G网速感觉比之前的nexus 6p块很多，不晓得为啥
&lt;/li&gt;
&lt;li&gt;屏幕比之前用的 nexus 6p渣，宽度为1080像素，400ppi …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;
型号：6G内存，128G ROM，墨石黑
&lt;/p&gt;

&lt;p&gt;
用了一天，各方面都中规中矩，没有槽点，下面是具体感受：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;CPU有点屌，速度很快，硬件性能强大是亮点
&lt;/li&gt;
&lt;li&gt;4G网速感觉比之前的nexus 6p块很多，不晓得为啥
&lt;/li&gt;
&lt;li&gt;屏幕比之前用的 nexus 6p渣，宽度为1080像素，400ppi，细看有像素点，用惯了1440的会看到细节不精致，用了一天后适应了，没那么强烈的不适感
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
4 .音质相比之前nexus 6p和iPhone x都要渣，听音乐声音不够纯厚，但也凑合能听，毕竟不是发烧友
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;小马达那是相当渣，马达灵敏度很低，导致输入法震动反馈不够灵敏，常常打字快了会误以为没打到
&lt;/li&gt;
&lt;li&gt;软件品控一般，用了一天发现系统桌面一个bug
&lt;/li&gt;
&lt;li&gt;整机手感不错，略长
&lt;/li&gt;
&lt;li&gt;指纹解锁速度非常快，但是指纹面积略小，而且靠下，常常摸不到
&lt;/li&gt;
&lt;li&gt;电池为3300mah，但是非常给力，重度用户一天完全没有问题
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
整体，中规中矩，中庸路线高性价比旗舰机，没有槽点，也没有令人惊艳的亮点，作为日常生活用机完全可以满足
&lt;/p&gt;
</content></entry><entry><title>iPhone X电池待机与用量时间一样的问题的解决</title><link href="http://www.iknockdoor.com/iPhone%20X%E7%94%B5%E6%B1%A0%E5%BE%85%E6%9C%BA%E4%B8%8E%E7%94%A8%E9%87%8F%E6%97%B6%E9%97%B4%E4%B8%80%E6%A0%B7%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3.html" rel="alternate"></link><published>2018-05-01T00:00:00+08:00</published><updated>2018-05-01T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-05-01:/iPhone X电池待机与用量时间一样的问题的解决.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 问题描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 问题解决&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 感受&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 问题描述&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;iPhone X,11.2.2
&lt;/li&gt;
&lt;li&gt;在设置-&amp;gt;电池 中查看，最低下一行 …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 问题描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 问题解决&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 感受&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 问题描述&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;iPhone X,11.2.2
&lt;/li&gt;
&lt;li&gt;在设置-&amp;gt;电池 中查看，最低下一行，待机与用量时间相等
&lt;/li&gt;
&lt;li&gt;虽然没有待机，但手机续航能力还可以，20多个小时，同平时差不多
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 问题解决&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;尝试了各种设置项，重启，刷机，最终只有以下方法有效
&lt;/li&gt;
&lt;li&gt;充电完成时，需要在灭屏情况下拔线，如果在使用中拔线就会导致待机与用量相同了
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 感受&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
iPhone真的是越来越不好用了，很介意的几个问题：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;全系列产品相互捆绑升级，最重要的是升级之后都会不好用，耗电，卡顿
&lt;/li&gt;
&lt;li&gt;Bug比以前要多，版本质量下降
&lt;/li&gt;
&lt;li&gt;新买的手机续航能力不给力
&lt;/li&gt;
&lt;li&gt;AppStore付费推广，越来越难找到好的app，满屏推荐的都是各种游戏
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
相反，Android现在却做的越来越好，可惜Google亲儿子系列在国内会有些水土不服，比如Google的各种服务在连不上网的时候会持续耗电，比如推送通知会延迟。越来越想换个国产Android机，比如华为P20.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Android UI开发知识点</title><link href="http://www.iknockdoor.com/Android%20UI%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E7%82%B9.html" rel="alternate"></link><published>2018-04-04T00:00:00+08:00</published><updated>2018-04-04T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-04-04:/Android UI开发知识点.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 子view要的大小父view满足不了会怎样？&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="__"&gt;技术&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 布局参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. view绘制的三个流程的调用关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 滚动原理，界面绘制与自定义view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 为什么要有measure的过程，measure的数据有什么用？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. 计算大小的时候跟layout有没有关系？measure的宽高跟用顶点计算的宽高有什么异同？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-7"&gt;7 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 子view要的大小父view满足不了会怎样？&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="__"&gt;技术&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 布局参数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. view绘制的三个流程的调用关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 滚动原理，界面绘制与自定义view&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 为什么要有measure的过程，measure的数据有什么用？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. 计算大小的时候跟layout有没有关系？measure的宽高跟用顶点计算的宽高有什么异同？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-7"&gt;7. view的layoutParam是如何生效的？像fill&lt;sub&gt;parent这样的值是如何生效的？&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-8"&gt;8. view的draw的过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-9"&gt;9. 属性动画和视图动画会有性能上的区别吗？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-10"&gt;10. 最简单的，最基本的自定义的ViewGroup应该怎么写？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 子view要的大小父view满足不了会怎样？&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="__"&gt;技术&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
在measure过程中，系统会给最顶层一个w和h的值，这个是可以理解为屏幕的大小，更准确的理解是可视窗口的大小，注意是可视范围，而不是可绘制范围，可绘制的范围是无限大的，因此绘制区域并不会出现不够用的情况，系统给的区域大小和父view传给子view的只是指导意见的大小，就是告诉子view这么大才能被看到，超了这个会看不到，但子view可以不参考，子该画多大画多大，画布是无限大的可以满足的。如果绘制区域大于了可视窗口的大小，可以通过滚动看到，并没有什么影响。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 布局参数&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
每个view自己持有自己的布局参数，但是是由其父view使用的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; view绘制的三个流程的调用关系&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
view的默认onMeasure取了默认值，ViewGroup作为布局的基类，没有重写
onMeasure方法，但是提供了measureChildren的方法，其中最重要的是
getChildMeasureSpec方法，这里可以看到如何处理layout的各种不同spec的情况，自定义ViewGroup时可以借鉴。
&lt;/p&gt;

&lt;p&gt;
父view对子view的layout都是相对自己的，一般都是从0开始。
&lt;/p&gt;

&lt;p&gt;
View和ViewGroup的onLayout方法默认是空的
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 滚动原理，界面绘制与自定义view&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
&lt;a href="http://chanthuang.github.io/2016/08/31/Android-View-%25E7%259A%2584%25E6%25BB%259A%25E5%258A%25A8%25E5%258E%259F%25E7%2590%2586%25E5%2592%258C-Scroller%25E3%2580%2581VelocityTracker-%25E7%25B1%25BB%25E7%259A%2584%25E4%25BD%25BF%25E7%2594%25A8/"&gt;这里&lt;/a&gt; 有一个小教程，讲的很好，循序渐进的讲解viewgroup如何布局子view，以及touch事件的处理，动画的形成，里面可以很容易理解几个关键的知识点。加上自己的思考，有以下几个点：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;ViewGroup到底是如何measure和layout的
&lt;/li&gt;
&lt;li&gt;触发重新布局的几个时机。view提供的一些方法内部其实也是通过这几个时机去触发重新布局的，比如scroll方法，因此调用了scroll方法后就不需要再触发重新布局了
&lt;ul class="org-ul"&gt;
&lt;li&gt;View.requestLayout
&lt;ol class="org-ol"&gt;
&lt;li&gt;会调用mParent.requestLayout
&lt;/li&gt;
&lt;li&gt;如果parent是ViewGroup会直接使用view的实现，即调用父节点的
requestLayout
&lt;/li&gt;
&lt;li&gt;如果是ViewRoot，安排一次Traversal
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;View.setLayoutParams
&lt;/li&gt;
&lt;li&gt;View.invalidate
&lt;/li&gt;
&lt;li&gt;dispatchAppVisibility
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; 为什么要有measure的过程，measure的数据有什么用？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
先看measure的数据有什么用，measure计算出了没一个view的大小，包含了内部子view的margin和padding（事实上是否包含要看ViewGroup onMeasure方法的实现），在下一步layout的过程会使用宽高数据计算出view位置的四个顶点，这是应该是最主要的作用了；另外在控制是否需要重绘和dirty区域也有用到。
&lt;/p&gt;

&lt;p&gt;
实践中发现，继承ViewGroup onMeasure方法不是必须重写的，但onLayout方法是要的。事实上发现，onLayout方法完全可以不使用measure的数据直接布局。但是会有一个问题，由于子view没有被遍历measure，然后没有measureed
的size，然后在子view视图更新的时候不会发生重绘，可能是因为dirty区域的关系，所以onMeasure方法还是非常有必要重写的。
&lt;/p&gt;

&lt;p&gt;
再看measure的过程，measure的过程是个后序遍历，即是会先计算子view再计算父view的大小，而对于layout过程是相反的，先算父view的四个顶点，再算子view的四个顶点，也就是说对于layout过程自上而下计算一次就可以完成。但对于measure过程，因为会有动态大小，比如按比例分配，或者fill&lt;sub&gt;parent，&lt;/sub&gt;
在一次遍历的过程中可能会不能全部确定view的大小，往往需要遍历多次才能最终确认每一个view的大小。
&lt;/p&gt;

&lt;p&gt;
所以结论也比较明显，如果不分开measure，layout，draw的过程，合并在一个过程中完成，可能没一步都要遍历多次，性能上会打折扣，所以单独把
measure拿出来，让有必要遍历多次的遍历多次，没必要的步骤就只做一次。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; 计算大小的时候跟layout有没有关系？measure的宽高跟用顶点计算的宽高有什么异同？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
layout的过程用了margin来确定边界，measure的过程其实也需要考虑margin
和padding，可以参考具体的布局实现类。事实上，layout和measure的过程都是可以订制的，怎么实现都可以。
&lt;/p&gt;

&lt;p&gt;
measure计算出来的宽高跟最后用顶点计算出来的宽高有什么异同？其实看
layout和measure的过程就清楚，如果两个过程的计算中都考虑margin和
padding，最后两个值是一样的，没区别，如果两个计算过程计算方法上有区别，那两个值是不一样的。
&lt;/p&gt;

&lt;p&gt;
两个值会不一样，应该以谁为准？draw的过程事实上是依赖layout的结果，即四个顶点的值来绘制，也就是说，如果measure和layout出来的值不同，应该以layout的结果为准。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; view的layoutParam是如何生效的？像fill&lt;sub&gt;parent这样的值是如何生效的？&lt;/sub&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
默认view的measure大小是由父亲传进来的spec决定的，而spec是ViewGroup传进来的，ViewGroup的onMeasure方法是空的，需要继承者自己实现，然而
ViewGroup默认提供了MeasureChild的方法，这里是用layoutParam的宽高传给子view的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; view的draw的过程&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
view默认的draw方法使用的是layout之后的结果，即top，left，right，
butom这些值，另外还会用刀scrollX，transform，matrix这些值，这些就是做动画用了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-9" class="outline-2"&gt;
&lt;h2 id="sec-9"&gt;&lt;span class="section-number-2"&gt;9&lt;/span&gt; 属性动画和视图动画会有性能上的区别吗？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-9"&gt;
&lt;p&gt;
通过学习view的绘制过程，会发现视图动画其实是原生支持的，在draw的过程中直接使用transform的matrix实现的，他只影响draw的过程，不会重新
measure和layout，因此不会有性能问题，那么属性动画呢？经过实验，属性动画其实也是和视图动画类似的，动画过程中并不会重新measure和layout，也不会有性能问题，其他的区别就是网上大家说的那些了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-10" class="outline-2"&gt;
&lt;h2 id="sec-10"&gt;&lt;span class="section-number-2"&gt;10&lt;/span&gt; 最简单的，最基本的自定义的ViewGroup应该怎么写？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-10"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;onMeasure
调用ViewGroup.measureChildren(..)方法
&lt;/li&gt;
&lt;li&gt;onLayout
逐个调用子view的layout方法，不考虑magin,padding，参数给0,0,l-r,b-t
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>如何分析和可视化的清楚的表达出程序结构</title><link href="http://www.iknockdoor.com/%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E5%92%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E6%B8%85%E6%A5%9A%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%87%BA%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html" rel="alternate"></link><published>2018-04-04T00:00:00+08:00</published><updated>2018-04-04T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-04-04:/如何分析和可视化的清楚的表达出程序结构.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 如何分析一个程序？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 程序的图形化描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 描述做一件事情，无非需要描述清楚以下几个方面：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 无论是面向过程的，还是面向对象的，表达清楚三个要素：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
原来写在Confluence上的，搬过来
&lt;/pre&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;类图，各个类的关系，接口，一对一 …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 如何分析一个程序？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 程序的图形化描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 描述做一件事情，无非需要描述清楚以下几个方面：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 无论是面向过程的，还是面向对象的，表达清楚三个要素：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre class="example"&gt;
原来写在Confluence上的，搬过来
&lt;/pre&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;类图，各个类的关系，接口，一对一，一对多的关系，这个是对对象的组织和关系有帮助的，但无法表现时序，进程，线程关系
&lt;/li&gt;
&lt;li&gt;时序图，以对象生命周期为轴，可以表现对象之间的交互，也无法表现进程，线程关系，而且有点过于太细，不容易宏观表现这个点之前还是理解错了，时序图通过fragment是可以表达条件，循环，各种语句的
&lt;/li&gt;
&lt;li&gt;需要有一个能个表现进程线程关系的图
&lt;/li&gt;
&lt;/ol&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;时序图貌似不太容易表达逻辑的分支情况，流程图可以清楚的表达这种情况。
&lt;/li&gt;
&lt;li&gt;时序图可以清楚的表达同步调用，异步调用，以及线程关系。
&lt;/li&gt;
&lt;li&gt;类图，时序图，都还是不好表达一种程序或者软件架构的概念，比如某个模块或者摸个类负责什么样的事务，组织结构图？类图是表示集成关系这些，概念比较具体化，需要一个能够表示相对抽象的概念，某个类是干什么事的。
&lt;/li&gt;
&lt;li&gt;类图不容易表示对象之间的调用关系，先后顺序，数据流向，只能表现类的组织结构，这是个缺陷
&lt;/li&gt;
&lt;/ul&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 如何分析一个程序？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
程序的抽象结构是什么样的？有哪些模块，每个模块是做什么事情的，模块之间的关系，每个模块里面又可以具体到类有哪些进程，哪些线程，协调关系？需要有个线程模型图？貌似时序图就可以搞定核心任务的完成流程 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 程序的图形化描述&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;如何表达线程关系
&lt;/li&gt;
&lt;li&gt;如何表达分支与swtich case结构
&lt;/li&gt;
&lt;li&gt;如何表达循环结构
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 描述做一件事情，无非需要描述清楚以下几个方面：&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;怎么做？第一步做什么，第二步做什么？描述这个过程可以用以下两种方式，视情况选择
&lt;/li&gt;
&lt;li&gt;活动图，包含对象传递，可以在具体的活动上添加谁在处理或负责这个活动，也可以用框图表示哪个进程或者哪个部门处理这个活动
&lt;/li&gt;
&lt;li&gt;状态图，适合处理步骤不多，但状态变化复杂的内容
&lt;/li&gt;
&lt;li&gt;都谁参与这个事儿？组织架构是怎样的？职责范围是怎样的？
&lt;/li&gt;
&lt;li&gt;类图，可以很好的表达出类组织关系，通过类的名字，或者添加注释，可以描述职责范围
&lt;/li&gt;
&lt;li&gt;框图，可以从另一个角度表示模块之间的组织关系和职责范围
&lt;/li&gt;
&lt;li&gt;参与这件事儿的人是如何相互协作的，有几条工作流水线？
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
时序图可以很好的表达这个过程，可以表达条件处理，循环处理，对象生命周期，注意，时序图未必一定是具体到代码的执行层面，完全可以抽象成只描述具体环节。其实时序图如果简化成不表示对象生命周期，那么就和模块图类似了，可以表达模块之间的简单协作关系。最后还有一个数据流向图，之前有用过，觉得还是挺好用的，还没有理解如何和上面的结合起来，在哪里使用。 
&lt;/p&gt;

&lt;p&gt;
分析android context时用了一下时序图，发现不太容易表示对象持有的情况，如果在给对象发消息时参数是对象，如何关联是哪一个对象？活动图似乎也不好解决这个问题。其实这个问题也就是说，时序图可以表达对象之间的相互发消息，但有一个前提是对象首先要知道彼此的存在，或者持有彼此，才能相互发消息，而如何知道彼此的存在，如何持有彼此该如何用时序图表达？ 
&lt;/p&gt;


&lt;p&gt;
时序图如何表达静态方法的调用？时序图是对象之间的交互，要给对象发消息，但静态方法并没有对象，该如何表示？答：metaClass，见
&lt;a href="http://www.informit.com/articles/article.aspx?p=360441&amp;seqNum=5"&gt;http://www.informit.com/articles/article.aspx?p=360441&amp;seqNum=5&lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;
还有一个问题，时序图描述对象在时序上的交互过程 ，对于一个过程应该如何用时序图描述，比如就是一个方法的具体实现，在这个方法中有创建对象，设置对象，发送对象，操作的都还是静态方法。 
&lt;/p&gt;



&lt;p&gt;
如果各种UML的图都不好清晰的表达，是否可以考虑用动图表达？比如gif？
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 无论是面向过程的，还是面向对象的，表达清楚三个要素：&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;数据的组织结构
&lt;/li&gt;
&lt;li&gt;数据的传递过程
&lt;/li&gt;
&lt;li&gt;结果处理后的数据变化
&lt;/li&gt;
&lt;li&gt;归根到底，软件还是数据与结构，通过一系列的操作，处理各种各样的数据。
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
线程关系也要表达。
&lt;/p&gt;

&lt;p&gt;
应该做个可视化的jvm，把程序的执行过程可视化的表达出来。输入一段程序，输出这个程序的可视化流程。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Android界面开发积累</title><link href="http://www.iknockdoor.com/Android%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91%E7%A7%AF%E7%B4%AF.html" rel="alternate"></link><published>2018-03-13T00:00:00+08:00</published><updated>2018-03-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-03-13:/Android界面开发积累.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 获取root layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. width与mesured width&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 同一个view能够同时出现在两个地方？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. mesure或者layout到底怎么处理MATCH&lt;sub&gt;PARENT的？如果有margin值呢？&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 通常measure layout这些是以哪个位置为准的？左上角？baseline …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 获取root layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. width与mesured width&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 同一个view能够同时出现在两个地方？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. mesure或者layout到底怎么处理MATCH&lt;sub&gt;PARENT的？如果有margin值呢？&lt;/sub&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 通常measure layout这些是以哪个位置为准的？左上角？baseline？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. mesure和layout还要再撸一遍，看下最后画的位置到底是哪个参数，又受什么影响&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-7"&gt;7. dp px再撸一遍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-8"&gt;8. 位移，setTranslationX里面是怎么实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-9"&gt;9. 通过布局参数动态改变大小是怎么实现的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-10"&gt;10. 属性动画内部的实现原理是什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-11"&gt;11. 事件分发再搞搞&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-12"&gt;12. 手势识别再搞搞，感觉就差不多了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13"&gt;13. viewpager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-14"&gt;14. recyclerview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-15"&gt;15. view tree的遍历时机&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-15-1"&gt;15.1. 内部事件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-15-1-1"&gt;15.1.1. View.requestLayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-15-1-2"&gt;15.1.2. View.setLayoutParams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-15-1-3"&gt;15.1.3. View.invalidate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-15-1-4"&gt;15.1.4. dispatchAppVisibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 获取root layout&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; width与mesured width&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 同一个view能够同时出现在两个地方？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
不能，ViewGroup的addViewInner方法中会判断view是否已经有了parent，如果已经有了会抛出异常。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; mesure或者layout到底怎么处理MATCH&lt;sub&gt;PARENT的？如果有margin值呢？&lt;/sub&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; 通常measure layout这些是以哪个位置为准的？左上角？baseline？&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; mesure和layout还要再撸一遍，看下最后画的位置到底是哪个参数，又受什么影响&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; dp px再撸一遍&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; 位移，setTranslationX里面是怎么实现的？&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-9" class="outline-2"&gt;
&lt;h2 id="sec-9"&gt;&lt;span class="section-number-2"&gt;9&lt;/span&gt; 通过布局参数动态改变大小是怎么实现的？&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-10" class="outline-2"&gt;
&lt;h2 id="sec-10"&gt;&lt;span class="section-number-2"&gt;10&lt;/span&gt; 属性动画内部的实现原理是什么&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-11" class="outline-2"&gt;
&lt;h2 id="sec-11"&gt;&lt;span class="section-number-2"&gt;11&lt;/span&gt; 事件分发再搞搞&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12" class="outline-2"&gt;
&lt;h2 id="sec-12"&gt;&lt;span class="section-number-2"&gt;12&lt;/span&gt; 手势识别再搞搞，感觉就差不多了&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13" class="outline-2"&gt;
&lt;h2 id="sec-13"&gt;&lt;span class="section-number-2"&gt;13&lt;/span&gt; viewpager&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-14" class="outline-2"&gt;
&lt;h2 id="sec-14"&gt;&lt;span class="section-number-2"&gt;14&lt;/span&gt; recyclerview&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-15" class="outline-2"&gt;
&lt;h2 id="sec-15"&gt;&lt;span class="section-number-2"&gt;15&lt;/span&gt; view tree的遍历时机&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-15"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-15-1" class="outline-3"&gt;
&lt;h3 id="sec-15-1"&gt;&lt;span class="section-number-3"&gt;15.1&lt;/span&gt; 内部事件&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-15-1"&gt;
&lt;p&gt;
会发现下面几种，尤其是setLayoutParams，当做动画的时候会引起遍历，造成性能问题
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-15-1-1" class="outline-4"&gt;
&lt;h4 id="sec-15-1-1"&gt;&lt;span class="section-number-4"&gt;15.1.1&lt;/span&gt; View.requestLayout&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-15-1-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;会调用mParent.requestLayout
&lt;/li&gt;
&lt;li&gt;如果parent是ViewGroup会直接使用view的实现，即调用父节点的requestLayout
&lt;/li&gt;
&lt;li&gt;如果是ViewRoot，安排一次Traversal
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-15-1-2" class="outline-4"&gt;
&lt;h4 id="sec-15-1-2"&gt;&lt;span class="section-number-4"&gt;15.1.2&lt;/span&gt; View.setLayoutParams&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-15-1-3" class="outline-4"&gt;
&lt;h4 id="sec-15-1-3"&gt;&lt;span class="section-number-4"&gt;15.1.3&lt;/span&gt; View.invalidate&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-15-1-4" class="outline-4"&gt;
&lt;h4 id="sec-15-1-4"&gt;&lt;span class="section-number-4"&gt;15.1.4&lt;/span&gt; dispatchAppVisibility&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>java中的闭包和匿名内部类</title><link href="http://www.iknockdoor.com/java%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85%E5%92%8C%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB.html" rel="alternate"></link><published>2018-02-28T00:00:00+08:00</published><updated>2018-02-28T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-02-28:/java中的闭包和匿名内部类.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. java中匿名内部类使用外部方法的参数或局部变量的场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; java中匿名内部类使用外部方法的参数或局部变量的场景&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;  &lt;span class="org-keyword"&gt;interface&lt;/span&gt; &lt;span class="org-type"&gt;AnnoInner&lt;/span&gt;(){addXYZ();}
&lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;Outer&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-type"&gt;AnnoInner&lt;/span&gt; &lt;span class="org-function-name"&gt;getAnnoInner&lt;/span&gt;(&lt;span class="org-keyword"&gt;final&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;x&lt;/span&gt;){
        &lt;span class="org-keyword"&gt;final …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. java中匿名内部类使用外部方法的参数或局部变量的场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; java中匿名内部类使用外部方法的参数或局部变量的场景&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;  &lt;span class="org-keyword"&gt;interface&lt;/span&gt; &lt;span class="org-type"&gt;AnnoInner&lt;/span&gt;(){addXYZ();}
&lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;Outer&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-type"&gt;AnnoInner&lt;/span&gt; &lt;span class="org-function-name"&gt;getAnnoInner&lt;/span&gt;(&lt;span class="org-keyword"&gt;final&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;x&lt;/span&gt;){
        &lt;span class="org-keyword"&gt;final&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;y&lt;/span&gt;=100;
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-keyword"&gt;new&lt;/span&gt; &lt;span class="org-type"&gt;AnnoInner&lt;/span&gt;(){
            &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;z&lt;/span&gt;=100;
            &lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-function-name"&gt;addXYZ&lt;/span&gt;(){&lt;span class="org-keyword"&gt;return&lt;/span&gt; x+y+z;}
            &lt;span class="org-comment-delimiter"&gt;//&lt;/span&gt;&lt;span class="org-comment"&gt;public void changeY(){y+=1;}    //&amp;#36825;&amp;#20010;&amp;#20989;&amp;#25968;&amp;#26080;&amp;#27861;&amp;#20462;&amp;#25913;&amp;#22806;&amp;#37096;&amp;#29615;&amp;#22659;&amp;#20013;&amp;#30340;&amp;#33258;&amp;#30001;&amp;#21464;&amp;#37327;y&amp;#12290;&lt;/span&gt;
        };
    }
    &lt;span class="org-keyword"&gt;private&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;num&lt;/span&gt;=100;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
上面这段代码匿名内部类的addXYZ()函数却直接使用了x和y这两个自由变量来计算结果。这就说明，外部方法getAnnoInner()事实上已经对内部类
AnnoInner构成了一个闭包。但这里别扭的地方是这两个x和y都必须用final修饰。
&lt;/p&gt;

&lt;p&gt;
这是为什么呢？因为这里Java编译器支持了闭包，但支持地不完整。说支持了闭包，是因为编译器编译的时候其实悄悄对函数做了手脚，偷偷把外部环境方法的x和y局部变量，拷贝了一份到匿名内部类里。如下面的代码所示。
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;&lt;span class="org-keyword"&gt;interface&lt;/span&gt; &lt;span class="org-type"&gt;AnnoInner&lt;/span&gt;(){addXYZ();}
&lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;Outer&lt;/span&gt; {
    &lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-type"&gt;AnnoInner&lt;/span&gt; &lt;span class="org-function-name"&gt;getAnnoInner&lt;/span&gt;(&lt;span class="org-keyword"&gt;final&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;x&lt;/span&gt;){
        &lt;span class="org-keyword"&gt;final&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;y&lt;/span&gt;=100;
        &lt;span class="org-keyword"&gt;return&lt;/span&gt; &lt;span class="org-keyword"&gt;new&lt;/span&gt; &lt;span class="org-type"&gt;AnnoInner&lt;/span&gt;(){
            &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;copyX&lt;/span&gt;=x;    &lt;span class="org-comment-delimiter"&gt;//&lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#32534;&amp;#35793;&amp;#22120;&amp;#30456;&amp;#24403;&amp;#20110;&amp;#25335;&amp;#36125;&amp;#20102;&amp;#22806;&amp;#37096;&amp;#33258;&amp;#30001;&amp;#21464;&amp;#37327;x&amp;#30340;&amp;#19968;&amp;#20010;&amp;#21103;&amp;#26412;&amp;#21040;&amp;#21311;&amp;#21517;&amp;#20869;&amp;#37096;&amp;#31867;&amp;#37324;&amp;#12290;&lt;/span&gt;
            &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;copyY&lt;/span&gt;=y;    &lt;span class="org-comment-delimiter"&gt;//&lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#32534;&amp;#35793;&amp;#22120;&amp;#30456;&amp;#24403;&amp;#20110;&amp;#25335;&amp;#36125;&amp;#20102;&amp;#22806;&amp;#37096;&amp;#33258;&amp;#30001;&amp;#21464;&amp;#37327;y&amp;#30340;&amp;#19968;&amp;#20010;&amp;#21103;&amp;#26412;&amp;#21040;&amp;#21311;&amp;#21517;&amp;#20869;&amp;#37096;&amp;#31867;&amp;#37324;&amp;#12290;&lt;/span&gt;
            &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;z&lt;/span&gt;=100;
            &lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-function-name"&gt;addXYZ&lt;/span&gt;(){&lt;span class="org-keyword"&gt;return&lt;/span&gt; x+y+z;}
            &lt;span class="org-comment-delimiter"&gt;//&lt;/span&gt;&lt;span class="org-comment"&gt;public void changeY(){y+=1;}    //&amp;#36825;&amp;#20010;&amp;#20989;&amp;#25968;&amp;#26080;&amp;#27861;&amp;#20462;&amp;#25913;&amp;#22806;&amp;#37096;&amp;#29615;&amp;#22659;&amp;#20013;&amp;#30340;&amp;#33258;&amp;#30001;&amp;#21464;&amp;#37327;y&amp;#12290;&lt;/span&gt;
        };
    }

    &lt;span class="org-keyword"&gt;private&lt;/span&gt; &lt;span class="org-type"&gt;int&lt;/span&gt; &lt;span class="org-variable-name"&gt;num&lt;/span&gt;=100;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
所以用R大回答里的原话说就是：
&lt;/p&gt;
&lt;pre class="example"&gt;
Java编译器实现的只是capture-by-value，并没有实现capture-by-reference。
&lt;/pre&gt;
&lt;p&gt;
而只有后者才能保持匿名内部类和外部环境局部变量保持同步。但Java又不肯明说，只能粗暴地一刀切，就说既然内外不能同步，那就不许大家改外围的局部变量。
&lt;/p&gt;

&lt;p&gt;
这就解释了两个问题：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;为什么匿名内部类能够访问外部方法的参数或者局部变量
&lt;/li&gt;
&lt;li&gt;为什么被匿名内部类访问的外部方法的参数或局部变量必须是final的
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>校招培训引发的思考</title><link href="http://www.iknockdoor.com/%E6%A0%A1%E6%8B%9B%E5%9F%B9%E8%AE%AD%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83.html" rel="alternate"></link><published>2018-02-28T00:00:00+08:00</published><updated>2018-02-28T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-02-28:/校招培训引发的思考.html</id><summary type="html">&lt;p&gt;
今天参加了一场公司的校招培训，其中一位经验丰富的面试官分享了他的校招经验，其中讲了各种名牌大学各种实验室，各种同各大名企争夺优秀人才，听了感觉自己离“人才”两字好远，好想太过普通了，这是在做面试官，如果是放在当年让自己去应聘校招，可能简历都发不出去。
&lt;/p&gt;

&lt;p&gt;
那当不是名牌大学毕业，没有研究什么高大上的算法，推荐模型，学历，经历平平的我们该怎么办呢？或者说如果我们也去做这些，会不会真的跟高学历的人有很大的差距？如果真的是这样，我们的立足点又在哪里 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
今天参加了一场公司的校招培训，其中一位经验丰富的面试官分享了他的校招经验，其中讲了各种名牌大学各种实验室，各种同各大名企争夺优秀人才，听了感觉自己离“人才”两字好远，好想太过普通了，这是在做面试官，如果是放在当年让自己去应聘校招，可能简历都发不出去。
&lt;/p&gt;

&lt;p&gt;
那当不是名牌大学毕业，没有研究什么高大上的算法，推荐模型，学历，经历平平的我们该怎么办呢？或者说如果我们也去做这些，会不会真的跟高学历的人有很大的差距？如果真的是这样，我们的立足点又在哪里？
&lt;/p&gt;
</content></entry><entry><title>iPhone X使用两周后的体验</title><link href="http://www.iknockdoor.com/iPhone%20X%E4%BD%BF%E7%94%A8%E4%B8%A4%E5%91%A8%E5%90%8E%E7%9A%84%E4%BD%93%E9%AA%8C.html" rel="alternate"></link><published>2018-02-02T00:00:00+08:00</published><updated>2018-02-02T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-02-02:/iPhone X使用两周后的体验.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 电池&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. face ID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 齐刘海是个缺陷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 备份软件不支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 没有3.5毫米耳机孔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. 手感略差，后置摄像头凸起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-7"&gt;7. 当时为什么要换iPhone …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 电池&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. face ID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 齐刘海是个缺陷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 备份软件不支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 没有3.5毫米耳机孔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. 手感略差，后置摄像头凸起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-7"&gt;7. 当时为什么要换iPhone X&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 电池&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
刚拿到手上的时候发现还是比较小的，整体外观跟iPhone 6差不多大小，只是屏幕略长，所以一直担心电池续航问题，毕竟iPhone 6的续航跟iPhone 6
plus的还是差的不少。实际用下来除了前面一个星期感觉比较费电，能撑一个白天+一个晚上+半个白天，到现在比较稳定了，可以撑两个白天一个晚上，这样第二天晚上充电整体节奏还可以。
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;iOS 11.2.2
&lt;/li&gt;
&lt;li&gt;关闭动态背景
&lt;/li&gt;
&lt;li&gt;打开抬起唤醒
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; face ID&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
这是一项很大的进步，很方便，包含解锁，记事本，支付都可以使用face ID，平时不再需要输入密码，非常方便，感觉这才是注入one password之类的密码管理的终极解决方案。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 齐刘海是个缺陷&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
使得屏幕上少了一块区域，状态栏能够呈现的信息变少，比如VPN，电量百分比这些都没了，需要下拉才能看到。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 备份软件不支持&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
部分软件没有对iPhone x的屏幕做适配，导致显示效果比iPhone 6上还差，不过后面应该都会慢慢适配了吧。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; 没有3.5毫米耳机孔&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
这个点怎么说呢，在习惯了无线之后，当没有了各种线的束缚之后确实很方便，但是之前买的耳机可能都要更新换代了，连着转接口非常麻烦，尤其是之前的耳机还不便宜的，更新换代是个很大的问题。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; 手感略差，后置摄像头凸起&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
拿在手里很滑，感觉分分钟会从手里滑出去。后置摄像头的凸起导致放在桌上会不平。解决手感和凸起的问题似乎只能通过加个套，对于一直裸奔的人还没决定买个套子。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; 当时为什么要换iPhone X&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;想体验一下Applewatch，必须要11.0以上的系统，丫的原来的iPhone6p又不想升级
&lt;/li&gt;
&lt;li&gt;原来16G的iPhone 6 plus的空间确实不够用了，再升级就更没空间了。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>java中的注解(Annotation)</title><link href="http://www.iknockdoor.com/java%E4%B8%AD%E7%9A%84%E6%B3%A8%E8%A7%A3(Annotation).html" rel="alternate"></link><published>2018-01-29T00:00:00+08:00</published><updated>2018-01-29T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-01-29:/java中的注解(Annotation).html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. java中的注解(Annotation)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. 什么是java注解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. 自定义注解的语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3"&gt;1.3. 注解的本质&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-4"&gt;1.4. java注解的实现原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-5"&gt;1.5 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. java中的注解(Annotation)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. 什么是java注解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. 自定义注解的语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3"&gt;1.3. 注解的本质&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-4"&gt;1.4. java注解的实现原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-5"&gt;1.5. 原注解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; java中的注解(Annotation)&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
现在很多框架工具都使用注解的方式实现，比如junit，eventbugs等等，理解
java的注解会比较有助于理解这些工具，也可以在平时应用注解。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; 什么是java注解&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
从使用层面来理解，java注解并不会提供程序，方法，对象，类新的功能或者任何可执行的代码，他只会提供给编译器一些key value，根据注解的类型不同，编译器可以在编译阶段使用注解，也可以将注解信息作为一个key
value记录在编译好的class文件中，供程序通过反射的方法读取，并根据这些key value来执行不同的动作。比如junit，通过注解的方式告诉来junit框架哪些方法是测试用例，哪些是前置后置条件，然后junit执行过程中根据这些信息知道如何调用测试用例。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; 自定义注解的语法&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;   &lt;span class="org-c-annotation"&gt;@Documented&lt;/span&gt;
&lt;span class="org-c-annotation"&gt;@Retention&lt;/span&gt;(&lt;span class="org-constant"&gt;RetentionPolicy&lt;/span&gt;.&lt;span class="org-type"&gt;RUNTIME&lt;/span&gt;)
&lt;span class="org-c-annotation"&gt;@Target&lt;/span&gt;(&lt;span class="org-constant"&gt;ElementType&lt;/span&gt;.&lt;span class="org-type"&gt;ANNOTATION_TYPE&lt;/span&gt;)
&lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-keyword"&gt;@interface&lt;/span&gt; &lt;span class="org-type"&gt;Target&lt;/span&gt; {
    &lt;span class="org-type"&gt;String&lt;/span&gt; &lt;span class="org-function-name"&gt;value&lt;/span&gt;() &lt;span class="org-keyword"&gt;default&lt;/span&gt; &lt;span class="org-string"&gt;"unknow"&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
用@interface关键字，用方法名作为key，返回值作为key的类型，default提供默认值 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; 注解的本质&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
通过反编译，可以发现注解本质上是一个继承自
java.lang.annotation.Annotation的接口
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;&lt;span class="section-number-3"&gt;1.4&lt;/span&gt; java注解的实现原理&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
那么接口怎么能够设置属性呢？简单来说就是java通过动态代理的方式为你生成了一个实现了"接口"`TestAnnotation`的实例（对于当前的实体来说，例如类、方法、属性域等，这个代理对象是单例的），然后对该代理实例的属性赋值，这样就可以在程序运行时（如果将注解设置为运行时可见的话）通过反射获取到注解的配置信息。
&lt;/p&gt;

&lt;p&gt;
上面这段理解很关键，原文在&lt;i&gt;这里&lt;/i&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-5" class="outline-3"&gt;
&lt;h3 id="sec-1-5"&gt;&lt;span class="section-number-3"&gt;1.5&lt;/span&gt; 原注解&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;p&gt;
原注解是用来注解其他自定义或系统提供的注解的注解。java 5中提供的原注解如下：
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;@Target
&lt;/li&gt;
&lt;li&gt;@Retention
&lt;/li&gt;
&lt;li&gt;@Documented
&lt;/li&gt;
&lt;li&gt;@Inherited
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Android的LayoutParams</title><link href="http://www.iknockdoor.com/Android%E7%9A%84LayoutParams.html" rel="alternate"></link><published>2018-01-16T00:00:00+08:00</published><updated>2018-01-16T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-01-16:/Android的LayoutParams.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 布局参数由view持有，由view直接上级的viewgroup使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. LayoutParams的创建时机&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. 从布局文件创建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2-2"&gt;2.2. 从代码创建&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. LayoutParams的类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 自定义布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 参考 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 布局参数由view持有，由view直接上级的viewgroup使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. LayoutParams的创建时机&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. 从布局文件创建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2-2"&gt;2.2. 从代码创建&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. LayoutParams的类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 自定义布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
之前对布局文件中的各控件的布局参数的理解一直存在一些误区，需要明确以下几个关键点
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 布局参数由view持有，由view直接上级的viewgroup使用&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
LayoutParams虽然由view持有，但是是ViewGroup的布局属性，根据不同
ViewGroup会有不同的属性，同时也是由ViewGroup使用的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; LayoutParams的创建时机&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; 从布局文件创建&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
由inflator在解析xml时根据view的ViewGourp调用ViewGroup的方法，并根据
view的attrs创建一个LayoutParams对象，并在add view到ViewGroup时给
view持有
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; 从代码创建&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
这就简单了，直接创建，add view时作为参数传进去
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; LayoutParams的类型&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
view持有的LayoutParams一定是父容器ViewGroup的LayoutParams类，在添加到ViewGroup时会做类型检查，这个逻辑也是合理的
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;LayoutParams是由ViewGroup使用的，所以必须是ViewGroup知道的类型，才能使用
&lt;/li&gt;
&lt;li&gt;也因此，当view在不同ViewGroup下时可以由不同的布局参数
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 自定义布局&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
在自定义布局时需要重载创建的LayoutParams的几个方法，如果需要，也需要自定义LayoutParams
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; 参考&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
&lt;a href="http://blog.csdn.net/qinjuning/article/details/8051811"&gt;这里&lt;/a&gt; 和 &lt;a href="http://yuanfentiank789.github.io/2016/06/08/layoutparams%25E5%2588%2586%25E6%259E%2590/"&gt;这里&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>Android的attrs,style和theme</title><link href="http://www.iknockdoor.com/Android%E7%9A%84attrs,style%E5%92%8Ctheme.html" rel="alternate"></link><published>2018-01-16T00:00:00+08:00</published><updated>2018-01-16T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-01-16:/Android的attrs,style和theme.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. Android的attrs,style和theme&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. attrs和styleable&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1-1"&gt;1.1.1. 什么是styleable和attrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-2"&gt;1.1.2. 如何定义styleable和attrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-3"&gt;1.1.3 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. Android的attrs,style和theme&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. attrs和styleable&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1-1"&gt;1.1.1. 什么是styleable和attrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-2"&gt;1.1.2. 如何定义styleable和attrs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-3"&gt;1.1.3. styleable的命名习惯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-4"&gt;1.1.4. styleable的命名空间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-5"&gt;1.1.5. styleable的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-1-6"&gt;1.1.6. 查看view或控件支持的属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. style和theme&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-2-1"&gt;1.2.1. 定义style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2-2"&gt;1.2.2. 读取style的值和使用style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2-3"&gt;1.2.3. style与styleable的关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2-4"&gt;1.2.4. theme的读取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2-5"&gt;1.2.5. 系统定义的style和theme的值&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Android的attrs,style和theme&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
在理解style和theme之前需要先理解attrs
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; attrs和styleable&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
官方文档在&lt;a href="https://developer.android.com/training/custom-views/create-view.html#applyattr"&gt;这里&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-1" class="outline-4"&gt;
&lt;h4 id="sec-1-1-1"&gt;&lt;span class="section-number-4"&gt;1.1.1&lt;/span&gt; 什么是styleable和attrs&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-1"&gt;
&lt;p&gt;
从字面上理解，styleable就是可定义风格(style)的。attrs就是一个属性，定义一个属性更像第一个键值对，同时定义了这个键的类型和取值范围。
&lt;/p&gt;

&lt;p&gt;
对于一个styleable，他的style是由多个属性(attrs)来定义的，所以从这角度理解，一个styleable是定义了一组属性的集合。举个例子：
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-xml"&gt;    &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;resources&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;declare-styleable&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;PieChart&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;attr&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;showText&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;format&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;boolean&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt; &lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;attr&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;labelPosition&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;format&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;enum&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;enum&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;left&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;value&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;0&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;enum&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;right&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;value&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;1&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;attr&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;declare-styleable&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;resources&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-2" class="outline-4"&gt;
&lt;h4 id="sec-1-1-2"&gt;&lt;span class="section-number-4"&gt;1.1.2&lt;/span&gt; 如何定义styleable和attrs&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-2"&gt;
&lt;p&gt;
如上，只需要在res/values/attrs.xml文件中定义
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-3" class="outline-4"&gt;
&lt;h4 id="sec-1-1-3"&gt;&lt;span class="section-number-4"&gt;1.1.3&lt;/span&gt; styleable的命名习惯&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-3"&gt;
&lt;p&gt;
可以定义style不是一定是view，可以是一个view，一个控件，一个theme，一个类，甚至一个虚拟存在的概念。他只需要满足一个概念，他具备一些属性，这些属性可以通过外部赋值，供他读取从而产生不同的行为。
&lt;/p&gt;

&lt;p&gt;
最常见的就是各个控件各个view了，他们会通过styleable来改变自己的外观，通常每个view有自己不同的可定义的属性，所以每个view会定义一个
styleable来指明自己有哪些属性可订制。对于这些styleable通常会直接以控件名或者view名命名，但这不是强制的，这只是约定俗成。
&lt;/p&gt;

&lt;p&gt;
另外一个常见的就是theme了，Android将theme可定义的所欲属性集合在一起定义一个了styleable，由Activity创建时读取和使用来改变自身的行为或样式。
&lt;/p&gt;

&lt;p&gt;
Android系统定义的styleable和attrs可以在&lt;a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/res/res/values/attrs.xml"&gt;这里&lt;/a&gt; 查看
&lt;/p&gt;

&lt;p&gt;
需要注意，attrs的定义并不需要依赖于styleable，在styleable里面定义，可以独立的定义attrs。既然可以独立定义attrs为什么还要有styleable呢？一个命名的styleable也是一个资源，最后会有一个资源ID指向他，他存在的意义可以供配套的控件方便的使用他指导系统读取哪些属性，还是在于
styleable的本质是个属性的集合。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-4" class="outline-4"&gt;
&lt;h4 id="sec-1-1-4"&gt;&lt;span class="section-number-4"&gt;1.1.4&lt;/span&gt; styleable的命名空间&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-4"&gt;
&lt;p&gt;
命名空间是为了避免自定义的属性与系统定义的属性冲突，同时方便使用。如下：
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-xml"&gt;    &lt;span class="org-nxml-processing-instruction-delimiter"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="org-nxml-processing-instruction-target"&gt;xml&lt;/span&gt; &lt;span class="org-nxml-processing-instruction-content"&gt;version="1.0" encoding="utf-8"&lt;/span&gt;&lt;span class="org-nxml-processing-instruction-delimiter"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;LinearLayout&lt;/span&gt; &lt;span class="org-nxml-namespace-attribute-xmlns"&gt;xmlns&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-colon"&gt;:&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-prefix"&gt;android&lt;/span&gt;=&lt;span class="org-nxml-namespace-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-value"&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-value-delimiter"&gt;"&lt;/span&gt;
   &lt;span class="org-nxml-namespace-attribute-xmlns"&gt;xmlns&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-colon"&gt;:&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-prefix"&gt;custom&lt;/span&gt;=&lt;span class="org-nxml-namespace-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-value"&gt;http://schemas.android.com/apk/res/com.example.customviews&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;com.example.customviews.charting.PieChart&lt;/span&gt;
     &lt;span class="org-nxml-attribute-prefix"&gt;custom&lt;/span&gt;&lt;span class="org-nxml-attribute-colon"&gt;:&lt;/span&gt;&lt;span class="org-nxml-attribute-local-name"&gt;showText&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;true&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;
     &lt;span class="org-nxml-attribute-prefix"&gt;custom&lt;/span&gt;&lt;span class="org-nxml-attribute-colon"&gt;:&lt;/span&gt;&lt;span class="org-nxml-attribute-local-name"&gt;labelPosition&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;left&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt; &lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;LinearLayout&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-5" class="outline-4"&gt;
&lt;h4 id="sec-1-1-5"&gt;&lt;span class="section-number-4"&gt;1.1.5&lt;/span&gt; styleable的使用&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;可以直接在控件的布局文件中使用，比如：
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-xml"&gt;      &lt;span class="org-nxml-processing-instruction-delimiter"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="org-nxml-processing-instruction-target"&gt;xml&lt;/span&gt; &lt;span class="org-nxml-processing-instruction-content"&gt;version="1.0" encoding="utf-8"&lt;/span&gt;&lt;span class="org-nxml-processing-instruction-delimiter"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;LinearLayout&lt;/span&gt; &lt;span class="org-nxml-namespace-attribute-xmlns"&gt;xmlns&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-colon"&gt;:&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-prefix"&gt;android&lt;/span&gt;=&lt;span class="org-nxml-namespace-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-value"&gt;http://schemas.android.com/apk/res/android&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-value-delimiter"&gt;"&lt;/span&gt;
   &lt;span class="org-nxml-namespace-attribute-xmlns"&gt;xmlns&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-colon"&gt;:&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-prefix"&gt;custom&lt;/span&gt;=&lt;span class="org-nxml-namespace-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-value"&gt;http://schemas.android.com/apk/res/com.example.customviews&lt;/span&gt;&lt;span class="org-nxml-namespace-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;com.example.customviews.charting.PieChart&lt;/span&gt;
     &lt;span class="org-nxml-attribute-prefix"&gt;custom&lt;/span&gt;&lt;span class="org-nxml-attribute-colon"&gt;:&lt;/span&gt;&lt;span class="org-nxml-attribute-local-name"&gt;showText&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;true&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;
     &lt;span class="org-nxml-attribute-prefix"&gt;custom&lt;/span&gt;&lt;span class="org-nxml-attribute-colon"&gt;:&lt;/span&gt;&lt;span class="org-nxml-attribute-local-name"&gt;labelPosition&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;left&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt; &lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;LinearLayout&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;也可以用style定义取值
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1-6" class="outline-4"&gt;
&lt;h4 id="sec-1-1-6"&gt;&lt;span class="section-number-4"&gt;1.1.6&lt;/span&gt; 查看view或控件支持的属性&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-1-6"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;查看某一个控件或view支持的属性，直接查看这个类的API，比如
&lt;a href="https://developer.android.com/reference/android/widget/TextView.html#lattrs"&gt;TextView&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;查看各个控件所有的属性的集合&lt;a href="https://developer.android.com/reference/android/R.attr.html"&gt;R.attr&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; style和theme&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
有了对attrs和styleable的理解，再理解style和theme就非常容易了，一个
style或一个theme就是为styleable的各个属性配置一套值。
&lt;/p&gt;

&lt;p&gt;
style和theme本质上是一样，都是对styleable赋值，style常用在view和控件上。theme常用在activity和application上，并会对activity或
application下的所有view产生影响。&lt;a href="http://androiddoc.qiniudn.com/guide/topics/ui/themes.html"&gt;官网介绍&lt;/a&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-1" class="outline-4"&gt;
&lt;h4 id="sec-1-2-1"&gt;&lt;span class="section-number-4"&gt;1.2.1&lt;/span&gt; 定义style&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-1"&gt;
&lt;p&gt;
对命名无特殊要求，所有的资源文件最后都会编译成为一个ID，定义style
只需要满足一下几点
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;保存在res/values/目下，xml文件
&lt;/li&gt;
&lt;li&gt;根结点为&amp;lt;resource&amp;gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-xml"&gt;   &lt;span class="org-nxml-processing-instruction-delimiter"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="org-nxml-processing-instruction-target"&gt;xml&lt;/span&gt; &lt;span class="org-nxml-processing-instruction-content"&gt;version="1.0" encoding="utf-8"&lt;/span&gt;&lt;span class="org-nxml-processing-instruction-delimiter"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;resources&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;style&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;CodeFont&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;parent&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;@android:style/TextAppearance.Medium&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;android:layout_width&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;&lt;span class="org-nxml-text"&gt;fill_parent&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;android:layout_height&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;&lt;span class="org-nxml-text"&gt;wrap_content&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;android:textColor&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;&lt;span class="org-nxml-text"&gt;#00FF00&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt; &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;android:typeface&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;&lt;span class="org-nxml-text"&gt;monospace&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;style&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;resources&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;style的继承
&lt;ul class="org-ul"&gt;
&lt;li&gt;系统style的继承需要用parent方式
&lt;/li&gt;
&lt;li&gt;自定义style的继承使用点的语法
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义style的语法文档在&lt;a href="https://developer.android.com/guide/topics/resources/style-resource.html"&gt;这里&lt;/a&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-xml"&gt;      &lt;span class="org-nxml-processing-instruction-delimiter"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="org-nxml-processing-instruction-target"&gt;xml&lt;/span&gt; &lt;span class="org-nxml-processing-instruction-content"&gt;version="1.0" encoding="utf-8"&lt;/span&gt;&lt;span class="org-nxml-processing-instruction-delimiter"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;resources&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;style&lt;/span&gt;
        &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;style_name&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;
        &lt;span class="org-nxml-attribute-local-name"&gt;parent&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;@[package:]style/style_to_inherit&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt;
            &lt;span class="org-nxml-attribute-local-name"&gt;name&lt;/span&gt;=&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;&lt;span class="org-nxml-attribute-value"&gt;[package:]style_property_name&lt;/span&gt;&lt;span class="org-nxml-attribute-value-delimiter"&gt;"&lt;/span&gt;
            &lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;&lt;span class="org-nxml-text"&gt;style_value&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;item&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;style&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="org-nxml-tag-delimiter"&gt;&amp;lt;&lt;/span&gt;&lt;span class="org-nxml-tag-slash"&gt;/&lt;/span&gt;&lt;span class="org-nxml-element-local-name"&gt;resources&lt;/span&gt;&lt;span class="org-nxml-tag-delimiter"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-2" class="outline-4"&gt;
&lt;h4 id="sec-1-2-2"&gt;&lt;span class="section-number-4"&gt;1.2.2&lt;/span&gt; 读取style的值和使用style&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-2"&gt;
&lt;p&gt;
对于系统view，控件以及自定义view，通常都是在构造器中读取指定style
来创建控件。类似代码如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
TypedArray a =  context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.TextView, defStyle, 0); 
注意TypedArray资源需要释放
&lt;/pre&gt;
&lt;p&gt;
可以看到，styleable指定读取哪些属性，defStyle提供了一个属性和值的集合。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-3" class="outline-4"&gt;
&lt;h4 id="sec-1-2-3"&gt;&lt;span class="section-number-4"&gt;1.2.3&lt;/span&gt; style与styleable的关系&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-3"&gt;
&lt;p&gt;
从上面style的读取中可能会有些疑问，style和styleable是否有什么联系？或者是否是必须配套的？
&lt;/p&gt;

&lt;p&gt;
其实两者并没有必然联系，style可以给任意属性赋值，并集合在一起，并不理会styleable是如何定义集合的，哪些属性是一套的。当styleable指定要读取的属性不在style的提供范围中时控件自己处理给个默认值，并不会报错，对于style中多提供的styleable没有指定的属性时在读取过程中会直接被忽略。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-4" class="outline-4"&gt;
&lt;h4 id="sec-1-2-4"&gt;&lt;span class="section-number-4"&gt;1.2.4&lt;/span&gt; theme的读取&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-4"&gt;
&lt;p&gt;
因为theme和style本质是一样的，所以读取过程基本也是一样的。只是读取时机不同，style一般用于控件，在构造函数读取，theme一般用于activity
和application，在创建activity时读取。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-5" class="outline-4"&gt;
&lt;h4 id="sec-1-2-5"&gt;&lt;span class="section-number-4"&gt;1.2.5&lt;/span&gt; 系统定义的style和theme的值&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-5"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/res/res/values/styles.xml"&gt;style.xml&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/res/res/values/themes.xml"&gt;themes&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>我要给自己订个目标</title><link href="http://www.iknockdoor.com/%E6%88%91%E8%A6%81%E7%BB%99%E8%87%AA%E5%B7%B1%E8%AE%A2%E4%B8%AA%E7%9B%AE%E6%A0%87....html" rel="alternate"></link><published>2018-01-11T00:00:00+08:00</published><updated>2018-01-11T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-01-11:/我要给自己订个目标....html</id><summary type="html">&lt;p&gt;
我要给自己订个目标，不让自己再这么随波逐流，走到哪儿算哪，好想走到哪儿算哪也不是很坏的方式，比如有一些认识的人就是跟着命走，也会很成功。那么还是这样，这两点一定不会是冲突的。
&lt;/p&gt;

&lt;p&gt;
给自己订个目标，比如：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;35岁之前有自己的事业
&lt;/li&gt;
&lt;li&gt;35岁之前赚够多少钱
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
一上来这么大的目标？搞一些小目标好不好？
&lt;/p&gt;

&lt;p&gt;
还有方向的问题，目前看到的方向有这些：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;人工智能，我觉得我在这方面还有有兴趣的，以前自己也思考过，如果几年前我就搞这些 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
我要给自己订个目标，不让自己再这么随波逐流，走到哪儿算哪，好想走到哪儿算哪也不是很坏的方式，比如有一些认识的人就是跟着命走，也会很成功。那么还是这样，这两点一定不会是冲突的。
&lt;/p&gt;

&lt;p&gt;
给自己订个目标，比如：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;35岁之前有自己的事业
&lt;/li&gt;
&lt;li&gt;35岁之前赚够多少钱
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
一上来这么大的目标？搞一些小目标好不好？
&lt;/p&gt;

&lt;p&gt;
还有方向的问题，目前看到的方向有这些：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;人工智能，我觉得我在这方面还有有兴趣的，以前自己也思考过，如果几年前我就搞这些，可能现在还能挺好的
&lt;/li&gt;
&lt;li&gt;区块链，摆在眼前就有机会
&lt;/li&gt;
&lt;li&gt;发现用户痛点，做些小产品
&lt;/li&gt;
&lt;li&gt;继续当前的职业生涯
&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Beyond Compare 4.2.3激活</title><link href="http://www.iknockdoor.com/Beyond%20Compare%204.2.3%E6%BF%80%E6%B4%BB.html" rel="alternate"></link><published>2018-01-06T00:00:00+08:00</published><updated>2018-01-06T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-01-06:/Beyond Compare 4.2.3激活.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. Beyond Compare 4.2.3 (Build 22587)&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 官方app和中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-45EF9D15-80D8-46A6-B0DA-21ABB3DB558E" name="ID-45EF9D15-80D8-46A6-B0DA-21ABB3DB558E"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Beyond Compare 4.2.3 …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. Beyond Compare 4.2.3 (Build 22587)&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 官方app和中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-45EF9D15-80D8-46A6-B0DA-21ABB3DB558E" name="ID-45EF9D15-80D8-46A6-B0DA-21ABB3DB558E"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Beyond Compare 4.2.3 (Build 22587)&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
原文在&lt;a href="https://gist.github.com/huqi/35f2a0792aef830898ca"&gt;这里&lt;/a&gt; 
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Open trial.key at path: /Applications/Beyond\ Compare.app/Contents/Resources/trial.key
&lt;/li&gt;
&lt;li&gt;Replace content of trial.key with:
&lt;pre class="example"&gt;
--- BEGIN LICENSE KEY ---
H1bJTd2SauPv5Garuaq0Ig43uqq5NJOEw94wxdZTpU-pFB9GmyPk677gJ
vC1Ro6sbAvKR4pVwtxdCfuoZDb6hJ5bVQKqlfihJfSYZt-xVrVU27+0Ja
hFbqTmYskatMTgPyjvv99CF2Te8ec+Ys2SPxyZAF0YwOCNOWmsyqN5y9t
q2Kw2pjoiDs5gIH-uw5U49JzOB6otS7kThBJE-H9A76u4uUvR8DKb+VcB
rWu5qSJGEnbsXNfJdq5L2D8QgRdV-sXHp2A-7j1X2n4WIISvU1V9koIyS
NisHFBTcWJS0sC5BTFwrtfLEE9lEwz2bxHQpWJiu12ZeKpi+7oUSqebX+
--- END LICENSE KEY -----
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Save trial.key file &amp;amp; restart Beyond Compare app
&lt;/li&gt;
&lt;li&gt;Enjoy!
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 官方app和中文翻译&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="data/45/EF9D15-80D8-46A6-B0DA-21ABB3DB558E/BCompareOSX-4.2.3.22587.zip"&gt;BCompareOSX-4.2.3.22587.zip&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="data/45/EF9D15-80D8-46A6-B0DA-21ABB3DB558E/BCompareOSX-zh-4.2.3.22587.zip"&gt;BCompareOSX-zh-4.2.3.22587.zip&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>org导出attachments</title><link href="http://www.iknockdoor.com/org%E5%AF%BC%E5%87%BAattachments.html" rel="alternate"></link><published>2018-01-06T00:00:00+08:00</published><updated>2018-01-06T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-01-06:/org导出attachments.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 添加附件attachments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 添加链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 添加附件attachments&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;pre class="example"&gt;
C-c C-a
&lt;/pre&gt;
&lt;p&gt;
然后会有选项，可以是copy或者move或者link文件，然后默认放在data目录。添加附件后会有一个个属性记录附件ID信息，但这个时候在导出成hmtl时并不会有附件的链接，需要自己手动添加一个附件的链接。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 添加链接&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;pre class="example"&gt;
C-C …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 添加附件attachments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 添加链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 添加附件attachments&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;pre class="example"&gt;
C-c C-a
&lt;/pre&gt;
&lt;p&gt;
然后会有选项，可以是copy或者move或者link文件，然后默认放在data目录。添加附件后会有一个个属性记录附件ID信息，但这个时候在导出成hmtl时并不会有附件的链接，需要自己手动添加一个附件的链接。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 添加链接&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;pre class="example"&gt;
C-C C-l
&lt;/pre&gt;
&lt;p&gt;
选择file: 回车会自动让指定文件目录，根据上面属性信息选择文件，导出成
html即可指向附件并提供下载。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>org-mode中agenda的简单使用</title><link href="http://www.iknockdoor.com/org-mode%E4%B8%ADagenda%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html" rel="alternate"></link><published>2018-01-04T00:00:00+08:00</published><updated>2018-01-04T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2018-01-04:/org-mode中agenda的简单使用.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. agenda视图中的常用操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 在org mode中从日历中快速选择自己想要的日期&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. 在弹出的calendar中快速选择日期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; agenda视图中的常用操作&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;t 更新todo项的状态，agenda视图中直接更新不需要打开源文件，很强大
&lt;/li&gt;
&lt;li&gt;w 周视图
&lt;/li&gt;
&lt;li&gt;d …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. agenda视图中的常用操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 在org mode中从日历中快速选择自己想要的日期&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. 在弹出的calendar中快速选择日期&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; agenda视图中的常用操作&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;t 更新todo项的状态，agenda视图中直接更新不需要打开源文件，很强大
&lt;/li&gt;
&lt;li&gt;w 周视图
&lt;/li&gt;
&lt;li&gt;d 日视图，可以用来看今天做了些什么事，还有哪些事儿要做
&lt;/li&gt;
&lt;li&gt;f 下一个周期，根据当前是周视图还是日视图步长不同
&lt;/li&gt;
&lt;li&gt;b 上一个周期，同上，可以用来看上周都做了些什么事
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 在org mode中从日历中快速选择自己想要的日期&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
目前需要输入日期的场景：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;capture的todo项，指定计划日期或者deadline之后会能够出现agenda view
中，方便查看工作计划和查看这周做了哪些工作。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; 在弹出的calendar中快速选择日期&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;直接输入日，会自动选择距离当前最近那个日，比如今天是1月4日，如果输入10，就会是1月10日，如果输入1，就会是2月1日
&lt;/li&gt;
&lt;li&gt;输入差值
&lt;ul class="org-ul"&gt;
&lt;li&gt;+1
下一天
&lt;/li&gt;
&lt;li&gt;+2w
下两周
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快捷键选择日期
&lt;ul class="org-ul"&gt;
&lt;li&gt;RET 选择当前日期
&lt;/li&gt;
&lt;li&gt;S-right/left 下一天／前一天
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>mac office 2016激活</title><link href="http://www.iknockdoor.com/mac%20office%202016%E6%BF%80%E6%B4%BB.html" rel="alternate"></link><published>2017-12-29T00:00:00+08:00</published><updated>2017-12-29T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-29:/mac office 2016激活.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 下载官方原版microsoft office 2016 mac版并安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 下载激活程序并运行&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
office 2016版本支持retina屏幕，安装激活方法如下：
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 下载官方原版microsoft office 2016 mac版并安装&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;a href="https://officecdn-microsoft-com.akamaized.net/pr/C1297A47-86C4-4C1F-97FA-950631F94777/OfficeMac/Microsoft_Office_2016_15.38.17090200_Installer.pkg"&gt;https …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 下载官方原版microsoft office 2016 mac版并安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 下载激活程序并运行&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
office 2016版本支持retina屏幕，安装激活方法如下：
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 下载官方原版microsoft office 2016 mac版并安装&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;a href="https://officecdn-microsoft-com.akamaized.net/pr/C1297A47-86C4-4C1F-97FA-950631F94777/OfficeMac/Microsoft_Office_2016_15.38.17090200_Installer.pkg"&gt;https://officecdn-microsoft-com.akamaized.net/pr/C1297A47-86C4-4C1F-97FA-950631F94777/OfficeMac/Microsoft_Office_2016_15.38.17090200_Installer.pkg&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;a id="ID-72FBD493-A1EF-4732-904C-36ACE24ABDFF" name="ID-72FBD493-A1EF-4732-904C-36ACE24ABDFF"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 下载激活程序并运行&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;a href="data/72/FBD493-A1EF-4732-904C-36ACE24ABDFF/microsoft%20office%20setup%20assistant.app.zip"&gt;microsoft office setup assistant.app.zip&lt;/a&gt;
以上内容为网上收集。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>mac通过homebrew安装imagemagick新老版本</title><link href="http://www.iknockdoor.com/mac%E9%80%9A%E8%BF%87homebrew%E5%AE%89%E8%A3%85imagemagick%E6%96%B0%E8%80%81%E7%89%88%E6%9C%AC.html" rel="alternate"></link><published>2017-12-29T00:00:00+08:00</published><updated>2017-12-29T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-29:/mac通过homebrew安装imagemagick新老版本.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 版本信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 安装command line tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 安装brew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 安装imagemagick 6.9.7-10&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
emacs支持显示嵌入式的显示图片并能够调整图片大小需要在编译期间指定
imagemagick的支持，但emacs …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 版本信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 安装command line tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 安装brew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 安装imagemagick 6.9.7-10&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
emacs支持显示嵌入式的显示图片并能够调整图片大小需要在编译期间指定
imagemagick的支持，但emacs 25.3的编译只能够识别imagemagick的6.x版本，无法识别7.x版本，使用brew在mac系统上安装imagemagic的老版本算是比较方便了，下面是安装方法。
&lt;/p&gt;


&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 版本信息&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Mac OS X 10.12.6 (16G29) Sierra
Emacs 25.3
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 安装command line tool&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;pre class="example"&gt;
xcode-select --install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 安装brew&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;pre class="example"&gt;
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;a id="ID-B0BEE131-FC9B-4506-BB02-6AE1BFC5E2F5" name="ID-B0BEE131-FC9B-4506-BB02-6AE1BFC5E2F5"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 安装imagemagick 6.9.7-10&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
原地址在&lt;a href="https://gist.github.com/leesheppard/69a283ee4af484e2029809a0f5e09932"&gt;这里&lt;/a&gt; ，brew的安装脚本如下，brew在安装时会去imagemagick的官网上下载源文件并交验hash值，为了避免对应版本下线，我把源文件做了备份。
&lt;a href="data/B0/BEE131-FC9B-4506-BB02-6AE1BFC5E2F5/ImageMagick-6.9.7-10.tar.xz"&gt;ImageMagick-6.9.7-10.tar.xz&lt;/a&gt;
&lt;/p&gt;
&lt;pre class="example"&gt;
brew install https://gist.githubusercontent.com/leesheppard/69a283ee4af484e2029809a0f5e09932/raw/88bc116b515a456a2e1bad476b6124d28ce2f6f6/imagemagick.rb
brew pin imagemagick # 避免被版本被升级，可以固定这个版本
&lt;/pre&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-ruby"&gt;&lt;span class="org-builtin"&gt;require&lt;/span&gt; &lt;span class="org-string"&gt;'formula'&lt;/span&gt;

&lt;span class="org-keyword"&gt;class&lt;/span&gt; &lt;span class="org-type"&gt;Imagemagick&lt;/span&gt; &amp;lt; &lt;span class="org-type"&gt;Formula&lt;/span&gt;
  homepage &lt;span class="org-string"&gt;'http://www.imagemagick.org'&lt;/span&gt;

  url &lt;span class="org-string"&gt;'http://www.imagemagick.org/download/releases/ImageMagick-6.9.7-10.tar.xz'&lt;/span&gt;
  sha256 &lt;span class="org-string"&gt;'0bfb2e3459b739669845c20ee1b6014a1a3c429fb0cb9777a8b65cd5c3effb09'&lt;/span&gt;

  head &lt;span class="org-string"&gt;'https://www.imagemagick.org/subversion/ImageMagick/trunk'&lt;/span&gt;,
    &lt;span class="org-constant"&gt;:using&lt;/span&gt; =&amp;gt; &lt;span class="org-type"&gt;UnsafeSubversionDownloadStrategy&lt;/span&gt;

  option &lt;span class="org-string"&gt;'with-quantum-depth-8'&lt;/span&gt;, &lt;span class="org-string"&gt;'Compile with a quantum depth of 8 bit'&lt;/span&gt;
  option &lt;span class="org-string"&gt;'with-quantum-depth-16'&lt;/span&gt;, &lt;span class="org-string"&gt;'Compile with a quantum depth of 16 bit'&lt;/span&gt;
  option &lt;span class="org-string"&gt;'with-quantum-depth-32'&lt;/span&gt;, &lt;span class="org-string"&gt;'Compile with a quantum depth of 32 bit'&lt;/span&gt;
  option &lt;span class="org-string"&gt;'with-perl'&lt;/span&gt;, &lt;span class="org-string"&gt;'enable build/install of PerlMagick'&lt;/span&gt;
  option &lt;span class="org-string"&gt;'without-magick-plus-plus'&lt;/span&gt;, &lt;span class="org-string"&gt;'disable build/install of Magick++'&lt;/span&gt;

  depends_on &lt;span class="org-string"&gt;"libtool"&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:run&lt;/span&gt;

  depends_on &lt;span class="org-string"&gt;'pkg-config'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:build&lt;/span&gt;

  depends_on &lt;span class="org-string"&gt;'jpeg'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:recommended&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'libpng'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:recommended&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'freetype'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:recommended&lt;/span&gt;

  depends_on &lt;span class="org-constant"&gt;:x11&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'fontconfig'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'libtiff'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'little-cms'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'little-cms2'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'jasper'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'libwmf'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'librsvg'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'liblqr'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'openexr'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'ghostscript'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;
  depends_on &lt;span class="org-string"&gt;'webp'&lt;/span&gt; =&amp;gt; &lt;span class="org-constant"&gt;:optional&lt;/span&gt;

  opoo &lt;span class="org-string"&gt;'--with-ghostscript is not recommended'&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.with? &lt;span class="org-string"&gt;'ghostscript'&lt;/span&gt;

  skip_clean &lt;span class="org-constant"&gt;:la&lt;/span&gt;

  &lt;span class="org-keyword"&gt;def&lt;/span&gt; &lt;span class="org-function-name"&gt;install&lt;/span&gt;
    args = [ &lt;span class="org-string"&gt;"--disable-osx-universal-binary"&lt;/span&gt;,
             &lt;span class="org-string"&gt;"--prefix=&lt;/span&gt;&lt;span class="org-variable-name"&gt;#{prefix}&lt;/span&gt;&lt;span class="org-string"&gt;"&lt;/span&gt;,
             &lt;span class="org-string"&gt;"--disable-dependency-tracking"&lt;/span&gt;,
             &lt;span class="org-string"&gt;"--enable-shared"&lt;/span&gt;,
             &lt;span class="org-string"&gt;"--disable-static"&lt;/span&gt;,
             &lt;span class="org-string"&gt;"--without-pango"&lt;/span&gt;,
             &lt;span class="org-string"&gt;"--with-modules"&lt;/span&gt;,
             &lt;span class="org-string"&gt;"--disable-openmp"&lt;/span&gt;]

    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--disable-opencl"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.include? &lt;span class="org-string"&gt;'disable-opencl'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--without-gslib"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.without? &lt;span class="org-string"&gt;'ghostscript'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--without-perl"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.without? &lt;span class="org-string"&gt;'perl'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--with-gs-font-dir=&lt;/span&gt;&lt;span class="org-variable-name"&gt;#{HOMEBREW_PREFIX}&lt;/span&gt;&lt;span class="org-string"&gt;/share/ghostscript/fonts"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.without? &lt;span class="org-string"&gt;'ghostscript'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--without-magick-plus-plus"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.without? &lt;span class="org-string"&gt;'magick-plus-plus'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--enable-hdri=yes"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.include? &lt;span class="org-string"&gt;'enable-hdri'&lt;/span&gt;

    &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.with? &lt;span class="org-string"&gt;'quantum-depth-32'&lt;/span&gt;
      quantum_depth = 32
    &lt;span class="org-keyword"&gt;elsif&lt;/span&gt; build.with? &lt;span class="org-string"&gt;'quantum-depth-16'&lt;/span&gt;
      quantum_depth = 16
    &lt;span class="org-keyword"&gt;elsif&lt;/span&gt; build.with? &lt;span class="org-string"&gt;'quantum-depth-8'&lt;/span&gt;
      quantum_depth = 8
    &lt;span class="org-keyword"&gt;end&lt;/span&gt;

    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--with-quantum-depth=&lt;/span&gt;&lt;span class="org-variable-name"&gt;#{quantum_depth}&lt;/span&gt;&lt;span class="org-string"&gt;"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; quantum_depth
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--with-rsvg"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.with? &lt;span class="org-string"&gt;'librsvg'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--without-x"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.without? &lt;span class="org-string"&gt;'x11'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--with-fontconfig=yes"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.with? &lt;span class="org-string"&gt;'fontconfig'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--with-freetype=yes"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.with? &lt;span class="org-string"&gt;'freetype'&lt;/span&gt;
    args &amp;lt;&amp;lt; &lt;span class="org-string"&gt;"--with-webp=yes"&lt;/span&gt; &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.include? &lt;span class="org-string"&gt;'webp'&lt;/span&gt;

    &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;versioned stuff in main tree is pointless for us&lt;/span&gt;
    inreplace &lt;span class="org-string"&gt;'configure'&lt;/span&gt;, &lt;span class="org-string"&gt;'${PACKAGE_NAME}-${PACKAGE_VERSION}'&lt;/span&gt;, &lt;span class="org-string"&gt;'${PACKAGE_NAME}'&lt;/span&gt;
    &lt;span class="org-builtin"&gt;system&lt;/span&gt; &lt;span class="org-string"&gt;"./configure"&lt;/span&gt;, *args
    &lt;span class="org-builtin"&gt;system&lt;/span&gt; &lt;span class="org-string"&gt;"make install"&lt;/span&gt;
  &lt;span class="org-keyword"&gt;end&lt;/span&gt;

  &lt;span class="org-keyword"&gt;def&lt;/span&gt; &lt;span class="org-function-name"&gt;caveats&lt;/span&gt;
    s = &lt;span class="org-string"&gt;&amp;lt;&amp;lt;-EOS&lt;/span&gt;.undent
&lt;span class="org-string"&gt;      For full Perl support you must install the Image::Magick module from the CPAN.&lt;/span&gt;
&lt;span class="org-string"&gt;        https://metacpan.org/module/Image::Magick&lt;/span&gt;

&lt;span class="org-string"&gt;      The version of the Perl module and ImageMagick itself need to be kept in sync.&lt;/span&gt;
&lt;span class="org-string"&gt;      If you upgrade one, you must upgrade the other.&lt;/span&gt;

&lt;span class="org-string"&gt;      For this version of ImageMagick you should install&lt;/span&gt;
&lt;span class="org-string"&gt;      version &lt;/span&gt;&lt;span class="org-variable-name"&gt;#{version}&lt;/span&gt;&lt;span class="org-string"&gt; of the Image::Magick Perl module.&lt;/span&gt;
&lt;span class="org-string"&gt;    EOS&lt;/span&gt;
    s &lt;span class="org-keyword"&gt;if&lt;/span&gt; build.with? &lt;span class="org-string"&gt;'perl'&lt;/span&gt;
  &lt;span class="org-keyword"&gt;end&lt;/span&gt;

  test &lt;span class="org-keyword"&gt;do&lt;/span&gt;
    &lt;span class="org-builtin"&gt;system&lt;/span&gt; &lt;span class="org-string"&gt;"&lt;/span&gt;&lt;span class="org-variable-name"&gt;#{bin}&lt;/span&gt;&lt;span class="org-string"&gt;/identify"&lt;/span&gt;, &lt;span class="org-string"&gt;"/usr/share/doc/cups/images/cups.png"&lt;/span&gt;
  &lt;span class="org-keyword"&gt;end&lt;/span&gt;
&lt;span class="org-keyword"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果要支持PDF转image，还需安装依赖库gs
&lt;/p&gt;
&lt;pre class="example"&gt;
brew install ghostscript
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>你听到的即使是合理的也未必是真的</title><link href="http://www.iknockdoor.com/%E4%BD%A0%E5%90%AC%E5%88%B0%E7%9A%84%E5%8D%B3%E4%BD%BF%E6%98%AF%E5%90%88%E7%90%86%E7%9A%84%E4%B9%9F%E6%9C%AA%E5%BF%85%E6%98%AF%E7%9C%9F%E7%9A%84.html" rel="alternate"></link><published>2017-12-28T00:00:00+08:00</published><updated>2017-12-28T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-28:/你听到的即使是合理的也未必是真的.html</id><summary type="html">&lt;p&gt;
你看到的，别人跟你讲的，即使看起来是合理的也未必是真是的，一个结果摆在眼前，最终形成这种结果的方式有万万种，事实可能是其中的一种，跟你讲的可能是别人期望的一种，未验证过的一种。有很多这样的例子，比如某一个产品的成功，在没有成功前大家可能并未关注，当他成功后老板在公开场所或者媒体上讲述他们的成功史或者成功秘诀，这个讲出来的就未必是真实的了，背后可能会有其他目的了。所以，很多成功学，励志书，鸡汤文，真是鸡汤，想调整下心态就看看 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
你看到的，别人跟你讲的，即使看起来是合理的也未必是真是的，一个结果摆在眼前，最终形成这种结果的方式有万万种，事实可能是其中的一种，跟你讲的可能是别人期望的一种，未验证过的一种。有很多这样的例子，比如某一个产品的成功，在没有成功前大家可能并未关注，当他成功后老板在公开场所或者媒体上讲述他们的成功史或者成功秘诀，这个讲出来的就未必是真实的了，背后可能会有其他目的了。所以，很多成功学，励志书，鸡汤文，真是鸡汤，想调整下心态就看看，干货还需自己探索，理性思考，敏感洞察。
&lt;/p&gt;
</content></entry><entry><title>原则</title><link href="http://www.iknockdoor.com/%E5%8E%9F%E5%88%99.html" rel="alternate"></link><published>2017-12-28T00:00:00+08:00</published><updated>2017-12-28T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-28:/原则.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 原则&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 坚守原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 爱自己&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3"&gt;1.3. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 爱家人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-4"&gt;1.4. &lt;span class="todo TODO"&gt;TODO …&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 原则&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 坚守原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 爱自己&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3"&gt;1.3. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 爱家人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-4"&gt;1.4. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 爱他人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-5"&gt;1.5. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 真诚&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-6"&gt;1.6. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 信用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
原则总是问问自己应该如何做人，做一个什么样的人，一直以来没有一个满意的答案。从高中的时候开始慢慢形成人生观价值观的时候，就开始考虑应该如何做人，似乎也是从那个时候起开始信奉绝对自由，说白了，就是想无拘无束，不喜欢任何的束缚，老师说并不存在绝对自由，现在我信了，不是不存在，而是不应该。人要对自己有约束，因为约束是管理自我，任何事物需要在合理的管理之下才能健康发展，绝对自由与放任劣根性是一样的。自我约束，自我管理是对自己的负责和爱。
&lt;/p&gt;

&lt;p&gt;
于是，给自己一些原则约束自己，在这样约束下自己就是我，我就是这样的一些约束，这样的一些原则。
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 原则&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
给自己定一些原则，这些原则形成了自己的人格。没事常看，要做到。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 坚守原则&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
第一条原则就是要坚守原则，首先要有可以坚守原则，如果不能坚守原则，那么剩下的原则就没有任何意义了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 爱自己&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
不爱自己怎么爱别人。不爱自己怎么对自己负责。什么是爱自己？我的理解就是对自己负责，对自己的身体，对自己的人生，对自己的感受，对自己的感情。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 个人卫生和形象
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 强健体魄
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 个人知识修养
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 个人行为修养
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 不醉酒，可以喝酒，但不能喝多喝醉
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 爱家人&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 陪家人过重要的节日
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 记住家人重要的节日，生日这些，给他们准备礼物
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;&lt;span class="section-number-3"&gt;1.4&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 爱他人&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
他人是羁绊，是人生的经历，人生的财富。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-5" class="outline-3"&gt;
&lt;h3 id="sec-1-5"&gt;&lt;span class="section-number-3"&gt;1.5&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 真诚&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-6" class="outline-3"&gt;
&lt;h3 id="sec-1-6"&gt;&lt;span class="section-number-3"&gt;1.6&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 信用&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>做一名研发leader还是做一个名工程师</title><link href="http://www.iknockdoor.com/%E5%81%9A%E4%B8%80%E5%90%8D%E7%A0%94%E5%8F%91lead....html" rel="alternate"></link><published>2017-12-25T00:00:00+08:00</published><updated>2017-12-25T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-25:/做一名研发lead....html</id><summary type="html">&lt;p&gt;
做一名研发leader还是做一个名工程师或者能够找到不冲突的方式？肯定是有的，我要想办法，人应该是关键，搭班子，建队伍。
&lt;/p&gt;
</summary><content type="html">&lt;p&gt;
做一名研发leader还是做一个名工程师或者能够找到不冲突的方式？肯定是有的，我要想办法，人应该是关键，搭班子，建队伍。
&lt;/p&gt;
</content></entry><entry><title>做了一项针对产品的技术调研然后被领导批得狗血淋头</title><link href="http://www.iknockdoor.com/%E5%81%9A%E4%BA%86%E4%B8%80%E9%A1%B9%E9%92%88%E5%AF%B9%E4%BA%A7%E5%93%81%E7%9A%84....html" rel="alternate"></link><published>2017-12-25T00:00:00+08:00</published><updated>2017-12-25T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-25:/做了一项针对产品的....html</id><summary type="html">&lt;p&gt;
做了一项针对产品的技术调研，然后被领导批得狗血淋头，还要赔礼道歉，承认自己的局限性，没有给其他团队提需求。
&lt;/p&gt;

&lt;p&gt;
整个这个事情最后想下来，不知道这种现象对于一家公司或是一家企业到底是好的还是不好的。跳出来看，像是出现了行业寡头，对技术进行了垄断，只能这个寡头做，别人都不能做，其他人都只能用寡头垄断的技术，不能自己做调研，不能自己做优化，有定制化的需求只能提需求给他们，对你需求的支持力度，响应速度好与不好你都得接受。
&lt;/p&gt;

&lt;p&gt;
这样可能会限制技术百家争鸣的发展，新技术的出现 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
做了一项针对产品的技术调研，然后被领导批得狗血淋头，还要赔礼道歉，承认自己的局限性，没有给其他团队提需求。
&lt;/p&gt;

&lt;p&gt;
整个这个事情最后想下来，不知道这种现象对于一家公司或是一家企业到底是好的还是不好的。跳出来看，像是出现了行业寡头，对技术进行了垄断，只能这个寡头做，别人都不能做，其他人都只能用寡头垄断的技术，不能自己做调研，不能自己做优化，有定制化的需求只能提需求给他们，对你需求的支持力度，响应速度好与不好你都得接受。
&lt;/p&gt;

&lt;p&gt;
这样可能会限制技术百家争鸣的发展，新技术的出现，和技术的进步，毕竟当形成了垄断，内耗便会加剧。
&lt;/p&gt;

&lt;p&gt;
同时由于只能跨部门的使用技术，和业务可能会出现脱节，业务团队和技术团队的沟通成本变高，技术团队反而成为了累赘。
&lt;/p&gt;

&lt;p&gt;
如此可能并不是一个好的现象。
&lt;/p&gt;
</content></entry><entry><title>向前走的太快</title><link href="http://www.iknockdoor.com/%E5%90%91%E5%89%8D%E8%B5%B0%E7%9A%84%E5%A4%AA%E5%BF%AB%EF%BC%8C%E6%83%B3%E5%9B%9E....html" rel="alternate"></link><published>2017-12-25T00:00:00+08:00</published><updated>2017-12-25T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-25:/向前走的太快，想回....html</id><summary type="html">&lt;p&gt;
向前走的太快，想回头看看，看看路上的风景，看看路上的人。感觉像是没有了根，想去找寻自己的根，或者是信仰么？总是不想给自己的打上标签，标签跟根和信仰好想并不是一样的。要接受自己的过去，总是厌恶自己的过去，总是想有新的开始，于是每次都没了根。是自己都不喜欢自己这样的人，那就面对，那就改正。说到底，做人还是要有原则，要对自己有约束，不要太出世 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
向前走的太快，想回头看看，看看路上的风景，看看路上的人。感觉像是没有了根，想去找寻自己的根，或者是信仰么？总是不想给自己的打上标签，标签跟根和信仰好想并不是一样的。要接受自己的过去，总是厌恶自己的过去，总是想有新的开始，于是每次都没了根。是自己都不喜欢自己这样的人，那就面对，那就改正。说到底，做人还是要有原则，要对自己有约束，不要太出世，要有羁绊，要回头找回的就是这些羁绊，这些牵挂。因为有原则，有所为有所不为，于是不再厌恶自己，而是爱自己，不再常常需要新的开始，从头再来，而是开始有根，有过去。
&lt;/p&gt;

&lt;p&gt;
总是相当自由人，不想给自己贴标签，不喜欢束缚。
&lt;/p&gt;
</content></entry><entry><title>重新考虑笔记系统</title><link href="http://www.iknockdoor.com/%E9%87%8D%E6%96%B0%E8%80%83%E8%99%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F.html" rel="alternate"></link><published>2017-12-24T00:00:00+08:00</published><updated>2017-12-24T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-24:/重新考虑笔记系统.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 一些功能点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 笔记系统是什么样子的才可以助力保持写笔记的习惯？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. 专注于笔记的内容，不打断写笔记的灵感&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 要做的事情&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-3-1"&gt;3.1. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 本地整个项目导出html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-2"&gt;3.2. &lt;span class="todo TODO"&gt;TODO …&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 一些功能点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 笔记系统是什么样子的才可以助力保持写笔记的习惯？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. 专注于笔记的内容，不打断写笔记的灵感&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 要做的事情&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-3-1"&gt;3.1. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 本地整个项目导出html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-2"&gt;3.2. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; push到github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-3"&gt;3.3. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 调整样式，同时适合台式机和移动设备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-4"&gt;3.4. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 支持图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-5"&gt;3.5. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 支持uml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-6"&gt;3.6. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 支持mathjax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-7"&gt;3.7. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 整个站点排版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-8"&gt;3.8. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; RSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-9"&gt;3.9. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; google custom search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-10"&gt;3.10. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; google baidu统计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-11"&gt;3.11. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 文章模版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3-12"&gt;3.12. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 首页怎么搞？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 怎么做？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-4-1"&gt;4.1. 第一个版本&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-4-1-1"&gt;4.1.1. todo list&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4-2"&gt;4.2. 静态站点生成&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-4-2-1"&gt;4.2.1. 最简单的生成配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4-2-2"&gt;4.2.2. sitemap的生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4-2-3"&gt;4.2.3. 默认模版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
重新考虑笔记系统
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 一些功能点&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;静态网页生成器
&lt;/li&gt;
&lt;li&gt;图片的处理
&lt;/li&gt;
&lt;li&gt;如何部署
&lt;/li&gt;
&lt;li&gt;UML的支持
&lt;/li&gt;
&lt;li&gt;自定义样式
&lt;/li&gt;
&lt;li&gt;网页布局与风格
&lt;/li&gt;
&lt;li&gt;MathJax
&lt;/li&gt;
&lt;li&gt;RSS
&lt;/li&gt;
&lt;li&gt;版本管理
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 笔记系统是什么样子的才可以助力保持写笔记的习惯？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; 专注于笔记的内容，不打断写笔记的灵感&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;不要必须写个标题，考虑写个什么标题会打断思路和灵感。保存文件时如果没有标题自动截取开头文字作为标题就好
&lt;/li&gt;
&lt;li&gt;不要写什么元信息，比如作者，标签，URL这些，也会打断思路，URL随机就好，跟标题分离，标题没事可能会改，URL随机字符串，生成之后可以固定
&lt;/li&gt;
&lt;li&gt;要方便分类和全文搜索
&lt;/li&gt;
&lt;li&gt;有的时候分目录也挺蛋疼，如果写一个文件前还需要考虑应该放在哪个目录，也会被打断，所有有个按时间的归档就好，一个月也写不了那么多，按月归档就好
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 要做的事情&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;&lt;span class="section-number-3"&gt;3.1&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 本地整个项目导出html&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
最基本的导出static html的功能使用org-mode自带的就好，文档丰富，越简单越好，事情搞复杂了就偏离了他重在写内容看内容的本质上。
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;是否支持多级目录的org文件扫描？其实并不需要关心生成html的目录情况，原文件的才重要。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;&lt;span class="section-number-3"&gt;3.2&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; push到github&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-3" class="outline-3"&gt;
&lt;h3 id="sec-3-3"&gt;&lt;span class="section-number-3"&gt;3.3&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 调整样式，同时适合台式机和移动设备&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-4" class="outline-3"&gt;
&lt;h3 id="sec-3-4"&gt;&lt;span class="section-number-3"&gt;3.4&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 支持图片&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-4"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;图片如何组织？考虑用attachment
&lt;/li&gt;
&lt;li&gt;支持从剪切板粘贴图片进来
&lt;/li&gt;
&lt;li&gt;支持拖拽图片进来
&lt;/li&gt;
&lt;li&gt;支持控制图片大小，位置，浮动效果
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-5" class="outline-3"&gt;
&lt;h3 id="sec-3-5"&gt;&lt;span class="section-number-3"&gt;3.5&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 支持uml&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-6" class="outline-3"&gt;
&lt;h3 id="sec-3-6"&gt;&lt;span class="section-number-3"&gt;3.6&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 支持mathjax&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-7" class="outline-3"&gt;
&lt;h3 id="sec-3-7"&gt;&lt;span class="section-number-3"&gt;3.7&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 整个站点排版&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-7"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;首页，文章列表+简单截取部分内容
&lt;/li&gt;
&lt;li&gt;另外是侧边栏，导航还是需要的，两部分，按日期的归档和按tag的输出，包含最近内容.侧边栏的内容可以用index来做，可以实现按日期归档，日期可以自动生成，这样就可以实现自动归档了。
&lt;/li&gt;
&lt;li&gt;头部导航也是需要的，但可以做的尽量低调，重点在内容，导航有就可以了。
&lt;/li&gt;
&lt;li&gt;底部版权信息，闭环回流
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-8" class="outline-3"&gt;
&lt;h3 id="sec-3-8"&gt;&lt;span class="section-number-3"&gt;3.8&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; RSS&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-9" class="outline-3"&gt;
&lt;h3 id="sec-3-9"&gt;&lt;span class="section-number-3"&gt;3.9&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; google custom search&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-10" class="outline-3"&gt;
&lt;h3 id="sec-3-10"&gt;&lt;span class="section-number-3"&gt;3.10&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; google baidu统计&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-11" class="outline-3"&gt;
&lt;h3 id="sec-3-11"&gt;&lt;span class="section-number-3"&gt;3.11&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 文章模版&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-11"&gt;
&lt;p&gt;
文章标题，作者，日期啥的，不用每次都按一定的格式写，最好可以做到自动。标题有就有，没有就截取前面部分内容就好
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3-12" class="outline-3"&gt;
&lt;h3 id="sec-3-12"&gt;&lt;span class="section-number-3"&gt;3.12&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 首页怎么搞？&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-12"&gt;
&lt;p&gt;
如果使用sitemap后面可能会变得比较大，是否考虑分页？真心不用搞得太麻烦，看其他的站点，比如干货杂货铺，都好几年了也没多大，就用sitemap就好。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 怎么做？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-4-1" class="outline-3"&gt;
&lt;h3 id="sec-4-1"&gt;&lt;span class="section-number-3"&gt;4.1&lt;/span&gt; 第一个版本&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;p&gt;
第一个版本计划最一个很简单的。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;首页就是sitemap按时间倒序排序
&lt;/li&gt;
&lt;li&gt;每个页面包含头部导航
&lt;/li&gt;
&lt;li&gt;头部导航包含首页，关于，RSS，联系方式
&lt;/li&gt;
&lt;li&gt;文章页面只包含头部导航和底部版权信息，及一些文章的信息
&lt;/li&gt;
&lt;li&gt;处理一下css
&lt;/li&gt;
&lt;li&gt;增加百度，google统计
&lt;/li&gt;
&lt;li&gt;文件名用前段内容截取
&lt;/li&gt;
&lt;li&gt;应该做到写笔记的适合不需要考虑任何事情，不用加什么乱七八糟的头部，不用考虑文件名，URL这些
&lt;/li&gt;
&lt;li&gt;支持图片拖拽，截屏
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-1-1" class="outline-4"&gt;
&lt;h4 id="sec-4-1-1"&gt;&lt;a id="ID-D4D6B9BB-C7C3-4B8F-869D-6C7B5DD071CF" name="ID-D4D6B9BB-C7C3-4B8F-869D-6C7B5DD071CF"&gt;&lt;/a&gt;&lt;span class="section-number-4"&gt;4.1.1&lt;/span&gt; todo list&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-4-1-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 环境搭建确认emacs,org版本号
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 搞清楚头部那些导出参数有啥用，如果有用就设置一个模版看了下，只是控制输出html的meta-data，作用并不大，可能对seo优化用，前期可以先不用了
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-]&lt;/code&gt; 配好首页，和导航和底部以及导出的html内容以下主要看org官方文档和自带的帮助文件即可设置，自带的帮助文件比较重要，要仔细看，不同版本差异可能会较大。
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 头部导航搞定可以用自带的后home，up样式的订制，也可用html-preamble，这里我用自带做定义，重新定义org-html-home/up-format
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 导出源码文件内容控制
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 底部内容设置html-postamble即可
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 文章时间应该有两个，一个是创建时间，一个是最后修改时间，如果都能取git的时间就好了.可以参考&lt;a href="https://wpc.io/blog/posts/blogging-with-org-mode.html"&gt;这篇&lt;/a&gt; 文章，看下如何获取git时间。
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-bash"&gt;# 获取文件或路径最新提交的时间
git log -1 --format=%ci path
# 获取文件或路径首次提交的时间
git log --reverse --pretty=oneline --format=%ci  path| head -1
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
用命令行的方式可以获取到，重写org-publish-find-date函数可以替换sitemap获取时间戳的方式，遇到了些困难，.git目录也会被获取.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 处理文件名和URL
org生成的文件名如果没有用title指定，默认就是文件名，因此只需要处理文件名就可以了，源文件和生成文件也可以保持统一 
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; URL就用文件名就好
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 文件名取首行或者前部分内容文件重命名部分参考&lt;a href="https://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs"&gt;这里&lt;/a&gt; 其他获取首行自己写的，感觉还不错.按键绑定也取代了系统的另存为，用了C-x C-w
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 处理图片
org-download插件是个不错的东西，试了下直接使用package安装缺少的
async即可使用。 配置了图片保存到attachment中
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 拖拽OK了
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 网络粘贴？
org-download-yank
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 截屏
org-download-screen
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; attach的目录怎么设置的？可以通过org-attach-directory设置，默认是相对与org文件当前目录下的data目录，如果没有会自动创建，这个目录也挺好的。如果设置了固定目录，所有org文件的attach都放在那个目录下也不好。
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 图片大小，位置等属性的设置检查
&lt;p&gt;
:(image-type-available-p 'imagemagick)
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 把旧文章的图片迁移过去
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 处理发布到GitHub
实现其实也简单，要么就本地发布，不在通过服务器中转，要么就多一个生成文件的仓库，测试一下删除文件的场景。删除文件也简单，强制同步生成一次就好。试用了一下，还是像以前以前push就能发布比较好。折腾折腾折腾
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-]&lt;/code&gt; 处理样式外观字体等等一开始并没有想要处理外观样式的内容，毕竟追求简单，不想在界面上花太多精力。但是直接借用了其他网站的css样式并稍作修改后发现阅读舒服了很多。
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; css配置，直接下载的&lt;a href="https://ogbe.net/"&gt;https://ogbe.net/&lt;/a&gt; 这个站点的样式，他也是使用org生成的站点，修改了li的高度，字体，其他基本上不用做任何修改，效果很不错。
update
后来发现网上还是有挺多针对org-mode导出的html订制的css，有几个不错的
&lt;a href="https://github.com/thomasf/solarized-css"&gt;https://github.com/thomasf/solarized-css&lt;/a&gt;,&lt;a href="https://github.com/fniessen/org-html-themes"&gt;https://github.com/fniessen/org-html-themes&lt;/a&gt;,
最后基于solarized结合ogbe.net的css订制了一个，效果还不错。
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 关于字体设置，基本知识参考
&lt;a href="http://borninsummer.com/2013/11/30/blog-typography-custom/"&gt;http://borninsummer.com/2013/11/30/blog-typography-custom/&lt;/a&gt; 最后使用了简书的字体配置
&lt;pre class="example"&gt;
SF UI Display, Arial, PingFang SC, Hiragino Sans GB, Microsoft YaHei, WenQuanYi Micro Hei, sans-serif
&lt;/pre&gt;
&lt;p&gt;
更适合中文一点
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 最后是代码高亮的问题，之前导出的一直没有高亮，居然是因为没有emacs没有装htmlize插件，装了之后成功导出代码高亮
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 遗留了一个问题，用vps部署后为什么代码高亮没有了？把服务端的.emacs.d copy到本地做了个测试，发现是窗口方式和命令行方式运行emacs的区别，窗口方式会有颜色，命令行方式没有，通过设置htmlize-output-type 'css 来解决，注意不能用htmlize里面定义的htmlize-output-type要用org-html-htmlize-output-type才有效
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 添加google baidu统计
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 添加RSS支持
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-2" class="outline-3"&gt;
&lt;h3 id="sec-4-2"&gt;&lt;span class="section-number-3"&gt;4.2&lt;/span&gt; 静态站点生成&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;p&gt;
使用org-mode原生的发布功能，指定一个根目录，对文件命名，目录命名，目录结构无任何特殊要求。org会递归的把目录下的org文件生成对应的
   html文件，并保持目录结构。支持中文。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-2-1" class="outline-4"&gt;
&lt;h4 id="sec-4-2-1"&gt;&lt;span class="section-number-4"&gt;4.2.1&lt;/span&gt; 最简单的生成配置&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-4-2-1"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;版本信息
emacs version "GNU Emacs 25.3.1 (x86&lt;sub&gt;64&lt;/sub&gt;-apple-darwin16.7.0,
NS appkit-1504.83 Version 10.12.6 (Build 16G29)) of 2017-09-15"
org-mode version "8.2.10"
在支持图片拖拽功能时，使用org-download库依赖async库，使用默认emacs自带package install
&lt;/li&gt;
&lt;li&gt;设置 org-publish-project-alist变量，进行生成配置，最重要的指定输入目录和输出目录
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-elisp"&gt;          (&lt;span class="org-keyword"&gt;require&lt;/span&gt; '&lt;span class="org-constant"&gt;ox-publish&lt;/span&gt;)
(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-publish-project-alist
      '(
        (&lt;span class="org-string"&gt;"blog-notes"&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:base-directory&lt;/span&gt; &lt;span class="org-string"&gt;"~/personal/public-notes/"&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:base-extension&lt;/span&gt; &lt;span class="org-string"&gt;"org"&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:publishing-directory&lt;/span&gt; &lt;span class="org-string"&gt;"~/public_html/"&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:recursive&lt;/span&gt; t
         &lt;span class="org-builtin"&gt;:publishing-function&lt;/span&gt; org-html-publish-to-html
         &lt;span class="org-builtin"&gt;:headline-levels&lt;/span&gt; 4             &lt;span class="org-comment-delimiter"&gt;; &lt;/span&gt;&lt;span class="org-comment"&gt;Just the default for this project.&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:auto-preamble&lt;/span&gt; t
         )
        (&lt;span class="org-string"&gt;"blog-static"&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:base-directory&lt;/span&gt; &lt;span class="org-string"&gt;"~/personal/public-notes/"&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:base-extension&lt;/span&gt; &lt;span class="org-string"&gt;"css&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-backslash"&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-construct"&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;js&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-backslash"&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-construct"&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;png&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-backslash"&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-construct"&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;jpg&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-backslash"&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-construct"&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;gif&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-backslash"&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-construct"&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;pdf&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-backslash"&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-construct"&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;mp3&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-backslash"&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-construct"&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;ogg&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-backslash"&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;&lt;span class="org-regexp-grouping-construct"&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class="org-string"&gt;swf"&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:publishing-directory&lt;/span&gt; &lt;span class="org-string"&gt;"~/public_html/"&lt;/span&gt;
         &lt;span class="org-builtin"&gt;:recursive&lt;/span&gt; t
         &lt;span class="org-builtin"&gt;:publishing-function&lt;/span&gt; org-publish-attachment
         )
        (&lt;span class="org-string"&gt;"blog"&lt;/span&gt; &lt;span class="org-builtin"&gt;:components&lt;/span&gt; (&lt;span class="org-string"&gt;"blog-notes"&lt;/span&gt; &lt;span class="org-string"&gt;"blog-static"&lt;/span&gt;))
        ))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;M-x org-publish-project 生成
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-2-2" class="outline-4"&gt;
&lt;h4 id="sec-4-2-2"&gt;&lt;span class="section-number-4"&gt;4.2.2&lt;/span&gt; sitemap的生成&lt;/h4&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-2-3" class="outline-4"&gt;
&lt;h4 id="sec-4-2-3"&gt;&lt;span class="section-number-4"&gt;4.2.3&lt;/span&gt; 默认模版&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>homebrew的使用</title><link href="http://www.iknockdoor.com/homebrew%E7%9A%84%E4%BD%BF%E7%94%A8.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/homebrew的使用.html</id><summary type="html">&lt;p&gt;
homebrew的使用
brew search
brew list
brew pin
brew install
brew uninstall
&lt;/p&gt;
</summary><content type="html">&lt;p&gt;
homebrew的使用
brew search
brew list
brew pin
brew install
brew uninstall
&lt;/p&gt;
</content></entry><entry><title>mac下支持imagemagick编译emacs</title><link href="http://www.iknockdoor.com/mac%E4%B8%8B%E6%94%AF%E6%8C%81imagemagick%E7%BC%96%E8%AF%91emacs.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/mac下支持imagemagick编译emacs.html</id><summary type="html">&lt;p&gt;
mac下支持imagemagick编译emacs
&lt;/p&gt;
</summary><content type="html">&lt;p&gt;
mac下支持imagemagick编译emacs
&lt;/p&gt;
</content></entry><entry><title>org-page使用中的一些问题</title><link href="http://www.iknockdoor.com/org-page%E4%BD%BF%E7%94%A8%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/org-page使用中的一些问题.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 中文文件名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 图片问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. 跨分类图片问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 预览问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 自动push时多仓库问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. &lt;b&gt;temp&lt;/b&gt; buffer问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. wrong type …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 中文文件名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 图片问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-2-1"&gt;2.1. 跨分类图片问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 预览问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 自动push时多仓库问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. &lt;b&gt;temp&lt;/b&gt; buffer问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. wrong type agument:listp 问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-7"&gt;7. 编译时org-mode-error nil问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-8"&gt;8. 二级目录问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-9"&gt;9. 换行格式问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 中文文件名&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
本质问题还是在于git，可以支持org源文件的中文名和中文目录。
org-page使用了命令"Git ls-tree -r &amp;#x2013;name-only"命令,该命令有时候不能正确显示中文名,这时候org-page会把中文的org文件忽略掉. 若要正确处理中文的
org文件,需要在shell中执行"git config core.quotepath false"
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 图片问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
首先org-mode版本要对，8.x org 同样的代码是不成功的，升级到9.x的
org-mode就可以了。其次git中文问题要解决。总之org-mode如果导出html正常，
org-page也就不会有太大问题。
&lt;/p&gt;
&lt;pre class="example"&gt;
[[./xxx/xxx.jpg]]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; 跨分类图片问题&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 预览问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
已经提交了的文件，修改后可以立即preview，修改的内容会生效，但是新文件却无法预览，原因可能还需要研究一下。猜测应该是会依赖于提交记录中的文件选择要生成的文件，但是文件内容拿的是
worktree中的，这样worktree的修改能够及时体现，但新增的文件却不能及时体现。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 自动push时多仓库问题&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; &lt;b&gt;temp&lt;/b&gt; buffer问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
事实上是org-mode导出出错了，注意org-mode版本，以及错误信息
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; wrong type agument:listp 问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
我在Mac os x遇到了这个问题，也是org-mode导出html时报的错，org-page主要功能都是基于org-mode的，因此
org-mode如果导出没什么问题，org-page也不会有问题。wrong type的问题并没有找到原因，可能是老版本没有卸载干净吧。执行以下命令解决了。
&lt;/p&gt;
&lt;pre class="example"&gt;
C-u M-x org-reload
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; 编译时org-mode-error nil问题&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; 二级目录问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
org源文件可以有多级目录，但最后生成的html都还是只有一级目录，都在blog
目录下。一级目录会作为分类，这样的话，事实上就是只支持一级分类，多级的暂时不支持。对于一级分类，支持多个，但是在首页和导航中都没有出现一级分类的链接，这个目录是存在的，这个分类下面会生成一个index索引文件，指向具体的文件。具体分类下的文件最终还是放在blog目录下。
&lt;/p&gt;

&lt;p&gt;
在首页和导航中没有出现链接的问题跟theme有关，kacus主题没有出现，mdo主题会自动出现在导航中
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-9" class="outline-2"&gt;
&lt;h2 id="sec-9"&gt;&lt;span class="section-number-2"&gt;9&lt;/span&gt; 换行格式问题&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-9"&gt;
&lt;p&gt;
org源文件中的直接换行在导出文件中仍然是一个段（&amp;lt;p&amp;gt;），段与段之间源文件中需要空一行
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>orgmode一些语法</title><link href="http://www.iknockdoor.com/orgmode%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/orgmode一些语法.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 记录一下使用orgmode都可以做哪些事情，怎么做法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 查看和检查org语法树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. #+开头的是个什么鬼？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 输入结构块的快捷方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. Drawer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. org-mode的时间戳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
orgmode只是提供了一个很好的工具，但能否用好这个工具才是重点。可以用兵器和招式来理解。官方文档上说可以做为keep …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 记录一下使用orgmode都可以做哪些事情，怎么做法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 查看和检查org语法树&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. #+开头的是个什么鬼？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 输入结构块的快捷方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. Drawer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. org-mode的时间戳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
orgmode只是提供了一个很好的工具，但能否用好这个工具才是重点。可以用兵器和招式来理解。官方文档上说可以做为keep notes,todo list,project planning
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 记录一下使用orgmode都可以做哪些事情，怎么做法&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;记笔记，最基本的
&lt;/li&gt;
&lt;li&gt;Todo list
&lt;/li&gt;
&lt;li&gt;习惯养成
&lt;/li&gt;
&lt;li&gt;做项目计划
&lt;/li&gt;
&lt;li&gt;RSS订阅
&lt;/li&gt;
&lt;li&gt;书签管理
&lt;/li&gt;
&lt;li&gt;做一个计时器
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 查看和检查org语法树&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
M-: (org-element-parse-buffer) RET  查看org语法树
org-lint命令可以检查org语法
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; #+开头的是个什么鬼？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
以#+开头加关键字和冒号的语法称之为in-buffer settings
&lt;/p&gt;
&lt;p&gt;
#+ 开头的关键字并非是任意写的，orgmode识别这些是有限的，通过输入
&lt;/p&gt;
&lt;p&gt;
#+然后再入M-TAB 自动补全可以看到orgmode支持的关键字，另外当输入了这些关键字之后，可以通过C-c C-c来刷新生效
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 输入结构块的快捷方法&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
&amp;lt;s TAB completes the ‘src’ code block.
&amp;lt;e TAB 输入例子块，这个我常用其他如下：
s #+BEGIN&lt;sub&gt;SRC&lt;/sub&gt; &amp;#x2026; #+END&lt;sub&gt;SRC&lt;/sub&gt;
e #+BEGIN&lt;sub&gt;EXAMPLE&lt;/sub&gt; &amp;#x2026; #+END&lt;sub&gt;EXAMPLE&lt;/sub&gt;
q #+BEGIN&lt;sub&gt;QUOTE&lt;/sub&gt; &amp;#x2026; #+END&lt;sub&gt;QUOTE&lt;/sub&gt;
v #+BEGIN&lt;sub&gt;VERSE&lt;/sub&gt; &amp;#x2026; #+END&lt;sub&gt;VERSE&lt;/sub&gt;
c #+BEGIN&lt;sub&gt;CENTER&lt;/sub&gt; &amp;#x2026; #+END&lt;sub&gt;CENTER&lt;/sub&gt;
l #+BEGIN&lt;sub&gt;EXPORT&lt;/sub&gt; latex &amp;#x2026; #+END&lt;sub&gt;EXPORT&lt;/sub&gt; L #+LATEX:
h #+BEGIN&lt;sub&gt;EXPORT&lt;/sub&gt; html &amp;#x2026; #+END&lt;sub&gt;EXPORT&lt;/sub&gt; H #+HTML:
a #+BEGIN&lt;sub&gt;EXPORT&lt;/sub&gt; ascii &amp;#x2026; #+END&lt;sub&gt;EXPORT&lt;/sub&gt; A #+ASCII:
i #+INDEX: line
I #+INCLUDE: line
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Drawer&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
C-c C-x d 添加一个Drawer
C-c C-z 这个命令很好使，添加一条日志，包含时间戳和笔记，很适合用来做批注，或者做阅读笔记。如果设置了org-log-into-drawer，会记录在指定的
Drawer中，一般设置为LOGBOOK
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; org-mode的时间戳&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
默认时间戳是会根据loacl变化的，尤其是星期几，中文就是三，四这样这样，但是公司电脑和个人电脑似乎local不太一样，一个是中文一个是英文。做如下设置，统一使用英文
&lt;/p&gt;
&lt;pre class="example"&gt;
(setq system-time-locale "C")
&lt;/pre&gt;
&lt;p&gt;
其他local的设置就先不管了，似乎公司电脑用的还是GB2312，语言和local环境设置是另外一个问题了。上面这个方法是在一下地址找到的
&lt;a href="https://emacs.stackexchange.com/questions/22371/org-mode-timestamps-encoding"&gt;https://emacs.stackexchange.com/questions/22371/org-mode-timestamps-encoding&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>orgmode做todolist</title><link href="http://www.iknockdoor.com/orgmode%E5%81%9Atodolist.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/orgmode做todolist.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. todo的概念&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. todo配置的生效范围&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. todo list基本快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 如果要做的事情状态不只是TODO 和DONE？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 如果想同时用几组关键字怎么办？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. todo状态总是轮流切换，如果状态一多会太慢，这样就可以定义状态快捷键 …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. todo的概念&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. todo配置的生效范围&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. todo list基本快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 如果要做的事情状态不只是TODO 和DONE？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 如果想同时用几组关键字怎么办？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. todo状态总是轮流切换，如果状态一多会太慢，这样就可以定义状态快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-6"&gt;6. 上述通过修改变量的方式会对所有org文件生效，如果只想对当前文件生效呢？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-7"&gt;7. 一项要做的事情可能可以细分为几个步骤，如何实现分步呢？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-8"&gt;8. 如果一项事情分成几步，还可以添加依赖关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-9"&gt;9. 在更改TODO状态时记下时间戳，还能记下更改笔记&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-9-1"&gt;9.1. 基本使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-9-2"&gt;9.2. 订制哪些记哪些不记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-9-3"&gt;9.3. 把记录做在指定的Drawer中&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-10"&gt;10. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 用todolist来做习惯管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-11"&gt;11. 给TODO添加优先级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-12"&gt;12. 给TODO添加标签&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-12-1"&gt;12.1. tags的基本信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-12-2"&gt;12.2. 给headline设置tag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-12-3"&gt;12.3. 定义tags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-12-4"&gt;12.4. 定义tag快捷键，很简单同TODO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-12-5"&gt;12.5. 给tags分组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-12-6"&gt;12.6. 给tags分级&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-12-7"&gt;12.7. 通过tags查找headline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13"&gt;13. Property&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-13-1"&gt;13.1. 语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13-2"&gt;13.2. 常用命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13-3"&gt;13.3. Property的查找&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13-4"&gt;13.4. 基于outline结构的属性继承&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13-5"&gt;13.5. column view&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-13-5-1"&gt;13.5.1. 定义columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13-5-2"&gt;13.5.2. 一个定义和使用column view的例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13-5-3"&gt;13.5.3. column view中的操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-13-5-4"&gt;13.5.4. Capturing column view&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-14"&gt;14. 时间&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-14-1"&gt;14.1. 时间类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-14-2"&gt;14.2. 相关命令和快捷键&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-14-2-1"&gt;14.2.1. 创建时间时的小技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-14-3"&gt;14.3. Deadlines and Scheduling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-14-4"&gt;14.4. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 为任务计时&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-15"&gt;15. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Capture&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-15-1"&gt;15.1. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 如何快速做笔记这个点还是挺有用的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-15-2"&gt;15.2. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; attachments这个挺有用，让我对添加图片有了一个新的认识&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-15-3"&gt;15.3. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; RSS也很有用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-16"&gt;16. Agenda Views&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-16-1"&gt;16.1. Agenda files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-16-2"&gt;16.2. 主要的几个视图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
org mode中todo的原生概念就是分散在各个笔记中的，因为todo往往是在记笔记的过程中产生的，但org mode提供了便利的从各个文件中收集todo的方法。
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; todo的概念&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
TODO List是用来做待办事项管理的，了解GTD的同学会很熟悉。Org mode通过以下概念和方式实现对TODO list的支持，可以支持：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;任务和子任务
&lt;/li&gt;
&lt;li&gt;标签分类
&lt;/li&gt;
&lt;li&gt;状态修改历史
&lt;/li&gt;
&lt;li&gt;通过标签全局搜索
&lt;/li&gt;
&lt;li&gt;优先级
&lt;/li&gt;
&lt;li&gt;自定义任务状态
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
总之可能是最好的todo list管理工具了。
TODO的实现是基于headline的，他在headline的头部通过插入关键字的方式标记TODO不同的状态。
todo的功能本质上是在一组关键字和无关键字之间轮换，然后通过一个竖线区分成了两个状态，如果没有提供竖线最后一个关键字就作为和前面不同的状态。这个状态只是在agent view中使用判断出现和不出现而已。通过上面这种机制，可以当成几种工具来用
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;也是最基本的，在待办与完成之间切换
&lt;/li&gt;
&lt;li&gt;把关键在当成工作流，记录工作步骤
&lt;/li&gt;
&lt;li&gt;把关键字当成分类，同时也可以在不同种类之间切换，比如一项工作安排给谁做
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; todo配置的生效范围&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
下面讨论的配置基本上都会有三种有效范围
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;通过设置变量的方式，会影响所有org文件
&lt;/li&gt;
&lt;li&gt;通过设置in-buffer settings的方式只针对当前文档有效
&lt;/li&gt;
&lt;li&gt;通过这只property只对当前headline及其sub headline生效
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; todo list基本快捷键&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;key&lt;/th&gt;
&lt;th scope="col" class="left"&gt;function&lt;/th&gt;
&lt;th scope="col" class="left"&gt;varible&lt;/th&gt;
&lt;th scope="col" class="left"&gt;describ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;c-c c-t&lt;/td&gt;
&lt;td class="left"&gt;org-todo&lt;/td&gt;
&lt;td class="left"&gt;org-use-fast-todo- selection&lt;/td&gt;
&lt;td class="left"&gt;更改状态&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;c-u c-c c-t&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;弹出状态选择&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 如果要做的事情状态不只是TODO 和DONE？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
自定义关键字
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-todo-keywords
'((sequence &lt;span class="org-string"&gt;"TODO"&lt;/span&gt; &lt;span class="org-string"&gt;"FEEDBACK"&lt;/span&gt; &lt;span class="org-string"&gt;"VERIFY"&lt;/span&gt; &lt;span class="org-string"&gt;"|"&lt;/span&gt; &lt;span class="org-string"&gt;"DONE"&lt;/span&gt; &lt;span class="org-string"&gt;"DELEGATED"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 如果想同时用几组关键字怎么办？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
可以同时定义多组关键字，快捷键会不太一样，最简单的s-left/s-right，其他可以查看文档。如下方式定义多组关键字
(setq org-todo-keywords
         '((sequence "TODO" "|" "DONE")
           (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
           (sequence "|" "CANCELED")))
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; todo状态总是轮流切换，如果状态一多会太慢，这样就可以定义状态快捷键&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
设置org-use-fast-todo-selection为非nil
或者c-u c-c c-t强制弹出选择设置状态快捷键
(setq org-todo-keywords
         '((sequence "TODO(t)" "|" "DONE(d)")
           (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
           (sequence "|" "CANCELED(c)")))
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-6" class="outline-2"&gt;
&lt;h2 id="sec-6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; 上述通过修改变量的方式会对所有org文件生效，如果只想对当前文件生效呢？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
使用in-buffet settings，也支持多组，如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
#+TODO: TODO | DONE
#+TODO: REPORT BUG KNOWNCAUSE | FIXED
#+TODO: | CANCELED
&lt;/pre&gt;
&lt;p&gt;
记得使用C-c C-c使settings生效
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-7" class="outline-2"&gt;
&lt;h2 id="sec-7"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; 一项要做的事情可能可以细分为几个步骤，如何实现分步呢？&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
两种方法，一个是通过headline的级别关系，另外一种是通过checkbox，我更倾向于用checkbox。另外用&lt;code&gt;[/]&lt;/code&gt;&lt;code&gt;[%]&lt;/code&gt;可以显示进度。
C-c C-c org-toggle-checkbox可以修改checkbox状态
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-8" class="outline-2"&gt;
&lt;h2 id="sec-8"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; 如果一项事情分成几步，还可以添加依赖关系&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
这个点，其实可以靠自觉，如果当时思考并安排了一个顺序，后面害怕忘记，也可以设置一个，这里只给一个例子，具体看文档
&lt;/p&gt;
&lt;pre class="example"&gt;
* TODO Blocked until (two) is done
** DONE one
** TODO two
* Parent
     :PROPERTIES:
     :ORDERED: t
     :END:
** TODO a
** TODO b, needs to wait for (a)
** TODO c, needs to wait for (a) and (b)
&lt;/pre&gt;
&lt;p&gt;
插入ordered properties快捷键C-c C-x o
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-9" class="outline-2"&gt;
&lt;h2 id="sec-9"&gt;&lt;span class="section-number-2"&gt;9&lt;/span&gt; 在更改TODO状态时记下时间戳，还能记下更改笔记&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-9"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-9-1" class="outline-3"&gt;
&lt;h3 id="sec-9-1"&gt;&lt;span class="section-number-3"&gt;9.1&lt;/span&gt; 基本使用&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-9-1"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-log-done 'time) &lt;span class="org-comment-delimiter"&gt;;;&lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#30456;&amp;#21516;&amp;#30340;in-buffer settings #+STARTUP: logdone&lt;/span&gt;
(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-log-done 'note) &lt;span class="org-comment-delimiter"&gt;;;&lt;/span&gt;&lt;span class="org-comment"&gt;#+STARTUP: lognotedone&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
做了以上配置中后，当todo状态切换为完成时，会自动记录时间戳，或弹出输入区域，输入笔记。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-9-2" class="outline-3"&gt;
&lt;h3 id="sec-9-2"&gt;&lt;span class="section-number-3"&gt;9.2&lt;/span&gt; 订制哪些记哪些不记&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-9-2"&gt;
&lt;p&gt;
并不是更改每种状态时都想记录笔记，所以可以配置哪些状态记录时间戳，哪些记录笔记，哪些什么都不记
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-elisp"&gt;(&lt;span class="org-keyword"&gt;setq&lt;/span&gt; org-todo-keywords
'((sequence &lt;span class="org-string"&gt;"TODO(t)"&lt;/span&gt; &lt;span class="org-string"&gt;"WAIT(w@/!)"&lt;/span&gt; &lt;span class="org-string"&gt;"|"&lt;/span&gt; &lt;span class="org-string"&gt;"DONE(d!)"&lt;/span&gt; &lt;span class="org-string"&gt;"CANCELED(c@)"&lt;/span&gt;)))
&lt;span class="org-comment-delimiter"&gt;;;&lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#25110;&amp;#32773;&amp;#29992;in-buffer settings&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;;&lt;/span&gt;&lt;span class="org-comment"&gt;#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;;&lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#20877;&amp;#25110;&amp;#32773;&amp;#29992;property&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;;&lt;/span&gt;&lt;span class="org-comment"&gt;:PROPERTIES:&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;;&lt;/span&gt;&lt;span class="org-comment"&gt;:LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)&lt;/span&gt;
&lt;span class="org-comment-delimiter"&gt;;;&lt;/span&gt;&lt;span class="org-comment"&gt;:END:&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
需要特别说明一下的是WAIT(w@/!)状态,@表示记笔记，！表示记时间戳，斜杠表示如果切换到另外一个状态时，另外一个状态什么都没要求记，那就记录斜杠后要求的，如果斜杠后是@就是记笔记，如果是！就记时间。在上面的例子中，从WAIT到DONE不会触发斜杠后的！，从WAIT到TODO会触发斜杠后的！
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-9-3" class="outline-3"&gt;
&lt;h3 id="sec-9-3"&gt;&lt;span class="section-number-3"&gt;9.3&lt;/span&gt; 把记录做在指定的Drawer中&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-9-3"&gt;
&lt;p&gt;
如果状态变更历史太多，放在一个Drawer中收起来会好看很多。设置org-log-into-drawer，指定笔记放在那个Drawer，一般指定为LOGBOOK，会在aganda view生效。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-10" class="outline-2"&gt;
&lt;h2 id="sec-10"&gt;&lt;span class="section-number-2"&gt;10&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 用todolist来做习惯管理&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-10"&gt;
&lt;p&gt;
暂时还没用到晚些再看
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-11" class="outline-2"&gt;
&lt;h2 id="sec-11"&gt;&lt;span class="section-number-2"&gt;11&lt;/span&gt; 给TODO添加优先级&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-11"&gt;
&lt;p&gt;
只是在agenda view时用来排序，其他没什么太大意义，语法如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
* TODO [#A] Write letter to Sam Fortune
&lt;/pre&gt;
&lt;p&gt;
C-c , 添加优先级
S-up/down 调整优先级
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12" class="outline-2"&gt;
&lt;h2 id="sec-12"&gt;&lt;span class="section-number-2"&gt;12&lt;/span&gt; 给TODO添加标签&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-12"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-12-1" class="outline-3"&gt;
&lt;h3 id="sec-12-1"&gt;&lt;span class="section-number-3"&gt;12.1&lt;/span&gt; tags的基本信息&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-12-1"&gt;
&lt;p&gt;
标签可以根据TODO headline的结构关系继承。
tags大概长这个样子：
&lt;/p&gt;
&lt;pre class="example"&gt;
* Meeting with the French group  :work:
** Summary by Frank              :boss:notes:
*** TODO Prepare slides for him  :action:
&lt;/pre&gt;
&lt;p&gt;
可以通过in-buffer settings设置文件的tag，所有的todo都会继承
&lt;/p&gt;
&lt;pre class="example"&gt;
#+FILETAGS: :Peter:Boss:Secret:
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12-2" class="outline-3"&gt;
&lt;h3 id="sec-12-2"&gt;&lt;span class="section-number-3"&gt;12.2&lt;/span&gt; 给headline设置tag&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-12-2"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;command&lt;/th&gt;
&lt;th scope="col" class="left"&gt;function&lt;/th&gt;
&lt;th scope="col" class="left"&gt;varible&lt;/th&gt;
&lt;th scope="col" class="left"&gt;describ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-c C-q&lt;/td&gt;
&lt;td class="left"&gt;org-set-tags-command&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;给当前的headline添加tag&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c C-c&lt;/td&gt;
&lt;td class="left"&gt;org-set-tags-command&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;如果光标正好在headline，跟C-c C-q一样的效果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12-3" class="outline-3"&gt;
&lt;h3 id="sec-12-3"&gt;&lt;span class="section-number-3"&gt;12.3&lt;/span&gt; 定义tags&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-12-3"&gt;
&lt;p&gt;
默认tags列表是动态的，你写什么就有什么，也可以通过设置org-tag-alist定义一个固定的tag
list，类似TODO的定义，可以全局，可以文件
&lt;/p&gt;
&lt;pre class="example"&gt;
#+TAGS: @work @home @tennisclub
#+TAGS: laptop car pc sailboat
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12-4" class="outline-3"&gt;
&lt;h3 id="sec-12-4"&gt;&lt;span class="section-number-3"&gt;12.4&lt;/span&gt; 定义tag快捷键，很简单同TODO&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-12-4"&gt;
&lt;pre class="example"&gt;
(setq org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("laptop" . ?l)))
#+TAGS: @work(w)  @home(h)  @tennisclub(t)  laptop(l)  pc(p)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12-5" class="outline-3"&gt;
&lt;h3 id="sec-12-5"&gt;&lt;span class="section-number-3"&gt;12.5&lt;/span&gt; 给tags分组&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-12-5"&gt;
&lt;p&gt;
一个headline或者TODO可以同时有几个tag，但一旦给tags分组之后，同一组的tags只能出现一个。如下方式给tags分组
&lt;/p&gt;
&lt;pre class="example"&gt;
#+TAGS: { @work(w)  @home(h)  @tennisclub(t) }  laptop(l)  pc(p)
(setq org-tag-alist '((:startgroup . nil)
                        ("@work" . ?w) ("@home" . ?h)
                        ("@tennisclub" . ?t)
                        (:endgroup . nil)
                        ("laptop" . ?l) ("pc" . ?p)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12-6" class="outline-3"&gt;
&lt;h3 id="sec-12-6"&gt;&lt;span class="section-number-3"&gt;12.6&lt;/span&gt; 给tags分级&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-12-6"&gt;
&lt;p&gt;
分级的概念和作用是给tags提供一个隶属关系，比如C++，lisp都属于编程语言这一类。定义tags分级的方式如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
#+TAGS: [ GTD : Control Persp ]
#+TAGS: [ Control : Context Task ]
#+TAGS: [ Persp : Vision Goal AOF Project ]
;;使用全局设置
(setq org-tag-alist '((:startgrouptag)
                        ("GTD")
                        (:grouptags)
                        ("Control")
                        ("Persp")
                        (:endgrouptag)
                        (:startgrouptag)
                        ("Control")
                        (:grouptags)
                        ("Context")
                        ("Task")
                        (:endgrouptag)))
;;使用正则
#+TAGS: [ Vision : {V@.+} ]
#+TAGS: [ Goal : {G@.+} ]
#+TAGS: [ AOF : {AOF@.+} ]
#+TAGS: [ Project : {P@.+} ]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-12-7" class="outline-3"&gt;
&lt;h3 id="sec-12-7"&gt;&lt;span class="section-number-3"&gt;12.7&lt;/span&gt; 通过tags查找headline&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-12-7"&gt;
&lt;p&gt;
类似于agenda view，tags view也是可以搜索出分散文件中的tags，这些文件就是agenda定义的文件目录
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;command&lt;/th&gt;
&lt;th scope="col" class="left"&gt;function&lt;/th&gt;
&lt;th scope="col" class="left"&gt;varible&lt;/th&gt;
&lt;th scope="col" class="left"&gt;describ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-c a m&lt;/td&gt;
&lt;td class="left"&gt;org-tags-view&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;列出agenda文件中所有有指定tag的headline&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c a M&lt;/td&gt;
&lt;td class="left"&gt;org-tags-view&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;同上，但只列出TODO项&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13" class="outline-2"&gt;
&lt;h2 id="sec-13"&gt;&lt;span class="section-number-2"&gt;13&lt;/span&gt; Property&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-13"&gt;
&lt;p&gt;
属性就是一个键值对，其实就是在名为PROPERTIES的Drawer中的一个个键值对。属性的有两个主要作用：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;类似于tags，但比tags多一些功能，除了可以分类还可以给值
&lt;/li&gt;
&lt;li&gt;一个非常简单的数据库实现
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-1" class="outline-3"&gt;
&lt;h3 id="sec-13-1"&gt;&lt;span class="section-number-3"&gt;13.1&lt;/span&gt; 语法&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-13-1"&gt;
&lt;p&gt;
语法上的几个要点：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;作用与entry或tree
&lt;/li&gt;
&lt;li&gt;放在headling和planing line下面
&lt;/li&gt;
&lt;li&gt;key对大小写敏感
&lt;/li&gt;
&lt;li&gt;subtree是否继承取决与变量org-use-property-inheritance
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
例子：
&lt;/p&gt;
&lt;pre class="example"&gt;
* CD collection
  ** Classic
  *** Goldberg Variations
      :PROPERTIES:
      :Title:     Goldberg Variations
      :Composer:  J.S. Bach
      :Artist:    Glen Gould
      :Publisher: Deutsche Grammophon
      :NDisks:    1
      :END:
&lt;/pre&gt;
&lt;p&gt;
可以为一个key的value范围做限制，例如为:Xyz:做取值限定，只需要定义:Xyz&lt;sub&gt;ALL&lt;/sub&gt;:
可以在文件范围内内定义属性和限制取值范围，如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
#+PROPERTY: NDisks_ALL 1 2 3 4
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-2" class="outline-3"&gt;
&lt;h3 id="sec-13-2"&gt;&lt;span class="section-number-3"&gt;13.2&lt;/span&gt; 常用命令&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-13-2"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;command&lt;/th&gt;
&lt;th scope="col" class="left"&gt;function&lt;/th&gt;
&lt;th scope="col" class="left"&gt;varible&lt;/th&gt;
&lt;th scope="col" class="left"&gt;describ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;M-TAB&lt;/td&gt;
&lt;td class="left"&gt;pcomplete&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;没看明白怎么用&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c C-x p&lt;/td&gt;
&lt;td class="left"&gt;org-set-property&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;在PROPERTIES Drawer中创建属性&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c C-c&lt;/td&gt;
&lt;td class="left"&gt;org-property-action&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;当光标在PROPERTIES Drawer中时，使用此命令执行property指令&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;S-right&lt;/td&gt;
&lt;td class="left"&gt;org-property-next-allowed-value&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;修改当前光标下的key的值为下一个允许的value&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-3" class="outline-3"&gt;
&lt;h3 id="sec-13-3"&gt;&lt;span class="section-number-3"&gt;13.3&lt;/span&gt; Property的查找&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-13-3"&gt;
&lt;p&gt;
跟tags完全一样，连命令都是一样的
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-4" class="outline-3"&gt;
&lt;h3 id="sec-13-4"&gt;&lt;span class="section-number-3"&gt;13.4&lt;/span&gt; 基于outline结构的属性继承&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-13-4"&gt;
&lt;p&gt;
org为了查找性能问题，默认是关闭了继承的，而且也不常用，设置
org-use-property-inheritance变量为t即可。有一些属性是hardcode继承的，具体可参见文档。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-5" class="outline-3"&gt;
&lt;h3 id="sec-13-5"&gt;&lt;span class="section-number-3"&gt;13.5&lt;/span&gt; column view&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-13-5"&gt;
&lt;p&gt;
看了下例子才大概明白property的主要用途，制作项目计划很灵活。另外就是用来编辑Property非常方便，定义的快捷键就是专门用来做这个的。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-5-1" class="outline-4"&gt;
&lt;h4 id="sec-13-5-1"&gt;&lt;span class="section-number-4"&gt;13.5.1&lt;/span&gt; 定义columns&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-13-5-1"&gt;
&lt;p&gt;
使用column view之前需要先定义格式。可以在in-buffer settings中定义，也可在属性中定义，如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
#+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
** Top node for columns view
    :PROPERTIES:
    :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
    :END:
&lt;/pre&gt;
&lt;p&gt;
column定义的语法如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
%[width]property[(title)][{summary-type}]
&lt;/pre&gt;
&lt;p&gt;
具体的summary-type可以查看文档
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-5-2" class="outline-4"&gt;
&lt;h4 id="sec-13-5-2"&gt;&lt;span class="section-number-4"&gt;13.5.2&lt;/span&gt; 一个定义和使用column view的例子&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-13-5-2"&gt;
&lt;pre class="example"&gt;
*** 例子 
:PROPERTIES:
:COLUMNS: %25ITEM %9Approved(Approved?){X} %Owner %11Status \4 %10Time_Estimate{:} %CLOCKSUM %CLOCKSUM_T
:Owner_ALL:    Tammy Mark Karl Lisa Don
:Status_ALL:   "In progress" "Not started yet" "Finished" ""
:Approved_ALL: "[ ]" "[X]"
:END:
**** 干活
:PROPERTIES:
:Owner:    Tammy
:Status:   Finished
:END:
**** 搬砖
:PROPERTIES:
:Status:   In progress
:Approved: [ ]
:Owner:    Mark
:END:
**** 砌墙
:PROPERTIES:
:Owner:    Karl
:Status:   In progress
:END:
***** 和泥
:PROPERTIES:
:Status:   In progress
:END:
**** 盖顶
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-5-3" class="outline-4"&gt;
&lt;h4 id="sec-13-5-3"&gt;&lt;span class="section-number-4"&gt;13.5.3&lt;/span&gt; column view中的操作&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-13-5-3"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;命令&lt;/th&gt;
&lt;th scope="col" class="left"&gt;函数&lt;/th&gt;
&lt;th scope="col" class="left"&gt;变量&lt;/th&gt;
&lt;th scope="col" class="left"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-c C-x C-c&lt;/td&gt;
&lt;td class="left"&gt;org-columns&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;进入column view&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;r/g&lt;/td&gt;
&lt;td class="left"&gt;org-columns-redo&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;相当于刷新&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;q&lt;/td&gt;
&lt;td class="left"&gt;org-columns-quit&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;退出column view&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;c/S-TAB&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;Content view，看得比较清晰，排版比较整齐&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;0..9&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;直接选择第几个允许的值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;n/p&lt;/td&gt;
&lt;td class="left"&gt;org-columns-next/previous-allowed-value&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;下/上一个允许的值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c C-c&lt;/td&gt;
&lt;td class="left"&gt;org-columns-set-tags-or-toggle&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;如果是复选框，选中或取消选中&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;v&lt;/td&gt;
&lt;td class="left"&gt;org-columns-show-value&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;在minbuffer中看值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;a&lt;/td&gt;
&lt;td class="left"&gt;org-columns-edit-allowed&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;在minbuffer中列出所有允许的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-13-5-4" class="outline-4"&gt;
&lt;h4 id="sec-13-5-4"&gt;&lt;span class="section-number-4"&gt;13.5.4&lt;/span&gt; Capturing column view&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-13-5-4"&gt;
&lt;p&gt;
就是方便导出或打印column view，似乎用处不是很大
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-14" class="outline-2"&gt;
&lt;h2 id="sec-14"&gt;&lt;span class="section-number-2"&gt;14&lt;/span&gt; 时间&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-14"&gt;
&lt;p&gt;
时间对于TODO和plan都很重要。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;记录特殊事件发生时间点
&lt;/li&gt;
&lt;li&gt;安排时间计划
&lt;/li&gt;
&lt;li&gt;计时
&lt;/li&gt;
&lt;li&gt;特定时间提醒
&lt;/li&gt;
&lt;li&gt;控制todo和plan在agenda view中的显示
&lt;/li&gt;
&lt;li&gt;。。。很多
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-14-1" class="outline-3"&gt;
&lt;h3 id="sec-14-1"&gt;&lt;span class="section-number-3"&gt;14.1&lt;/span&gt; 时间类型&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-14-1"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;普通时间戳，用来表示时间点，事件，成就 &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2017-08-07 Mon&amp;gt;&lt;/span&gt;&lt;/span&gt;
     &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2017-08-07 Mon 10:40&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;周期性事件，可以用来表示周期性事件，比如生日什么的
&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2017-08-07 Mon 10:42 +1w&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;日历表达式表示的时间，这里没看太懂，应该是要结合emacs
calendar/diary package一起使用，形式如下：
&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;%%(diary-float t 4 2)&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;时间段，时间范围
&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;&amp;lt;2017-08-07 一 10:46&amp;gt;&amp;#x2013;&amp;lt;2017-08-08 二 10:46&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;li&gt;不活跃的时间戳，也能记录时间，只是不会在agenda中生效
&lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2017-08-07 Mon]&lt;/span&gt;&lt;/span&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-14-2" class="outline-3"&gt;
&lt;h3 id="sec-14-2"&gt;&lt;span class="section-number-3"&gt;14.2&lt;/span&gt; 相关命令和快捷键&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-14-2"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;命令&lt;/th&gt;
&lt;th scope="col" class="left"&gt;函数&lt;/th&gt;
&lt;th scope="col" class="left"&gt;变量&lt;/th&gt;
&lt;th scope="col" class="left"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-c .&lt;/td&gt;
&lt;td class="left"&gt;org-time-stamp&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;创建一个时间戳，连续用两次创建时间段&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-u C-c .&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;创建带时间的时间戳，上面的命令只带日期&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c !&lt;/td&gt;
&lt;td class="left"&gt;org-time-stamp-inactive&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;看函数名就可以明白&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-u C-c !&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-14-2-1" class="outline-4"&gt;
&lt;h4 id="sec-14-2-1"&gt;&lt;span class="section-number-4"&gt;14.2.1&lt;/span&gt; 创建时间时的小技巧&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-14-2-1"&gt;
&lt;p&gt;
当弹出时间选择窗口时可以手动输入时间，支持多种格式，具体参考手册。值得一提的是给+/-号会自动计算日期，很方便，比如+2w指两个星期后的时间点
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-14-3" class="outline-3"&gt;
&lt;h3 id="sec-14-3"&gt;&lt;span class="section-number-3"&gt;14.3&lt;/span&gt; Deadlines and Scheduling&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-14-3"&gt;
&lt;p&gt;
最迟时间和计划开始时间，这两个只是在时间戳前面了加个DEADLINES或
SCHEDULING的关键字，有什么作用呢？主要还是在agenda view中，他可以指示agenda view在特定的时间提醒计划开始的事情，或者快要过期的事情。文档中特意指出了scheduled time和普通时间戳的区别，比如几号几点开会，这个一个约定，时间是被动的，这个是用普通时间戳。然而计划开始时间是指的主动安排的时间。这个区别的理解是我自己的，并没太看懂文档的中的意思。常用快捷键和命令：
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;命令&lt;/th&gt;
&lt;th scope="col" class="left"&gt;函数&lt;/th&gt;
&lt;th scope="col" class="left"&gt;变量&lt;/th&gt;
&lt;th scope="col" class="left"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;C-c C-d&lt;/td&gt;
&lt;td class="left"&gt;org-deadline&lt;/td&gt;
&lt;td class="left"&gt;org-log-redeadline&lt;/td&gt;
&lt;td class="left"&gt;如果前面的变量设置了，改变deadline将可以做记录&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c C-s&lt;/td&gt;
&lt;td class="left"&gt;org-schedule&lt;/td&gt;
&lt;td class="left"&gt;org-log-reschedule&lt;/td&gt;
&lt;td class="left"&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-14-4" class="outline-3"&gt;
&lt;h3 id="sec-14-4"&gt;&lt;span class="section-number-3"&gt;14.4&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 为任务计时&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-15" class="outline-2"&gt;
&lt;h2 id="sec-15"&gt;&lt;span class="section-number-2"&gt;15&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Capture&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-15"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-15-1" class="outline-3"&gt;
&lt;h3 id="sec-15-1"&gt;&lt;span class="section-number-3"&gt;15.1&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; 如何快速做笔记这个点还是挺有用的&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-15-2" class="outline-3"&gt;
&lt;h3 id="sec-15-2"&gt;&lt;span class="section-number-3"&gt;15.2&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; attachments这个挺有用，让我对添加图片有了一个新的认识&lt;/h3&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-15-3" class="outline-3"&gt;
&lt;h3 id="sec-15-3"&gt;&lt;span class="section-number-3"&gt;15.3&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; RSS也很有用&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-16" class="outline-2"&gt;
&lt;h2 id="sec-16"&gt;&lt;span class="section-number-2"&gt;16&lt;/span&gt; Agenda Views&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-16"&gt;
&lt;p&gt;
前面那么多的地方提到agenda view，现在终于见到了，但是你会发现其实他并没有那么神秘。agenda view的唯一的作用就是把分散在各个文件中的TODO，任务，约会等等以一种视图呈现在一个buffer中，同时提供一些便利的操作。所以，这里并不会深入讨论细节，用到的时候自然会用到，那会儿可以再看文档，现在看多了，也记不住，记住了也可能用不到。这里只关注两个重点
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;如何向agenda view添加文件，以及怎么知道哪些文件在agenda view中
&lt;/li&gt;
&lt;li&gt;如何打开各种视图
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-16-1" class="outline-3"&gt;
&lt;h3 id="sec-16-1"&gt;&lt;span class="section-number-3"&gt;16.1&lt;/span&gt; Agenda files&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-16-1"&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="left"&gt;命令&lt;/th&gt;
&lt;th scope="col" class="left"&gt;函数&lt;/th&gt;
&lt;th scope="col" class="left"&gt;变量&lt;/th&gt;
&lt;th scope="col" class="left"&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;org-agenda-files&lt;/td&gt;
&lt;td class="left"&gt;添加在这个变量的文件都会出现在agenda view中，如果是目录，这个目录下的所有org文件都会包含&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c [&lt;/td&gt;
&lt;td class="left"&gt;org-agenda-file-to-front&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;添加当前文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-c ]&lt;/td&gt;
&lt;td class="left"&gt;org-remove-file&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;从agenda files中移除文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;C-'/,&lt;/td&gt;
&lt;td class="left"&gt;org-cycle-agenda-files&lt;/td&gt;
&lt;td class="left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="left"&gt;逐个访问agenda files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-16-2" class="outline-3"&gt;
&lt;h3 id="sec-16-2"&gt;&lt;span class="section-number-3"&gt;16.2&lt;/span&gt; 主要的几个视图&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-16-2"&gt;
&lt;p&gt;
agenda view的视图是可以自定义的，有几个内置的视图比较常用。所有视图的入口都通过C-c a然后再选择进入
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;weekly/daily agenda view 有点像日程表 a
&lt;/li&gt;
&lt;li&gt;TODO list 就是所有的todo了 t/T
&lt;/li&gt;
&lt;li&gt;tags和property匹配 m/M
&lt;/li&gt;
&lt;li&gt;timeline for a single file
&lt;/li&gt;
&lt;li&gt;stuck projects 这个没看懂
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>个人知识管理解决方案实现</title><link href="http://www.iknockdoor.com/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/个人知识管理解决方案实现.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 收集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 积累&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 查阅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 安全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
如果早一点学会做只是管理，可能现在会掌握更多的知识，不过什么时候开始做只是管理都会晚。
&lt;/p&gt;

&lt;p&gt;
知识管理很重要的一个环节在于要经常翻看思考，理解和记忆自己的一些笔记。
&lt;/p&gt;

&lt;p&gt;
前两年在使用iPhone自带的笔记app时，偶尔把一些想法记录下来 …&lt;/p&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 收集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 积累&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. 查阅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-5"&gt;5. 安全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
如果早一点学会做只是管理，可能现在会掌握更多的知识，不过什么时候开始做只是管理都会晚。
&lt;/p&gt;

&lt;p&gt;
知识管理很重要的一个环节在于要经常翻看思考，理解和记忆自己的一些笔记。
&lt;/p&gt;

&lt;p&gt;
前两年在使用iPhone自带的笔记app时，偶尔把一些想法记录下来，或者把自己悟到的一些道理记下来，然后时长翻看，那阵子效果就很好，可以真正的把领悟大的知识理解和运用起来。
&lt;/p&gt;

&lt;p&gt;
可能还是随着年龄的增长，记忆力在逐渐下降，有的时候突然在一个环境或者遇到某件事情的时候理解了一个知识点，或者明白了一个道理，比如小到一个shell命令怎么用，或者更深刻的理解了一个方法论，可能只是那一刻明白了，记住了，即使他很重要，过阵子就会忘掉，更别提很好的运用了。如此一来，当时的思考和学习其实就被浪费掉了，因为并没有变成自己的东西，忘了，或者用不起来，跟没学是一样的，然后等到某一天再遇到同样的问题，思考了一番，突然又明白了（甚至有些时候以前能想明白的问题现在都想不明白了，这就更尴尬了），发现，咦，这个问题以前我会啊，或者这个道理以前我懂啊，但是有什么用呢？如果不记录下来，反复吸收熟练运用，上面这个国正会周而复始，反反复复，然后自己会一直处于一个没有任何进步，低水平的，重复劳动状态。成长，进步，需要的是思考结果的积累。
&lt;/p&gt;

&lt;p&gt;
小的时候学东西很快，成长也很快，一来可能是心无杂念，更专注，学一遍就记住了，然后就积累下来了。但等到成年，面对的世界会复杂很多，要处理的事情也是方方面面的，即使记忆力不衰退，借助一些工具有效的记录和积累自己的知识，可以减小大脑的负担，善假于物，何乐而不为呢？
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 记录&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
灵感常常是不经意间来的，道理也可能是不经意间明白的，可以用后台思维来比喻这个事情，往往很多事情都是在睡了一觉醒来之后才顿悟的，忘记是在哪里看的理论，人在睡眠期间，大脑其实是会自己整理和思考问题的。所以记录也需要是在时间上碎片化的，要很方便，随时随手可以记录，记录过程不应太重，太复杂，否则会打断思考。因此，移动端的解决方案就很重要的，随时随地，有个什么想法，掏出手机，快速的记下来，回去再整理消化。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 收集&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 积累&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
上面说过，成长需要的是积累。小的时候老师总让写日记，当时完全不明白是为什么，那会儿完全不明白时间的力量。你积累一个星期的知识或者思考，跟你积累几个月，半年，或者几年的知识和思考是完全不一样的，而且越长时间的积累最后你能看到的不只是积累的结果，还包含来这个积累的过程，在这个过程中可以看到自己的思想变化，自己的进步，能够发现成长的规律，这就是大数据能够发现的事情的，绝不是单点可以发现的知识点，可以引用点，线，面的概念，来比喻不同的思考维度和能够理解的规律范围。
&lt;/p&gt;

&lt;p&gt;
有的时候似乎即使明白积累的意义，也无法很好的做记录。还是说写日记的问题，记得我小时候就有过这么个过程，好像是看漫画时，觉得写日记很有意义，但是提笔又不知道写什么。这里我的觉得问题就在于工具和形式来了。
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;第一，私密性一定要保证，心里自然会认为这只是写给自己看的，而不是公开的，写一篇作文，或一篇要发表的文章，这样才能够放得开，跟自己的内心对话，思绪也才能够心猿意马，不被局限。
&lt;/li&gt;
&lt;li&gt;第二，安全性，不会丢，不会意外坏掉，一直积累着自己的内心世界，直到他又历史价值。
&lt;/li&gt;
&lt;li&gt;第三，不要给自己限制什么标题，什么中心思想，提笔写就是了，想到哪里写到哪里。上初中的时候有一次老师安排讨论一个话题，如何写好作文，现在记忆犹新，当时我就在想，人在说话聊天的时候可以口若悬河，噼里啪啦，怎么一到写作为的时候就哑火了呢？所以当时我就回答老师，把写作文当作平时说话聊天，能说得出来就能写的出来。当时老师说还是有区别的，说我这叫意识流。这位老师我都还有印象，有点胖胖的，姓乔吧，似乎是叫乔石，反正还记得他儿子叫乔丹。现在我得承认，写作和说话还真是不太一样，太绝对是息息相关的。回到前面的话题，所以记笔记的时候不需要标题什么的，文件名什么的，常常会因为思考标题和文件名而打断自己的思路。等到想要当成一篇文章的时候，再根据笔记整理就是了。
&lt;/li&gt;
&lt;li&gt;信息要全。尤其是时间信息，版本变化信息。哪天，什么时候做的笔记，什么时候做的修改，改成了什么样子，你会清晰看到自己的心路历程，自己的成长。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; 查阅&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-5" class="outline-2"&gt;
&lt;h2 id="sec-5"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; 安全&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
三个git仓，每个git仓相当于一个笔记簿的概念。分别是
work.git,public.git,private.git。因为git是分布式，数据是以git仓为单位的。意味三个分离的git仓库数据并不会想通，个人的信息并不需提交到工作的
git仓库中，可以选择性的提交想提交的分支上去，相反，可以把工作信息，和公开信息在个人git仓库中设置分支跟踪，这样就实现了数据隔离，数据安全，和便利的数据同步。公司电脑上存在work.git public.git，个人电脑和vps上三个仓库都存在，只不过vps上是裸仓库，作为数据备份。
&lt;/p&gt;

&lt;p&gt;
为什么public要不同到github上呢？首先肯定是要有静态网页服务的，查看笔记方便。org的源文件相比网页的可读性还是差一些。GitHub提供的服务还是比较稳定的，访问速度也比较快，如果用自己的vps搭，稳定性和速度是个大问题。其二，如果自己的笔记对其他人有价值，就公开吧，让这些笔记发挥他的价值。毕竟人是社会的人，不要把自己完全封闭。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>利用orgmode做项目计划</title><link href="http://www.iknockdoor.com/%E5%88%A9%E7%94%A8orgmode%E5%81%9A%E9%A1%B9%E7%9B%AE%E8%AE%A1%E5%88%92.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/利用orgmode做项目计划.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 装逼专项&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. 第一步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. 第二步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-2-1"&gt;1.2.1. 第二步里面的小插曲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3"&gt;1.3. 第三步&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 装逼专项 …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 装逼专项&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-1"&gt;1.1. 第一步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-2"&gt;1.2. 第二步&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1-2-1"&gt;1.2.1. 第二步里面的小插曲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-1-3"&gt;1.3. 第三步&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 装逼专项&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; 第一步&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; 第二步&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-2-1" class="outline-4"&gt;
&lt;h4 id="sec-1-2-1"&gt;&lt;span class="section-number-4"&gt;1.2.1&lt;/span&gt; 第二步里面的小插曲&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-1-2-1"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; 第三步&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>如何与人相处</title><link href="http://www.iknockdoor.com/%E5%A6%82%E4%BD%95%E4%B8%8E%E4%BA%BA%E7%9B%B8%E5%A4%84.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/如何与人相处.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 做人要有原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 成人之美&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 心胸豁达&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 做人要有原则&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
这个问题也不是第一次提及了，但是每次好想都没有做的很到位。做人有原则是顺利个人威信，个人态度，值得他人尊重的最基本因素。到现在所遇到的特别需要讲原则的地方有：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;言而有信就是说到做到，无论你的地位如何，无论事情多么的小 …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 做人要有原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 成人之美&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. 心胸豁达&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 做人要有原则&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
这个问题也不是第一次提及了，但是每次好想都没有做的很到位。做人有原则是顺利个人威信，个人态度，值得他人尊重的最基本因素。到现在所遇到的特别需要讲原则的地方有：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;言而有信就是说到做到，无论你的地位如何，无论事情多么的小，当给人承诺的适合就一定做到，说在什么时候做到，就一定在什么时候做到，不给自己找任何的理由。比如DF说周四找国内某领导谈播放器的事情，虽然一周都没在，周四的时候还是准时给了我答复；比如之前创维的领导，喝酒的时候说给我一个手包，第二天真的给我带来了，当时我是打心底的佩服。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 成人之美&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
这个点也不是第一次提了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; 心胸豁达&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
这个点可以说是这样的，从小总是很谨慎，把人总往坏处想，事情总往不好的方面想，或者负能量过多，对事待人太过谨慎和负面。完全可以把事情正能量的思考，这个点以前思考过，该来的总会来，正能量与负能量对事情本身的改变通常是没有什么区别的，但是不同的态度却可能有很大变化。另外，可以把人想象的不那么小人，第一，即使他真的有什么小私信，包容一点，又能怎样，谁还没个缺点。第二，总是把人的初衷考虑成是正向的，对他人有信心，对他人有信赖，这并不是说要蒙蔽自己的双眼，而是说我们有能力，而且可以看清敌人的诡计，但是我们相信他人是好的，只是当不好的事情发生时我们有能力，有方法去应对。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>如何实现在emacs中编辑org文件并在浏览器中实时预览</title><link href="http://www.iknockdoor.com/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%9C%A8emacs%E4%B8%AD%E7%BC%96%E8%BE%91org%E6%96%87%E4%BB%B6%E5%B9%B6%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E5%AE%9E%E6%97%B6%E9%A2%84%E8%A7%88.html" rel="alternate"></link><published>2017-12-13T00:00:00+08:00</published><updated>2017-12-13T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-12-13:/如何实现在emacs中编辑org文件并在浏览器中实时预览.html</id><summary type="html">&lt;p&gt;
如何实现在emacs中编辑org文件并在浏览器中实时预览
&lt;/p&gt;
</summary><content type="html">&lt;p&gt;
如何实现在emacs中编辑org文件并在浏览器中实时预览
&lt;/p&gt;
</content></entry><entry><title>git命令按tab键的自动补全</title><link href="http://www.iknockdoor.com/git%E5%91%BD%E4%BB%A4%E6%8C%89tab%E9%94%AE%E7%9A%84%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8.html" rel="alternate"></link><published>2017-09-15T00:00:00+08:00</published><updated>2017-09-15T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-09-15:/git命令按tab键的自动补全.html</id><summary type="html">&lt;p&gt;
在mac os x系统中的terminal中使用git命令时默认没有支持tab自动补全，用起来会不太方便。
&lt;/p&gt;

&lt;p&gt;
如果不想用网上的脚本解决，倒是有个安全简单的方法：
&lt;/p&gt;

&lt;p&gt;
step 1.通过以下命令搜索系统中的git补全脚本
&lt;/p&gt;
&lt;pre class="example"&gt;
sudo find / -name git-completion.bash
&lt;/pre&gt;
&lt;p&gt;
搜出来的路径会因是从Xcode安装的还是从Command Line Tools安装的有区别，我的是Xcode安装的（建议Command Line …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
在mac os x系统中的terminal中使用git命令时默认没有支持tab自动补全，用起来会不太方便。
&lt;/p&gt;

&lt;p&gt;
如果不想用网上的脚本解决，倒是有个安全简单的方法：
&lt;/p&gt;

&lt;p&gt;
step 1.通过以下命令搜索系统中的git补全脚本
&lt;/p&gt;
&lt;pre class="example"&gt;
sudo find / -name git-completion.bash
&lt;/pre&gt;
&lt;p&gt;
搜出来的路径会因是从Xcode安装的还是从Command Line Tools安装的有区别，我的是Xcode安装的（建议Command Line Tools安装，Xcode比较大，而且如果不做iOS开发并没什么用），路径如下：
&lt;/p&gt;
&lt;pre class="example"&gt;
/Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash
&lt;/pre&gt;
&lt;p&gt;
step 2.在~/.bash&lt;sub&gt;profile文件添加一下内容&lt;/sub&gt;
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;&lt;span class="org-keyword"&gt;if&lt;/span&gt; [ -f /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash ]; &lt;span class="org-keyword"&gt;then&lt;/span&gt;
   &lt;span class="org-builtin"&gt;source&lt;/span&gt; /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash
&lt;span class="org-keyword"&gt;fi&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
step 3.重启一下terminal或者执行下面的命令，然后试一下吧
&lt;/p&gt;
&lt;pre class="example"&gt;
source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash
&lt;/pre&gt;
</content></entry><entry><title>石家庄一日</title><link href="http://www.iknockdoor.com/%E7%9F%B3%E5%AE%B6%E5%BA%84%E4%B8%80%E6%97%A5.html" rel="alternate"></link><published>2017-08-08T00:00:00+08:00</published><updated>2017-08-08T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-08-08:/石家庄一日.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 2017-08-08 23:16 CST 1502205413&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-4BC6C044-08CD-4A93-A311-7F7A83C1E0E6" name="ID-4BC6C044-08CD-4A93-A311-7F7A83C1E0E6"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 2017-08-08 23:16 CST 1502205413&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
石家庄是一个很不错的城市，刚下火车，在去办事地方的路上发现空气比上次来好太多了 …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 2017-08-08 23:16 CST 1502205413&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-4BC6C044-08CD-4A93-A311-7F7A83C1E0E6" name="ID-4BC6C044-08CD-4A93-A311-7F7A83C1E0E6"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 2017-08-08 23:16 CST 1502205413&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
石家庄是一个很不错的城市，刚下火车，在去办事地方的路上发现空气比上次来好太多了，天空已经是可以看得见的蓝，还有白云，之前到处在施工的地铁已经建好，马路很干净。
&lt;/p&gt;

&lt;p&gt;
周六去到办事的地方，虽然上班但是无法办理相应业务，只能等到周一再办。但是服务人员的还是很热情的帮我看了下材料是否齐全，得知我从外地过来还告诉我可以代办。等到周一的时候只用了20分钟就办完了所有手续，真心为我大石家庄公职部门办事效率和服务态度点赞！
&lt;/p&gt;

&lt;p&gt;
石家庄人民的热情直爽随处都可以感受到，从的士司机师傅，到公职人员，从街边小贩到酒店保洁阿姨，你会发现这个城市人民的淳朴和热情，可以拿老北京对比，少了一些痞气，多了一些悠然，可以从他们身上感受到他们生活在这里安居乐业，怡然自得，没有大城市随处可见的焦虑和压抑。
&lt;/p&gt;

&lt;p&gt;
回来的时候网上查了一下烧鸡店，想吃一下南方吃不到烧鸡，事实上这几天一直在吃炒饼，真是百吃不厌。找到一家大名正宗二毛烧鸡，沿路线而寻，却没找到。可能搬地方了吧，找的这家店是那种路边小店，并不是什么大饭店或连锁机构，对于这种传统的美食还是这种街边小店最正宗最地道。虽没找到烧鸡店，但却找到一个小巷子，从外面看去有点衰败景象，然而拐个弯就别有洞天了，特别像老家的菜市场，熟食，小饭馆，柴米油盐，水果，凉皮儿凉粉儿应有尽有，简单逛了下，很有感觉。
&lt;/p&gt;

&lt;p&gt;
&lt;img src="data/4B/C6C044-08CD-4A93-A311-7F7A83C1E0E6/416929403_2017-12-13_22-14-53.jpg" alt="416929403_2017-12-13_22-14-53.jpg" /&gt;
&lt;img src="data/4B/C6C044-08CD-4A93-A311-7F7A83C1E0E6/IMG_0343_2017-12-13_22-15-32.jpg" alt="IMG_0343_2017-12-13_22-15-32.jpg" /&gt;
&lt;img src="data/4B/C6C044-08CD-4A93-A311-7F7A83C1E0E6/IMG_0345_2017-12-13_22-16-37.jpg" alt="IMG_0345_2017-12-13_22-16-37.jpg" /&gt;
&lt;img src="data/4B/C6C044-08CD-4A93-A311-7F7A83C1E0E6/IMG_0346_2017-12-13_22-16-56.jpg" alt="IMG_0346_2017-12-13_22-16-56.jpg" /&gt;
哦，对了，最终买了几只金凤烧鸡，据说是石家庄特产，对我来说是北方的烧鸡就好。
&lt;img src="data/4B/C6C044-08CD-4A93-A311-7F7A83C1E0E6/1993246798_2017-12-13_22-17-24.jpg" alt="1993246798_2017-12-13_22-17-24.jpg" /&gt;
再说一下石家庄的美女吧，可能没有一线城市美女那么时尚，但却看起来特别美，身材皮肤特别好，随处可见大长腿，又白又直。面部和南方妹纸有很明显的区别，就是典型的北方人的特征，这种美并不是石家庄所特有，北方大部分城市都这样吧，我想。事实上我一也一直以北方人的美为美，看着也更赏心悦目。
&lt;/p&gt;

&lt;p&gt;
有一点变化可能并没有给这个城市加分，那就是随处可以见的洗脚按摩店，之前来的时候去过一次，至今记忆犹新，简直就是噩梦，技师技术就不说了，感觉个人卫生很差，看着都不想让她碰自己，从那之后就告别了洗脚按摩。这次来洗脚店似乎比以前更多了，但上次去的时候发现其实里面技师并不是北方人。
&lt;/p&gt;

&lt;p&gt;
回来的时候体验了一下石家庄地铁，很新，无论是车站还是车厢味道特别大，会呛鼻子，坐地铁的人并不多，3号线10
分钟一趟，时间还挺久的，出了地铁路线指示牌也比较少，不太方便，看很多人出了地铁都不知道往哪边走，毕竟以前没有地铁，还是经验少了点。
&lt;img src="data/4B/C6C044-08CD-4A93-A311-7F7A83C1E0E6/1875103677_2017-12-13_22-17-58.jpg" alt="1875103677_2017-12-13_22-17-58.jpg" /&gt;
&lt;img src="data/4B/C6C044-08CD-4A93-A311-7F7A83C1E0E6/599416514_2017-12-13_22-18-09.jpg" alt="599416514_2017-12-13_22-18-09.jpg" /&gt;
下一次再来石家庄就不知道什么时候了。哦，对了，石家庄的火车站非常赞，通风透气，凉快，干净整洁，点个赞。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>早点睡觉</title><link href="http://www.iknockdoor.com/%E6%97%A9%E7%82%B9%E7%9D%A1%E8%A7%89.html" rel="alternate"></link><published>2017-07-27T00:00:00+08:00</published><updated>2017-07-27T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-07-27:/早点睡觉.html</id><summary type="html">&lt;p&gt;
好累，最近两三个星期总是感觉身体很疲惫。晚上又总是睡不着或睡不好，白天状态也很糟糕。可能真的是身体越来越不如以前，这种感觉也是第一次出现。以前加班，熬夜，第二天依然精神很好，现在只要头一天晚上睡的晚一些，第二天整个人的状态就不好，总是感觉乏，感觉困。到现在连出去玩都不愿意去了，和朋友一起吃吃饭，唱唱歌的精力感觉都没有。
&lt;/p&gt;

&lt;p&gt;
身体太重要，25岁的时候感觉身体状态开始恢复的没那么快，开始意识到这个问题，30岁的时候感觉不只是恢复的问题了 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
好累，最近两三个星期总是感觉身体很疲惫。晚上又总是睡不着或睡不好，白天状态也很糟糕。可能真的是身体越来越不如以前，这种感觉也是第一次出现。以前加班，熬夜，第二天依然精神很好，现在只要头一天晚上睡的晚一些，第二天整个人的状态就不好，总是感觉乏，感觉困。到现在连出去玩都不愿意去了，和朋友一起吃吃饭，唱唱歌的精力感觉都没有。
&lt;/p&gt;

&lt;p&gt;
身体太重要，25岁的时候感觉身体状态开始恢复的没那么快，开始意识到这个问题，30岁的时候感觉不只是恢复的问题了，所以还是要从一开始就保养身体，不要等到发现身体有问题时才反应过来，往往很难补救。
&lt;/p&gt;

&lt;p&gt;
一直想着晚上能够早点睡觉，11点，这样第二天的状态会不错，可是总是无法很好的控制自己的心态和情绪，有的时候心里一有事情就会总是挂念着，翻来覆去，前思后想，心理负担很重，患得患失。或者就是因为一些事情兴奋，然后也是睡不着。无论是焦虑还是兴奋，还是无法很好的控制自己的情绪，不够成熟，不够有调理的处理事情，还是心太急，这是自己的一个老毛病，难道真的是江山易改本性难移？始终没有克服自己急性子的毛病。
&lt;/p&gt;

&lt;p&gt;
我想足够的成熟，熟练的控制情绪，可以把事情良好的控制在一个范围，不应出现非常着急的境况。其次该处理事情的时候就处理，不该处理的时候想太多也并不会改变什么，放下，泰然处之，到现在，还有什么事情是不可解决的，或者无法面对的呢？无需焦虑，无需兴奋，摒弃急性子的毛病，像一只打不死的小强一样学会并乐于打持久战。赢一时容易，长期坚持一个战略却很难，最后还是回到了以前悟出的一个道理，最重要的是坚持和积累。
&lt;/p&gt;

&lt;p&gt;
11点了，睡觉。
&lt;/p&gt;
</content></entry><entry><title>神化与崇拜</title><link href="http://www.iknockdoor.com/%E7%A5%9E%E5%8C%96%E4%B8%8E%E5%B4%87%E6%8B%9C.html" rel="alternate"></link><published>2017-07-24T00:00:00+08:00</published><updated>2017-07-24T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-07-24:/神化与崇拜.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 2017-07-24 00:09 CST 1500826141&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-3AB97E96-17B5-49BC-B823-CD4F269CD0C8" name="ID-3AB97E96-17B5-49BC-B823-CD4F269CD0C8"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 2017-07-24 00:09 CST 1500826141&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/3A/B97E96-17B5-49BC-B823-CD4F269CD0C8/emacs_2017-12-13_22-20-43.png" alt="emacs_2017-12-13_22-20-43.png" style="width:128px" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
gnu emacs version …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 2017-07-24 00:09 CST 1500826141&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-3AB97E96-17B5-49BC-B823-CD4F269CD0C8" name="ID-3AB97E96-17B5-49BC-B823-CD4F269CD0C8"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 2017-07-24 00:09 CST 1500826141&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/3A/B97E96-17B5-49BC-B823-CD4F269CD0C8/emacs_2017-12-13_22-20-43.png" alt="emacs_2017-12-13_22-20-43.png" style="width:128px" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
gnu emacs version 25.x开始换了新的logo，感觉异常的漂亮，看到这个logo心中会有一种如同见到了女神一样的喜悦之情，感觉血管中充满了多巴胺。
&lt;/p&gt;

&lt;p&gt;
从来没有追过星，可能这就是追星的感觉吧。
&lt;/p&gt;

&lt;p&gt;
并不一定就是这个logo真的有多漂亮，仔细想了下，应该是最近使用emacs更多了，而且尝试了一些新功能，elisp也有些进步，尤其是体验了org-mode强大的功能，确实为之叹服，因此心中确实认为emacs无所不能，强大至极，崇拜之情油然而生，形成了一种只要有emacs在手，还有什么做不到的错觉。在这种感觉之下，爱屋及乌吧，于是觉得emacs的logo异常漂亮。
&lt;/p&gt;

&lt;p&gt;
可以扩展以下，在生活中应该也是如此，当一个人强大到神的地步，什么都可以做的好，什么都可以赢的时候，就会给人一种安全感，令人崇拜的感觉，比如体育明星，各种世界冠军，当常人做不到的时候，他们可以做得到，于是我们开始欣赏他们的比赛，欣赏他们挑战极限的过程，欣赏他们战胜不能的过程，欣赏他们获胜的一瞬间，那一瞬间我们获得了巨大的安全感，信任感和崇拜感，在这个过程中他们也就成为了我们心中无所不能的神。再进一步，当古代人们面对各种自然现象而无解的时候，人们崇拜的是自己虚构出来的神，同样表达了这种精神寄托。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>芽庄游记</title><link href="http://www.iknockdoor.com/%E8%8A%BD%E5%BA%84%E6%B8%B8%E8%AE%B0.html" rel="alternate"></link><published>2017-07-24T00:00:00+08:00</published><updated>2017-07-24T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-07-24:/芽庄游记.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 2017-07-24 00:57 CST 1500829035&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-9FC095A6-5669-4D85-8158-78A6325D29F8" name="ID-9FC095A6-5669-4D85-8158-78A6325D29F8"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 2017-07-24 00:57 CST 1500829035&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
跟团去的，并不是什么纯玩团，会有两个购物点 …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 2017-07-24 00:57 CST 1500829035&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-9FC095A6-5669-4D85-8158-78A6325D29F8" name="ID-9FC095A6-5669-4D85-8158-78A6325D29F8"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 2017-07-24 00:57 CST 1500829035&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
跟团去的，并不是什么纯玩团，会有两个购物点，去就可以了，并不强制购物，但整体价格还相对便宜。但整个芽庄之旅体验非常糟糕。也是第一次出国，回国之后由衷的感慨祖国的强大，先进与文明。
&lt;/p&gt;

&lt;p&gt;
越南的海关工作人员真的会索取小费，入关的时候给了，开始的时候以为是导游为了让自己少一些麻烦然后错误的引导大家，回程的时候才发现，如果没有给小费，工作人员真的会各种怠慢，而且可能还会找茬儿，同事的签证有了一点点的污迹，都被拉去小黑屋，然后被索取了200RMB就解决了。另外一个同事签证名字拼错了，竟然用
20RMB就解决了，而且还可以插队安检（准确的说，安检完全是形同虚设），如果公职人员都是这样有钱能使鬼推磨，那得是有多么黑暗。再对比一下国内，你真的会发现，我们的祖国是多么的先进和文明，公职人员是多么的认真负责。
&lt;/p&gt;

&lt;p&gt;
第一天住的酒店五星级，还算挺好的，比较新，海景房，面朝大海春暖花开的感觉。后面两天四星级酒店，环境也还可以，只是会停电。。。而且第一天就停了大半天。。。基础设施啊。。。
&lt;/p&gt;

&lt;p&gt;
芽庄除了海边，几乎就没有什么景点了，第一天去了一个什么什么寺，据说有些历史了，景点小，几乎没什么可观赏的不说，到那就遇到了本地人大家，而且还是城管出手。。。出门又遇到强买强卖的小朋友，拿着不知道是什么东西往你身上塞，还不断的追着你要钱。。。我们只能灰溜溜的远离。
&lt;/p&gt;

&lt;p&gt;
再说这民风吧，据之前来过的同事说，几年前芽庄人民还是很淳朴的，可是我们这次却完全没有体验到。打车司机会绕路，即使你拿着手机给他导航，他还是会装作听不懂你说什么，继续在错的路线上开，最后还要跟你要钱。再加上地接导游各种讲的民风彪悍，什么飞车抢包的，什么坑蒙拐骗偷的。。。
&lt;/p&gt;

&lt;p&gt;
吃饭我们遇到的事情也算是挺奇葩了，值得一说。首先，在芽庄，你用大众点评之类的搜到的基本上都是中国人很多的地方。芽庄俄罗斯人和中国人都非常多，但是俄罗斯人只在海边度度假而已，中国人就是在各个景点了，芽庄有几个岛，有一些娱乐项目，上到岛上你会发现人山人海的都是中国人，比国内还要火爆。有点跑偏，继续说这个吃的。去了一家海鲜餐厅，嗯，一定要特意说出这家餐厅的名字叫879，这个餐厅就有意思了，你在点菜的时候，你问哪个菜多少钱，他就说你点了哪个菜，然后还假装听不懂，然后菜单还是两份的，本地人一份，中国人一份，我们还没有确定要吃什么，老板就把我们问过的菜上来了，还好我们制止的早，但也就几个素菜，就花去了500多RMB，然后还各种说不清，真是第一次遇到，感觉非常坑。
&lt;img src="data/9F/C095A6-5669-4D85-8158-78A6325D29F8/img0310_2017-12-13_22-21-39.jpg" alt="img0310_2017-12-13_22-21-39.jpg" /&gt;
&lt;img src="data/9F/C095A6-5669-4D85-8158-78A6325D29F8/img0311_2017-12-13_22-21-44.jpg" alt="img0311_2017-12-13_22-21-44.jpg" /&gt;
&lt;img src="data/9F/C095A6-5669-4D85-8158-78A6325D29F8/img0312_2017-12-13_22-21-47.jpg" alt="img0312_2017-12-13_22-21-47.jpg" /&gt;
上面有说到去海岛上玩，一方面是人山人海的中国人，另一方面本地的娱乐项目就如同走马观花，而且价格不菲，说好的深浅项目，只是下去洗了个澡，几分钟就上来了，而且就一次，然后就下一波人，跟印钞机一样。另外海水也不清澈，还不如三亚。。。
&lt;/p&gt;

&lt;p&gt;
最后说一下购物环节，本来还算好吧，那个傻逼猪头地接导游因为我们不买乳胶店的产品，就各种谩骂我们的同事，还不叫车来，我们足足在乳胶店等到中午1
点多，相当于国内的两点多，饭都没吃上。。。第二天我们就抗议了，开除了那个导游，没再让她过来。另外回国的时候司机还跟我们要小费，明码标价，跟抢似的，每次都让我们顶着大太阳等车，还真好意思要。。。反正我是没给。
&lt;/p&gt;

&lt;p&gt;
最后我想说，越南虽然是个农业国，相对落后，但是出去了才会发现还是祖国好，才会发现祖国的繁荣富强。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>emacs中的自动换行</title><link href="http://www.iknockdoor.com/emacs%E4%B8%AD%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C.html" rel="alternate"></link><published>2017-07-23T00:00:00+08:00</published><updated>2017-07-23T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-07-23:/emacs中的自动换行.html</id><summary type="html">&lt;p&gt;
这里自动换行是有两种意思：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;一种显示层面的，当显示长句时，超过屏幕范围时自动在起另一行显示，这种操作叫做
truncate-lines，这种操作只是在显示层面做了换行，并不是真的在原内容上插入了换行符。

&lt;p&gt;
可以用以下命令在buffer种打开自动换行
&lt;/p&gt;
&lt;pre class="example"&gt;
M-x toggle-truncate-lines
&lt;/pre&gt;
&lt;p&gt;
可以在初始化文件中加入以下内容，默认全部换行，还是很方便的，阅读内容时不用总是移动
&lt;/p&gt;
&lt;pre class="example"&gt;
(set-default 'truncate-lines t)
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;另一种换行是在编辑层面的，当编辑内容超出一定长度后自动插入换行符 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
这里自动换行是有两种意思：
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;一种显示层面的，当显示长句时，超过屏幕范围时自动在起另一行显示，这种操作叫做
truncate-lines，这种操作只是在显示层面做了换行，并不是真的在原内容上插入了换行符。

&lt;p&gt;
可以用以下命令在buffer种打开自动换行
&lt;/p&gt;
&lt;pre class="example"&gt;
M-x toggle-truncate-lines
&lt;/pre&gt;
&lt;p&gt;
可以在初始化文件中加入以下内容，默认全部换行，还是很方便的，阅读内容时不用总是移动
&lt;/p&gt;
&lt;pre class="example"&gt;
(set-default 'truncate-lines t)
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;另一种换行是在编辑层面的，当编辑内容超出一定长度后自动插入换行符，这样可以使得编辑内容非常整齐，这里不同于truncate-lines，这里是真的插入了换行符。

&lt;p&gt;
refill-mode和auto-fill-mode都是做这个事情的，不过refill-mode会把
buffer中所有内容做处理，不够智能，往往有一些内容，比如表格什么的我们并不想做处理。所以常用auto-fill-mode，只对当前行生效，再配合
fill-region等命令非常智能和方便。
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>ubuntu桌面快捷方式创建</title><link href="http://www.iknockdoor.com/ubuntu%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA.html" rel="alternate"></link><published>2017-07-22T00:00:00+08:00</published><updated>2017-07-22T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-07-22:/ubuntu桌面快捷方式创建.html</id><summary type="html">&lt;p&gt;
以下目录创建.desktop文件都会生效，作用范围不同
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;/usr/share/applications&lt;/td&gt;
&lt;td class="left"&gt;全局&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;~/.local/share/applications&lt;/td&gt;
&lt;td class="left"&gt;用户&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;~/.gnome/apps&lt;/td&gt;
&lt;td class="left"&gt;用户&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
创建emacs启动快捷方式
emacs ~/.local/share/applications/emacs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
以下目录创建.desktop文件都会生效，作用范围不同
&lt;/p&gt;
&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;/usr/share/applications&lt;/td&gt;
&lt;td class="left"&gt;全局&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;~/.local/share/applications&lt;/td&gt;
&lt;td class="left"&gt;用户&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;~/.gnome/apps&lt;/td&gt;
&lt;td class="left"&gt;用户&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
创建emacs启动快捷方式
emacs ~/.local/share/applications/emacs.desktop
&lt;/p&gt;
&lt;pre class="example"&gt;
[Desktop Entry]
Encoding=UTF-8
Version=1.0
Type=Application
Name=emacs
Icon=emacs
Path=/usr/local/bin
Exec=emacs
StartupNotify=false
StartupWMClass=Emacs
OnlyShowIn=Unity;
X-UnityGenerated=true
&lt;/pre&gt;
&lt;p&gt;
创建intellj idea快捷方式
emacs ~/.local/share/applications/idea.desktop
&lt;/p&gt;
&lt;pre class="example"&gt;
[Desktop Entry]
Version=1.0
Type=Application
Name=IntelliJ IDEA Community Edition
Icon=/home/liangzhen/Tools/idea-IC-163.13906.18/bin/idea.png
Exec="/home/liangzhen/Tools/idea-IC-163.13906.18/bin/idea.sh" %f
Comment=The Drive to Develop
Categories=Development;IDE;
Terminal=false
StartupWMClass=jetbrains-idea-ce
&lt;/pre&gt;
</content></entry><entry><title>安装emacs</title><link href="http://www.iknockdoor.com/%E5%AE%89%E8%A3%85emacs.html" rel="alternate"></link><published>2017-07-22T00:00:00+08:00</published><updated>2017-07-22T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-07-22:/安装emacs.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. mac os x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. centos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-4-1"&gt;4.1. centos 6.x …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. mac os x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4"&gt;4. centos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-4-1"&gt;4.1. centos 6.x nox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4-2"&gt;4.2. centos 7.x&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-4-2-1"&gt;4.2.1. 方案1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-4-2-2"&gt;4.2.2. 方案2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; ubuntu 14.04&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
以下安装的是24.5，安装目前最新版本25.2.1只需要下载对应的源码，相同的编译安装步骤
&lt;/p&gt;

&lt;p&gt;
安装完成后添加启动快捷方式到launcher，参考 ubuntu添加快捷方式
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#23433;&amp;#35013;&amp;#20381;&amp;#36182;&lt;/span&gt;
sudo apt-get install build-essential
sudo apt-get build-dep emacs24
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#19979;&amp;#36733;&amp;#28304;&amp;#30721;&lt;/span&gt;
wget http://ftp.gnu.org/gnu/emacs/emacs-24.5.tar.gz
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#35299;&amp;#21387;&amp;#32534;&amp;#35793;&lt;/span&gt;
tar zxvf emacs-24.5.tar.gz
&lt;span class="org-builtin"&gt;cd&lt;/span&gt; emacs-24.5
./configure
&lt;span class="org-comment-delimiter"&gt;#&lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#22914;&amp;#26524; configure &amp;#36825;&amp;#19968;&amp;#27493;&amp;#20986;&amp;#38169;, &amp;#19968;&amp;#33324;&amp;#26159;&amp;#32570;&amp;#23569;&amp;#20854;&amp;#20182;&amp;#30456;&amp;#23545;&amp;#24212;&amp;#30340;&amp;#20381;&amp;#36182;&amp;#30340;, &amp;#36825;&amp;#26102;, &amp;#21487;&amp;#20197;&amp;#20351;&amp;#29992; `aptitude` &amp;#36825;&amp;#20010;&amp;#24037;&amp;#20855;&amp;#26469;&amp;#35299;&amp;#20915;&amp;#20381;&amp;#36182;&amp;#30340;&amp;#38382;&amp;#39064;.&lt;/span&gt;
make -j 4
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#23433;&amp;#35013;&lt;/span&gt;
sudo make install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; mac os x&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
主要参考源码中INSTALL文件，我在安装过程中并不需要任何的依赖，可能是因为装了xcode的缘故
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#19979;&amp;#36733;&amp;#28304;&amp;#30721;&lt;/span&gt;
wget http://ftp.gnu.org/gnu/emacs/emacs-24.5.tar.gz
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#35299;&amp;#21387;&amp;#32534;&amp;#35793;&lt;/span&gt;
tar zxvf emacs-24.5.tar.gz
&lt;span class="org-builtin"&gt;cd&lt;/span&gt; emacs-24.5
./configure
make -j 4
sudo make install
&lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;&amp;#23436;&amp;#25104;&amp;#19978;&amp;#36848;&amp;#27493;&amp;#39588;&amp;#21518;&amp;#20250;&amp;#22312;&amp;#28304;&amp;#30721;nextstep&amp;#30446;&amp;#24405;&amp;#29983;&amp;#25104;emacs.app&amp;#65292;copy&amp;#33267;application&amp;#30446;&amp;#24405;&amp;#21363;&amp;#21487;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; windows&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
用emacs最好还是不要用windows了，违和感太强&amp;#x2026;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; centos&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-4-1" class="outline-3"&gt;
&lt;h3 id="sec-4-1"&gt;&lt;span class="section-number-3"&gt;4.1&lt;/span&gt; centos 6.x nox&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;yum install gcc make ncurses-devel
yum install giflib-devel libjpeg-devel libtiff-devel -y
&lt;span class="org-builtin"&gt;cd&lt;/span&gt; /usr/local/src
wget http://ftp.gnu.org/pub/gnu/emacs/emacs-25.2.1.tar.gz
tar xzvf emacs-25.2.1.tar.gz
&lt;span class="org-builtin"&gt;cd&lt;/span&gt; emacs-25.2.1
./configure --without-x --without-selinux
make &amp;amp;&amp;amp; make install
which emacs
emacs --version
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-2" class="outline-3"&gt;
&lt;h3 id="sec-4-2"&gt;&lt;span class="section-number-3"&gt;4.2&lt;/span&gt; centos 7.x&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-4-2-1" class="outline-4"&gt;
&lt;h4 id="sec-4-2-1"&gt;&lt;span class="section-number-4"&gt;4.2.1&lt;/span&gt; 方案1&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-4-2-1"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;wget http://mirror.sdunix.com/gnu/emacs/emacs-24.5.tar.gz
tar zxvfp emacs-24.5.tar.gz 
&lt;span class="org-builtin"&gt;cd&lt;/span&gt; emacs-24.5/
./configure 
sudo yum -y install libXpm-devel libjpeg-turbo-devel openjpeg-devel openjpeg2-devel turbojpeg-devel giflib-devel libtiff-devel gnutls-devel libxml2-devel GConf2-devel dbus-devel wxGTK-devel gtk3-devel
./configure 
make 
sudo make install
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-4-2-2" class="outline-4"&gt;
&lt;h4 id="sec-4-2-2"&gt;&lt;span class="section-number-4"&gt;4.2.2&lt;/span&gt; 方案2&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-4-2-2"&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-sh"&gt;sudo yum -y install libXpm-devel libjpeg-turbo-devel openjpeg-devel openjpeg2-devel turbojpeg-devel giflib-devel libtiff-devel gnutls-devel libxml2-devel GConf2-devel dbus-devel wxGTK-devel gtk3-devel
wget http://git.savannah.gnu.org/cgit/emacs.git/snapshot/emacs-25.1.tar.gz
tar zxvf emacs-25.1.tar.gz
&lt;span class="org-builtin"&gt;cd&lt;/span&gt; emacs-25.1
./autogen
./configure --without-makeinfo &lt;span class="org-comment-delimiter"&gt;# &lt;/span&gt;&lt;span class="org-comment"&gt;incase makeinfo is not available on your system: Example Centos 7 else `./configure` would do&lt;/span&gt;
sudo make install

&lt;span class="org-comment-delimiter"&gt;## &lt;/span&gt;&lt;span class="org-comment"&gt;verify installation&lt;/span&gt;
which emacs
emacs --version
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry><entry><title>notebook-config-done</title><link href="http://www.iknockdoor.com/notebook-config-done.html" rel="alternate"></link><published>2017-07-20T00:00:00+08:00</published><updated>2017-07-20T00:00:00+08:00</updated><author><name>chappie</name></author><id>tag:www.iknockdoor.com,2017-07-20:/notebook-config-done.html</id><summary type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 记笔记&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 看笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; &lt;code&gt;[27%]&lt;/code&gt;还需要完善的几个地方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
最终还是完成了云笔记的配置，中间有一些关于 emacs，elisp，git和org-page使用的知识，也都还不算难，这里记录一下我的云笔记整体解决方案。
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-9B6B3951-F473-4A7B-86F6-E255F776F044" name="ID-9B6B3951-F473-4A7B-86F6-E255F776F044"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1 …&lt;/span&gt;&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#sec-1"&gt;1. 记笔记&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-2"&gt;2. 看笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sec-3"&gt;3. &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; &lt;code&gt;[27%]&lt;/code&gt;还需要完善的几个地方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
最终还是完成了云笔记的配置，中间有一些关于 emacs，elisp，git和org-page使用的知识，也都还不算难，这里记录一下我的云笔记整体解决方案。
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;a id="ID-9B6B3951-F473-4A7B-86F6-E255F776F044" name="ID-9B6B3951-F473-4A7B-86F6-E255F776F044"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; 记笔记&amp;#xa0;&amp;#xa0;&amp;#xa0;&lt;span class="tag"&gt;&lt;span class="ATTACH"&gt;ATTACH&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
emacs org-mode真的很好用关于记笔记，尝试过很多方案和工具，用过Evernote，confluence，但都不尽如人意，没有一个好的工具也就很难坚持下来，因为常常会丢失。
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-java"&gt;&lt;span class="org-keyword"&gt;public&lt;/span&gt; &lt;span class="org-type"&gt;void&lt;/span&gt; &lt;span class="org-function-name"&gt;main&lt;/span&gt;(&lt;span class="org-type"&gt;String&lt;/span&gt; &lt;span class="org-variable-name"&gt;args&lt;/span&gt;[]){
   System.out.println(&lt;span class="org-string"&gt;"hello world"&lt;/span&gt;);
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
嵌入html
&lt;/p&gt;
&lt;pre class="example"&gt;
@@html:&amp;lt;a href="http://www.flickr.com/photos/ini_always/11186646664/"
title="bind-plain-function-one-var-zero-args by kelvin_hu, on
Flickr"&amp;gt;&amp;lt;img
src="http://farm8.staticflickr.com/7400/11186646664_83038e9c80_o.png"
alt="bind plain function one var zero args"&amp;gt;&amp;lt;/a&amp;gt;@@
&lt;/pre&gt;
&lt;p&gt;
设置图片标题，设置图片属性
&lt;/p&gt;
&lt;pre class="example"&gt;
#+CAPTION: A black cat stalking a spider
#+ATTR_HTML: :alt cat/spider image :title Action! :align right
[[./img/a.jpg]]
&lt;/pre&gt;

&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="data/9B/6B3951-F473-4A7B-86F6-E255F776F044/girl_2017-12-13_22-23-19.jpg" alt="girl_2017-12-13_22-23-19.jpg" /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;支持草稿&amp;#x2013;这一项并没那么重要，本身就是个草稿
&lt;/li&gt;
&lt;li&gt;支持历史版本
&lt;/li&gt;
&lt;li&gt;支持code，uml，org-page是基于org-mode的，所以org-mode可以支持的功能，org-page都可以支持，很强大，图片，uml，code一个都不少。
&lt;/li&gt;
&lt;li&gt;支持移动端
&lt;/li&gt;
&lt;li&gt;笔记应该是纯文本格式的，只有纯文本是最通用的，而且可以被各种自动化工具处理。随着时间的推移和技术的发展，工具可能日新月异，但不变的是纯文本。只有这样在换工具的时候才能保证数据不丢失，成本低。其实还是一切为了积累。
&lt;/li&gt;
&lt;li&gt;可以方便的备份，git本身就相当于分布式的备份了。
&lt;/li&gt;
&lt;li&gt;可以方便的导出各种格式，这个也是纯文本的优势
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; 看笔记&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
GitHub
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; &lt;span class="todo TODO"&gt;TODO&lt;/span&gt; &lt;code&gt;[27%]&lt;/code&gt;还需要完善的几个地方&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 修改插入meta信息（即titile，date这些信息）的模版，目前是交互式的，比较容易打断思路。改成固定的，想修改时再修改。TAGS默认未分类，KEYWORDS
默认chappie，查派
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 自动文件名和标题，在开始记笔记的时候思考标题和文件名非常容易打断思路。所以应该可以自动生成文件名和标题，后面可以再改。
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 支持站点统计
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 支持评论，discus由于众所周时的原因并不好用，有一个开源的，在
org-page也有提到，可以考虑搭一个。再考虑这个问题，是否真的有必要支持评论？这只是一个笔记本，如果有读者想要跟你沟通，可以通过明确的联系方式沟通，并不需要提供一个公众的讨论平台，而且系统会变得繁冗复杂，不那么纯粹，所以我还是决定把联系方式放在比较明确的位置，而不是放一个评论系统
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 改个首页的标题，和域名做个对应
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; rss全文输出，目前是有rss输出的，但是不是全文的，不方便订阅阅读
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 同步微信订阅号
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 把以前的笔记转移过来
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 站内搜索，百度或者bing提供喽
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[-]&lt;/code&gt; org-page功能性问题
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 内部链接相对链接是可以用的，但不能直接链到org文件，生成时会自动转成html文件，而且相对路径还需要是生成的文件在同一个目录下。因此还是直接链接URL，缺点是如果被链接的URL文件地址有修改链接就会出错，所以一般还是不改URI就好
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[X]&lt;/code&gt; 如果不添加meta信息就推送会怎样？文件照样被生成，只是标题什么的，URI什么的都没有，很难看，所以还是要加的
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 如果修改org文件名会怎样？
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 支持plant uml
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 公式编辑的支持，理论上肯定是支持的，需要尝试一下
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 样式优化
&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 导航添加首页，RSS，支持多目录，mdo theme是支持的，kactus不知道为什么不支持，设置一个最大宽度，宽屏电脑上导航太远
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 创建时间，tags信息放在头部，而不是文章底部
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 文章底部添加联系信息
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 文章底部添加阅读更多，相同tags的文章整几个
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 优化一下关于页面
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; kacus sheme宽度太小
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 增加头像和简介，以及社交账号
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; 支持分页
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content></entry></feed>